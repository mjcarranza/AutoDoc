{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { environment } from 'src/environments/environment';\nimport { gptModels } from '../models/constants';\nlet DemoComponent = class DemoComponent {\n  constructor() {\n    this.gptModels = gptModels;\n    this.promptText = '';\n    this.showSpinner = false;\n  }\n\n  ngOnInit() {}\n\n  checkResponse() {\n    this.invokeGPT();\n  }\n\n  getText(data) {\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n\n  invokeGPT() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        let requestData = {\n          model: 'text-davinci-003',\n          prompt: _this.promptText,\n          temperature: 0.95,\n          max_tokens: 150,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0\n        };\n        _this.showSpinner = true;\n        let apiResponse = yield openai.createCompletion(requestData);\n        _this.response = apiResponse.data;\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false; // Consider adjusting the error handling logic for your use case\n\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n\n  generatePrompt(animal) {\n    const capitalizedAnimal = animal[0].toUpperCase() + animal.slice(1).toLowerCase();\n    return `Suggest three names for an animal that is a superhero.\n  Animal: Cat\n  Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline\n  Animal: Dog\n  Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot\n  Animal: ${capitalizedAnimal}\n  Names:`;\n  }\n\n};\nDemoComponent = __decorate([Component({\n  selector: 'app-demo',\n  templateUrl: './demo.component.html',\n  styleUrls: ['demo.component.css']\n})], DemoComponent);\nexport { DemoComponent }; //https://beta.openai.com/docs/api-reference/completions/create","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,QAAkC,eAAlC;AACA,SAAQC,aAAR,EAAuBC,SAAvB,QAAuC,QAAvC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAEA,SAASC,SAAT,QAA0B,qBAA1B;AASA,IAAaC,aAAa,GAA1B,MAAaA,aAAb,CAA0B;EAMxBC;IAJE,iBAAYF,SAAZ;IACA,kBAAa,EAAb;IACA,mBAAc,KAAd;EAIE;;EAEJG,QAAQ,IAEP;;EAEDC,aAAa;IACX,KAAKC,SAAL;EACD;;EAEDC,OAAO,CAACC,IAAD,EAAY;IACjB,OAAOA,IAAI,CAACC,KAAL,CAAW,IAAX,EAAiBC,MAAjB,CAAwBC,CAAC,IAAEA,CAAC,CAACC,MAAF,GAAS,CAApC,CAAP;EACD;;EAEKN,SAAS;IAAA;;IAAA;MAEb,IAAG,KAAI,CAACO,UAAL,CAAgBD,MAAhB,GAAuB,CAA1B,EACA;;MAEA,IAAG;QACD,KAAI,CAACE,QAAL,GAAeC,SAAf;QACA,IAAIC,aAAa,GAAG,IAAIlB,aAAJ,CAAkB;UAACmB,MAAM,EAAEjB,WAAW,CAACiB;QAArB,CAAlB,CAApB;QACA,IAAIC,MAAM,GAAG,IAAInB,SAAJ,CAAciB,aAAd,CAAb;QAEA,IAAIG,WAAW,GAAC;UACdC,KAAK,EAAE,kBADO;UAEdC,MAAM,EAAE,KAAI,CAACR,UAFC;UAGdS,WAAW,EAAE,IAHC;UAIdC,UAAU,EAAE,GAJE;UAKdC,KAAK,EAAE,GALO;UAMdC,iBAAiB,EAAE,GANL;UAOdC,gBAAgB,EAAE;QAPJ,CAAhB;QASA,KAAI,CAACC,WAAL,GAAmB,IAAnB;QACA,IAAIC,WAAW,SAAUV,MAAM,CAACW,gBAAP,CAAwBV,WAAxB,CAAzB;QAEA,KAAI,CAACL,QAAL,GAAgBc,WAAW,CAACpB,IAA5B;QACA,KAAI,CAACmB,WAAL,GAAmB,KAAnB;MACD,CAnBD,CAmBC,OAAMG,KAAN,EAAiB;QAChB,KAAI,CAACH,WAAL,GAAmB,KAAnB,CADgB,CAEhB;;QACA,IAAIG,KAAK,CAAChB,QAAV,EAAoB;UAClBiB,OAAO,CAACD,KAAR,CAAcA,KAAK,CAAChB,QAAN,CAAekB,MAA7B,EAAqCF,KAAK,CAAChB,QAAN,CAAeN,IAApD;QAED,CAHD,MAGO;UACLuB,OAAO,CAACD,KAAR,CAAc,kCAAkCA,KAAK,CAACG,OAAO,EAA7D;QAED;MACF;IAlCY;EAmCd;;EAEAC,cAAc,CAACC,MAAD,EAAc;IAC3B,MAAMC,iBAAiB,GACrBD,MAAM,CAAC,CAAD,CAAN,CAAUE,WAAV,KAA0BF,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBC,WAAhB,EAD5B;IAEA,OAAO;;;;;YAKCH,iBAAiB;SALzB;EAOD;;AArEuB,CAA1B;AAAalC,aAAa,eALzBL,SAAS,CAAC;EACT2C,QAAQ,EAAE,UADD;EAETC,WAAW,EAAE,uBAFJ;EAGTC,SAAS,EAAE,CAAC,oBAAD;AAHF,CAAD,CAKgB,GAAbxC,aAAa,CAAb;SAAAA,gB,CA2Eb","names":["Component","Configuration","OpenAIApi","environment","gptModels","DemoComponent","constructor","ngOnInit","checkResponse","invokeGPT","getText","data","split","filter","f","length","promptText","response","undefined","configuration","apiKey","openai","requestData","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","showSpinner","apiResponse","createCompletion","error","console","status","message","generatePrompt","animal","capitalizedAnimal","toUpperCase","slice","toLowerCase","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\mario\\Desktop\\AutoDocIA\\src\\app\\demo\\demo.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport {Configuration, OpenAIApi} from \"openai\";\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { gptModels } from '../models/constants';\r\nimport { ResponseModel } from '../models/gpt-response';\r\n\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './demo.component.html',\r\n  styleUrls: ['demo.component.css'],\r\n})\r\nexport class DemoComponent implements OnInit {\r\n    response!: ResponseModel | undefined;\r\n    gptModels = gptModels\r\n    promptText = '';\r\n    showSpinner = false;\r\n\r\n  constructor(\r\n    \r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n\r\n  checkResponse() {\r\n    this.invokeGPT();\r\n  }\r\n\r\n  getText(data:string) {\r\n    return data.split('\\n').filter(f=>f.length>0);\r\n  }\r\n\r\n  async invokeGPT() {\r\n\r\n    if(this.promptText.length<2)\r\n    return;\r\n\r\n    try{\r\n      this.response =undefined;\r\n      let configuration = new Configuration({apiKey: environment.apiKey});\r\n      let openai = new OpenAIApi(configuration);\r\n\r\n      let requestData={\r\n        model: 'text-davinci-003',//'text-davinci-003',//\"text-curie-001\",\r\n        prompt: this.promptText,//this.generatePrompt(animal),\r\n        temperature: 0.95,\r\n        max_tokens: 150,\r\n        top_p: 1.0,\r\n        frequency_penalty: 0.0,\r\n        presence_penalty: 0.0,\r\n      };\r\n      this.showSpinner = true;\r\n      let apiResponse =  await openai.createCompletion(requestData);\r\n\r\n      this.response = apiResponse.data as ResponseModel;\r\n      this.showSpinner = false;\r\n    }catch(error:any) {\r\n      this.showSpinner = false;\r\n      // Consider adjusting the error handling logic for your use case\r\n      if (error.response) {\r\n        console.error(error.response.status, error.response.data);\r\n        \r\n      } else {\r\n        console.error(`Error with OpenAI API request: ${error.message}`);\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n   generatePrompt(animal:string) {\r\n    const capitalizedAnimal =\r\n      animal[0].toUpperCase() + animal.slice(1).toLowerCase();\r\n    return `Suggest three names for an animal that is a superhero.\r\n  Animal: Cat\r\n  Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline\r\n  Animal: Dog\r\n  Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot\r\n  Animal: ${capitalizedAnimal}\r\n  Names:`;\r\n  }\r\n\r\n  \r\n}\r\n\r\n\r\n//https://beta.openai.com/docs/api-reference/completions/create"]},"metadata":{},"sourceType":"module"}