{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDescriptor = void 0;\n\nconst streamingApiCaller_1 = require(\"./streamingApiCaller\");\n/**\n * A descriptor for streaming calls.\n */\n\n\nclass StreamDescriptor {\n  constructor(streamType, rest) {\n    this.type = streamType;\n    this.streaming = true;\n    this.rest = rest;\n  }\n\n  getApiCaller(settings) {\n    // Right now retrying does not work with gRPC-streaming, because retryable\n    // assumes an API call returns an event emitter while gRPC-streaming methods\n    // return Stream.\n    // TODO: support retrying.\n    settings.retry = null;\n    return new streamingApiCaller_1.StreamingApiCaller(this);\n  }\n\n}\n\nexports.StreamDescriptor = StreamDescriptor;","map":{"version":3,"names":["Object","defineProperty","exports","value","StreamDescriptor","streamingApiCaller_1","require","constructor","streamType","rest","type","streaming","getApiCaller","settings","retry","StreamingApiCaller"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescriptor = void 0;\nconst streamingApiCaller_1 = require(\"./streamingApiCaller\");\n/**\n * A descriptor for streaming calls.\n */\nclass StreamDescriptor {\n    constructor(streamType, rest) {\n        this.type = streamType;\n        this.streaming = true;\n        this.rest = rest;\n    }\n    getApiCaller(settings) {\n        // Right now retrying does not work with gRPC-streaming, because retryable\n        // assumes an API call returns an event emitter while gRPC-streaming methods\n        // return Stream.\n        // TODO: support retrying.\n        settings.retry = null;\n        return new streamingApiCaller_1.StreamingApiCaller(this);\n    }\n}\nexports.StreamDescriptor = StreamDescriptor;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,MAAMC,oBAAoB,GAAGC,OAAO,CAAC,sBAAD,CAApC;AACA;AACA;AACA;;;AACA,MAAMF,gBAAN,CAAuB;EACnBG,WAAW,CAACC,UAAD,EAAaC,IAAb,EAAmB;IAC1B,KAAKC,IAAL,GAAYF,UAAZ;IACA,KAAKG,SAAL,GAAiB,IAAjB;IACA,KAAKF,IAAL,GAAYA,IAAZ;EACH;;EACDG,YAAY,CAACC,QAAD,EAAW;IACnB;IACA;IACA;IACA;IACAA,QAAQ,CAACC,KAAT,GAAiB,IAAjB;IACA,OAAO,IAAIT,oBAAoB,CAACU,kBAAzB,CAA4C,IAA5C,CAAP;EACH;;AAbkB;;AAevBb,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}