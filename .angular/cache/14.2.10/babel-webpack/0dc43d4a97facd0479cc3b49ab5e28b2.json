{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\n\nconst child_process_1 = require(\"child_process\");\n\nconst fs = require(\"fs\");\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst os = require(\"os\");\n\nconst path = require(\"path\");\n\nconst crypto_1 = require(\"../crypto/crypto\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst computeclient_1 = require(\"./computeclient\");\n\nconst idtokenclient_1 = require(\"./idtokenclient\");\n\nconst envDetect_1 = require(\"./envDetect\");\n\nconst jwtclient_1 = require(\"./jwtclient\");\n\nconst refreshclient_1 = require(\"./refreshclient\");\n\nconst impersonated_1 = require(\"./impersonated\");\n\nconst externalclient_1 = require(\"./externalclient\");\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n\nconst externalAccountAuthorizedUserClient_1 = require(\"./externalAccountAuthorizedUserClient\");\n\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nconst GoogleAuthExceptionMessages = {\n  NO_PROJECT_ID_FOUND: 'Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started'\n};\n\nclass GoogleAuth {\n  // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n  get isGCE() {\n    return this.checkIsGCE;\n  }\n  /**\n   * Configuration is resolved in the following order of precedence:\n   * - {@link GoogleAuthOptions.credentials `credentials`}\n   * - {@link GoogleAuthOptions.keyFilename `keyFilename`}\n   * - {@link GoogleAuthOptions.keyFile `keyFile`}\n   *\n   * {@link GoogleAuthOptions.clientOptions `clientOptions`} are passed to the\n   * {@link AuthClient `AuthClient`s}.\n   *\n   * @param opts\n   */\n\n\n  constructor(opts) {\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.cachedCredential = opts.authClient || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  } // GAPIC client libraries should always use self-signed JWTs. The following\n  // variables are set on the JWT client in order to indicate the type of library,\n  // and sign the JWT with the correct audience and scopes (if not supplied).\n\n\n  setGapicJWTValues(client) {\n    client.defaultServicePath = this.defaultServicePath;\n    client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n    client.defaultScopes = this.defaultScopes;\n  }\n\n  getProjectId(callback) {\n    if (callback) {\n      this.getProjectIdAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getProjectIdAsync();\n    }\n  }\n  /**\n   * A temporary method for internal `getProjectId` usages where `null` is\n   * acceptable. In a future major release, `getProjectId` should return `null`\n   * (as the `Promise<string | null>` base signature describes) and this private\n   * method should be removed.\n   *\n   * @returns Promise that resolves with project id (or `null`)\n   */\n\n\n  getProjectIdOptional() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        return yield _this.getProjectId();\n      } catch (e) {\n        if (e instanceof Error && e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    })();\n  }\n  /*\n   * A private method for finding and caching a projectId.\n   *\n   * Supports environments in order of precedence:\n   * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n   * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n   * - Cloud SDK: `gcloud config config-helper --format json`\n   * - GCE project ID from metadata server\n   *\n   * @returns projectId\n   */\n\n\n  findAndCacheProjectId() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let projectId = null;\n      projectId || (projectId = yield _this2.getProductionProjectId());\n      projectId || (projectId = yield _this2.getFileProjectId());\n      projectId || (projectId = yield _this2.getDefaultServiceProjectId());\n      projectId || (projectId = yield _this2.getGCEProjectId());\n      projectId || (projectId = yield _this2.getExternalAccountClientProjectId());\n\n      if (projectId) {\n        _this2._cachedProjectId = projectId;\n        return projectId;\n      } else {\n        throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n      }\n    })();\n  }\n\n  getProjectIdAsync() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3._cachedProjectId) {\n        return _this3._cachedProjectId;\n      }\n\n      if (!_this3._findProjectIdPromise) {\n        _this3._findProjectIdPromise = _this3.findAndCacheProjectId();\n      }\n\n      return _this3._findProjectIdPromise;\n    })();\n  }\n  /**\n   * @returns Any scopes (user-specified or default scopes specified by the\n   *   client library) that need to be set on the current Auth client.\n   */\n\n\n  getAnyScopes() {\n    return this.scopes || this.defaultScopes;\n  }\n\n  getApplicationDefault(optionsOrCallback = {}, callback) {\n    let options;\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n    } else {\n      return this.getApplicationDefaultAsync(options);\n    }\n  }\n\n  getApplicationDefaultAsync(options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // If we've already got a cached credential, return it.\n      // This will also preserve one's configured quota project, in case they\n      // set one directly on the credential previously.\n      if (_this4.cachedCredential) {\n        return yield _this4.prepareAndCacheADC(_this4.cachedCredential);\n      } // Since this is a 'new' ADC to cache we will use the environment variable\n      // if it's available. We prefer this value over the value from ADC.\n\n\n      const quotaProjectIdOverride = process.env['GOOGLE_CLOUD_QUOTA_PROJECT'];\n      let credential; // Check for the existence of a local environment variable pointing to the\n      // location of the credential file. This is typically used in local\n      // developer scenarios.\n\n      credential = yield _this4._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n\n      if (credential) {\n        if (credential instanceof jwtclient_1.JWT) {\n          credential.scopes = _this4.scopes;\n        } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n          credential.scopes = _this4.getAnyScopes();\n        }\n\n        return yield _this4.prepareAndCacheADC(credential, quotaProjectIdOverride);\n      } // Look in the well-known credential file location.\n\n\n      credential = yield _this4._tryGetApplicationCredentialsFromWellKnownFile(options);\n\n      if (credential) {\n        if (credential instanceof jwtclient_1.JWT) {\n          credential.scopes = _this4.scopes;\n        } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n          credential.scopes = _this4.getAnyScopes();\n        }\n\n        return yield _this4.prepareAndCacheADC(credential, quotaProjectIdOverride);\n      } // Determine if we're running on GCE.\n\n\n      let isGCE;\n\n      try {\n        isGCE = yield _this4._checkIsGCE();\n      } catch (e) {\n        if (e instanceof Error) {\n          e.message = `Unexpected error determining execution environment: ${e.message}`;\n        }\n\n        throw e;\n      }\n\n      if (!isGCE) {\n        // We failed to find the default credentials. Bail out with an error.\n        throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n      } // For GCE, just return a default ComputeClient. It will take care of\n      // the rest.\n\n\n      options.scopes = _this4.getAnyScopes();\n      return yield _this4.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);\n    })();\n  }\n\n  prepareAndCacheADC(credential, quotaProjectIdOverride) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const projectId = yield _this5.getProjectIdOptional();\n\n      if (quotaProjectIdOverride) {\n        credential.quotaProjectId = quotaProjectIdOverride;\n      }\n\n      _this5.cachedCredential = credential;\n      return {\n        credential,\n        projectId\n      };\n    })();\n  }\n  /**\n   * Determines whether the auth layer is running on Google Compute Engine.\n   * Checks for GCP Residency, then fallback to checking if metadata server\n   * is available.\n   *\n   * @returns A promise that resolves with the boolean.\n   * @api private\n   */\n\n\n  _checkIsGCE() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this6.checkIsGCE === undefined) {\n        _this6.checkIsGCE = gcpMetadata.getGCPResidency() || (yield gcpMetadata.isAvailable());\n      }\n\n      return _this6.checkIsGCE;\n    })();\n  }\n  /**\n   * Attempts to load default credentials from the environment variable path..\n   * @returns Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n\n      if (!credentialsPath || credentialsPath.length === 0) {\n        return null;\n      }\n\n      try {\n        return _this7._getApplicationCredentialsFromFilePath(credentialsPath, options);\n      } catch (e) {\n        if (e instanceof Error) {\n          e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n        }\n\n        throw e;\n      }\n    })();\n  }\n  /**\n   * Attempts to load default credentials from a well-known file location\n   * @return Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n\n\n  _tryGetApplicationCredentialsFromWellKnownFile(options) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      // First, figure out the location of the file, depending upon the OS type.\n      let location = null;\n\n      if (_this8._isWindows()) {\n        // Windows\n        location = process.env['APPDATA'];\n      } else {\n        // Linux or Mac\n        const home = process.env['HOME'];\n\n        if (home) {\n          location = path.join(home, '.config');\n        }\n      } // If we found the root path, expand it.\n\n\n      if (location) {\n        location = path.join(location, 'gcloud', 'application_default_credentials.json');\n\n        if (!fs.existsSync(location)) {\n          location = null;\n        }\n      } // The file does not exist.\n\n\n      if (!location) {\n        return null;\n      } // The file seems to exist. Try to use it.\n\n\n      const client = yield _this8._getApplicationCredentialsFromFilePath(location, options);\n      return client;\n    })();\n  }\n  /**\n   * Attempts to load default credentials from a file at the given path..\n   * @param filePath The path to the file to read.\n   * @returns Promise that resolves with the OAuth2Client\n   * @api private\n   */\n\n\n  _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      // Make sure the path looks like a string.\n      if (!filePath || filePath.length === 0) {\n        throw new Error('The file path is invalid.');\n      } // Make sure there is a file at the path. lstatSync will throw if there is\n      // nothing there.\n\n\n      try {\n        // Resolve path to actual file in case of symlink. Expect a thrown error\n        // if not resolvable.\n        filePath = fs.realpathSync(filePath);\n\n        if (!fs.lstatSync(filePath).isFile()) {\n          throw new Error();\n        }\n      } catch (err) {\n        if (err instanceof Error) {\n          err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n        }\n\n        throw err;\n      } // Now open a read stream on the file, and parse it.\n\n\n      const readStream = fs.createReadStream(filePath);\n      return _this9.fromStream(readStream, options);\n    })();\n  }\n  /**\n   * Create a credentials instance using a given impersonated input options.\n   * @param json The impersonated input object.\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  fromImpersonatedJSON(json) {\n    var _a, _b, _c, _d, _e;\n\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing an  impersonated refresh token');\n    }\n\n    if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n      throw new Error(`The incoming JSON object does not have the \"${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}\" type`);\n    }\n\n    if (!json.source_credentials) {\n      throw new Error('The incoming JSON object does not contain a source_credentials field');\n    }\n\n    if (!json.service_account_impersonation_url) {\n      throw new Error('The incoming JSON object does not contain a service_account_impersonation_url field');\n    } // Create source client for impersonation\n\n\n    const sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);\n\n    if (((_a = json.service_account_impersonation_url) === null || _a === void 0 ? void 0 : _a.length) > 256) {\n      /**\n       * Prevents DOS attacks.\n       * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/85}\n       **/\n      throw new RangeError(`Target principal is too long: ${json.service_account_impersonation_url}`);\n    } // Extreact service account from service_account_impersonation_url\n\n\n    const targetPrincipal = (_c = (_b = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _b === void 0 ? void 0 : _b.groups) === null || _c === void 0 ? void 0 : _c.target;\n\n    if (!targetPrincipal) {\n      throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);\n    }\n\n    const targetScopes = (_d = this.getAnyScopes()) !== null && _d !== void 0 ? _d : [];\n    const client = new impersonated_1.Impersonated({\n      delegates: (_e = json.delegates) !== null && _e !== void 0 ? _e : [],\n      sourceClient: sourceClient,\n      targetPrincipal: targetPrincipal,\n      targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes]\n    });\n    return client;\n  }\n  /**\n   * Create a credentials instance using the given input options.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  fromJSON(json, options = {}) {\n    let client;\n\n    if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {\n      client = new refreshclient_1.UserRefreshClient(options);\n      client.fromJSON(json);\n    } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n      client = this.fromImpersonatedJSON(json);\n    } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n      client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n      client.scopes = this.getAnyScopes();\n    } else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {\n      client = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient(json, options);\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n      this.setGapicJWTValues(client);\n      client.fromJSON(json);\n    }\n\n    return client;\n  }\n  /**\n   * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n   * object used to instantiate and the client.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n\n\n  _cacheClientFromJSON(json, options) {\n    const client = this.fromJSON(json, options); // cache both raw data used to instantiate client and client itself.\n\n    this.jsonContent = json;\n    this.cachedCredential = client;\n    return client;\n  }\n\n  fromStream(inputStream, optionsOrCallback = {}, callback) {\n    let options = {};\n\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n\n    if (callback) {\n      this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n    } else {\n      return this.fromStreamAsync(inputStream, options);\n    }\n  }\n\n  fromStreamAsync(inputStream, options) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the Google auth settings.');\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          try {\n            const data = JSON.parse(s);\n\n            const r = this._cacheClientFromJSON(data, options);\n\n            return resolve(r);\n          } catch (err) {\n            // If we failed parsing this.keyFileName, assume that it\n            // is a PEM or p12 certificate:\n            if (!this.keyFilename) throw err;\n            const client = new jwtclient_1.JWT({ ...this.clientOptions,\n              keyFile: this.keyFilename\n            });\n            this.cachedCredential = client;\n            this.setGapicJWTValues(client);\n            return resolve(client);\n          }\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n  /**\n   * Create a credentials instance using the given API key string.\n   * @param apiKey The API key string\n   * @param options An optional options object.\n   * @returns A JWT loaded from the key\n   */\n\n\n  fromAPIKey(apiKey, options) {\n    options = options || {};\n    const client = new jwtclient_1.JWT(options);\n    client.fromAPIKey(apiKey);\n    return client;\n  }\n  /**\n   * Determines whether the current operating system is Windows.\n   * @api private\n   */\n\n\n  _isWindows() {\n    const sys = os.platform();\n\n    if (sys && sys.length >= 3) {\n      if (sys.substring(0, 3).toLowerCase() === 'win') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Run the Google Cloud SDK command that prints the default project ID\n   */\n\n\n  getDefaultServiceProjectId() {\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        (0, child_process_1.exec)('gcloud config config-helper --format json', (err, stdout) => {\n          if (!err && stdout) {\n            try {\n              const projectId = JSON.parse(stdout).configuration.properties.core.project;\n              resolve(projectId);\n              return;\n            } catch (e) {// ignore errors\n            }\n          }\n\n          resolve(null);\n        });\n      });\n    })();\n  }\n  /**\n   * Loads the project id from environment variables.\n   * @api private\n   */\n\n\n  getProductionProjectId() {\n    return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n  }\n  /**\n   * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n   * @api private\n   */\n\n\n  getFileProjectId() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this10.cachedCredential) {\n        // Try to read the project ID from the cached credentials file\n        return _this10.cachedCredential.projectId;\n      } // Ensure the projectId is loaded from the keyFile if available.\n\n\n      if (_this10.keyFilename) {\n        const creds = yield _this10.getClient();\n\n        if (creds && creds.projectId) {\n          return creds.projectId;\n        }\n      } // Try to load a credentials file and read its project ID\n\n\n      const r = yield _this10._tryGetApplicationCredentialsFromEnvironmentVariable();\n\n      if (r) {\n        return r.projectId;\n      } else {\n        return null;\n      }\n    })();\n  }\n  /**\n   * Gets the project ID from external account client if available.\n   */\n\n\n  getExternalAccountClientProjectId() {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this11.jsonContent || _this11.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n        return null;\n      }\n\n      const creds = yield _this11.getClient(); // Do not suppress the underlying error, as the error could contain helpful\n      // information for debugging and fixing. This is especially true for\n      // external account creds as in order to get the project ID, the following\n      // operations have to succeed:\n      // 1. Valid credentials file should be supplied.\n      // 2. Ability to retrieve access tokens from STS token exchange API.\n      // 3. Ability to exchange for service account impersonated credentials (if\n      //    enabled).\n      // 4. Ability to get project info using the access token from step 2 or 3.\n      // Without surfacing the error, it is harder for developers to determine\n      // which step went wrong.\n\n      return yield creds.getProjectId();\n    })();\n  }\n  /**\n   * Gets the Compute Engine project ID if it can be inferred.\n   */\n\n\n  getGCEProjectId() {\n    return _asyncToGenerator(function* () {\n      try {\n        const r = yield gcpMetadata.project('project-id');\n        return r;\n      } catch (e) {\n        // Ignore any errors\n        return null;\n      }\n    })();\n  }\n\n  getCredentials(callback) {\n    if (callback) {\n      this.getCredentialsAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getCredentialsAsync();\n    }\n  }\n\n  getCredentialsAsync() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      const client = yield _this12.getClient();\n\n      if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {\n        const serviceAccountEmail = client.getServiceAccountEmail();\n\n        if (serviceAccountEmail) {\n          return {\n            client_email: serviceAccountEmail\n          };\n        }\n      }\n\n      if (_this12.jsonContent) {\n        const credential = {\n          client_email: _this12.jsonContent.client_email,\n          private_key: _this12.jsonContent.private_key\n        };\n        return credential;\n      }\n\n      const isGCE = yield _this12._checkIsGCE();\n\n      if (!isGCE) {\n        throw new Error('Unknown error.');\n      } // For GCE, return the service account details from the metadata server\n      // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n      // The GCF metadata server doesn't respect querystring params if this / is\n      // not included.\n\n\n      const data = yield gcpMetadata.instance({\n        property: 'service-accounts/',\n        params: {\n          recursive: 'true'\n        }\n      });\n\n      if (!data || !data.default || !data.default.email) {\n        throw new Error('Failure from metadata server.');\n      }\n\n      return {\n        client_email: data.default.email\n      };\n    })();\n  }\n  /**\n   * Automatically obtain an {@link AuthClient `AuthClient`} based on the\n   * provided configuration. If no options were passed, use Application\n   * Default Credentials.\n   */\n\n\n  getClient() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this13.cachedCredential) {\n        if (_this13.jsonContent) {\n          _this13._cacheClientFromJSON(_this13.jsonContent, _this13.clientOptions);\n        } else if (_this13.keyFilename) {\n          const filePath = path.resolve(_this13.keyFilename);\n          const stream = fs.createReadStream(filePath);\n          yield _this13.fromStreamAsync(stream, _this13.clientOptions);\n        } else {\n          yield _this13.getApplicationDefaultAsync(_this13.clientOptions);\n        }\n      }\n\n      return _this13.cachedCredential;\n    })();\n  }\n  /**\n   * Creates a client which will fetch an ID token for authorization.\n   * @param targetAudience the audience for the fetched ID token.\n   * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n   */\n\n\n  getIdTokenClient(targetAudience) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      const client = yield _this14.getClient();\n\n      if (!('fetchIdToken' in client)) {\n        throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n      }\n\n      return new idtokenclient_1.IdTokenClient({\n        targetAudience,\n        idTokenProvider: client\n      });\n    })();\n  }\n  /**\n   * Automatically obtain application default credentials, and return\n   * an access token for making requests.\n   */\n\n\n  getAccessToken() {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      const client = yield _this15.getClient();\n      return (yield client.getAccessToken()).token;\n    })();\n  }\n  /**\n   * Obtain the HTTP headers that will provide authorization for a given\n   * request.\n   */\n\n\n  getRequestHeaders(url) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      const client = yield _this16.getClient();\n      return client.getRequestHeaders(url);\n    })();\n  }\n  /**\n   * Obtain credentials for a request, then attach the appropriate headers to\n   * the request options.\n   * @param opts Axios or Request options on which to attach the headers\n   */\n\n\n  authorizeRequest(opts) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      opts = opts || {};\n      const url = opts.url || opts.uri;\n      const client = yield _this17.getClient();\n      const headers = yield client.getRequestHeaders(url);\n      opts.headers = Object.assign(opts.headers || {}, headers);\n      return opts;\n    })();\n  }\n  /**\n   * Automatically obtain application default credentials, and make an\n   * HTTP request using the given options.\n   * @param opts Axios request options for the HTTP request.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  request(opts) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      const client = yield _this18.getClient();\n      return client.request(opts);\n    })();\n  }\n  /**\n   * Determine the compute environment in which the code is running.\n   */\n\n\n  getEnv() {\n    return (0, envDetect_1.getEnv)();\n  }\n  /**\n   * Sign the given data with the current private key, or go out\n   * to the IAM API to sign it.\n   * @param data The data to be signed.\n   */\n\n\n  sign(data) {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      const client = yield _this19.getClient();\n      const crypto = (0, crypto_1.createCrypto)();\n\n      if (client instanceof jwtclient_1.JWT && client.key) {\n        const sign = yield crypto.sign(client.key, data);\n        return sign;\n      }\n\n      const creds = yield _this19.getCredentials();\n\n      if (!creds.client_email) {\n        throw new Error('Cannot sign data without `client_email`.');\n      }\n\n      return _this19.signBlob(crypto, creds.client_email, data);\n    })();\n  }\n\n  signBlob(crypto, emailOrUniqueId, data) {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' + `${emailOrUniqueId}:signBlob`;\n      const res = yield _this20.request({\n        method: 'POST',\n        url,\n        data: {\n          payload: crypto.encodeBase64StringUtf8(data)\n        }\n      });\n      return res.data.signedBlob;\n    })();\n  }\n\n}\n\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\n\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":{"version":3,"names":["Object","defineProperty","exports","value","GoogleAuth","CLOUD_SDK_CLIENT_ID","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","transporters_1","computeclient_1","idtokenclient_1","envDetect_1","jwtclient_1","refreshclient_1","impersonated_1","externalclient_1","baseexternalclient_1","externalAccountAuthorizedUserClient_1","GoogleAuthExceptionMessages","NO_PROJECT_ID_FOUND","isGCE","checkIsGCE","constructor","opts","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","authClient","keyFilename","keyFile","scopes","credentials","clientOptions","setGapicJWTValues","client","defaultServicePath","useJWTAccessWithScope","defaultScopes","getProjectId","callback","getProjectIdAsync","then","r","getProjectIdOptional","e","Error","message","findAndCacheProjectId","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","getExternalAccountClientProjectId","_findProjectIdPromise","getAnyScopes","getApplicationDefault","optionsOrCallback","options","getApplicationDefaultAsync","credential","prepareAndCacheADC","quotaProjectIdOverride","process","env","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","BaseExternalAccountClient","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","Compute","quotaProjectId","getGCPResidency","isAvailable","credentialsPath","length","_getApplicationCredentialsFromFilePath","location","_isWindows","home","join","existsSync","filePath","realpathSync","lstatSync","isFile","err","readStream","createReadStream","fromStream","fromImpersonatedJSON","json","_a","_b","_c","_d","_e","type","IMPERSONATED_ACCOUNT_TYPE","source_credentials","service_account_impersonation_url","sourceClient","UserRefreshClient","client_id","client_secret","refresh_token","RangeError","targetPrincipal","exec","groups","target","targetScopes","Impersonated","delegates","Array","isArray","fromJSON","USER_REFRESH_ACCOUNT_TYPE","EXTERNAL_ACCOUNT_TYPE","ExternalAccountClient","EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE","ExternalAccountAuthorizedUserClient","_cacheClientFromJSON","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","apiKey","sys","platform","substring","toLowerCase","stdout","configuration","properties","core","project","creds","getClient","getCredentials","getCredentialsAsync","serviceAccountEmail","getServiceAccountEmail","client_email","private_key","instance","property","params","recursive","default","email","stream","getIdTokenClient","targetAudience","IdTokenClient","idTokenProvider","getAccessToken","token","getRequestHeaders","url","authorizeRequest","uri","headers","assign","request","getEnv","sign","crypto","createCrypto","key","signBlob","emailOrUniqueId","res","method","payload","encodeBase64StringUtf8","signedBlob","DefaultTransporter"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-auth-library/build/src/auth/googleauth.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst idtokenclient_1 = require(\"./idtokenclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nconst impersonated_1 = require(\"./impersonated\");\nconst externalclient_1 = require(\"./externalclient\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst externalAccountAuthorizedUserClient_1 = require(\"./externalAccountAuthorizedUserClient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nconst GoogleAuthExceptionMessages = {\n    NO_PROJECT_ID_FOUND: 'Unable to detect a Project Id in the current environment. \\n' +\n        'To learn more about authentication and Google APIs, visit: \\n' +\n        'https://cloud.google.com/docs/authentication/getting-started',\n};\nclass GoogleAuth {\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    /**\n     * Configuration is resolved in the following order of precedence:\n     * - {@link GoogleAuthOptions.credentials `credentials`}\n     * - {@link GoogleAuthOptions.keyFilename `keyFilename`}\n     * - {@link GoogleAuthOptions.keyFile `keyFile`}\n     *\n     * {@link GoogleAuthOptions.clientOptions `clientOptions`} are passed to the\n     * {@link AuthClient `AuthClient`s}.\n     *\n     * @param opts\n     */\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.cachedCredential = opts.authClient || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    setGapicJWTValues(client) {\n        client.defaultServicePath = this.defaultServicePath;\n        client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n        client.defaultScopes = this.defaultScopes;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    /**\n     * A temporary method for internal `getProjectId` usages where `null` is\n     * acceptable. In a future major release, `getProjectId` should return `null`\n     * (as the `Promise<string | null>` base signature describes) and this private\n     * method should be removed.\n     *\n     * @returns Promise that resolves with project id (or `null`)\n     */\n    async getProjectIdOptional() {\n        try {\n            return await this.getProjectId();\n        }\n        catch (e) {\n            if (e instanceof Error &&\n                e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {\n                return null;\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /*\n     * A private method for finding and caching a projectId.\n     *\n     * Supports environments in order of precedence:\n     * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n     * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n     * - Cloud SDK: `gcloud config config-helper --format json`\n     * - GCE project ID from metadata server\n     *\n     * @returns projectId\n     */\n    async findAndCacheProjectId() {\n        let projectId = null;\n        projectId || (projectId = await this.getProductionProjectId());\n        projectId || (projectId = await this.getFileProjectId());\n        projectId || (projectId = await this.getDefaultServiceProjectId());\n        projectId || (projectId = await this.getGCEProjectId());\n        projectId || (projectId = await this.getExternalAccountClientProjectId());\n        if (projectId) {\n            this._cachedProjectId = projectId;\n            return projectId;\n        }\n        else {\n            throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n        }\n    }\n    async getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return this._cachedProjectId;\n        }\n        if (!this._findProjectIdPromise) {\n            this._findProjectIdPromise = this.findAndCacheProjectId();\n        }\n        return this._findProjectIdPromise;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n    getAnyScopes() {\n        return this.scopes || this.defaultScopes;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, return it.\n        // This will also preserve one's configured quota project, in case they\n        // set one directly on the credential previously.\n        if (this.cachedCredential) {\n            return await this.prepareAndCacheADC(this.cachedCredential);\n        }\n        // Since this is a 'new' ADC to cache we will use the environment variable\n        // if it's available. We prefer this value over the value from ADC.\n        const quotaProjectIdOverride = process.env['GOOGLE_CLOUD_QUOTA_PROJECT'];\n        let credential;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential =\n            await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n        }\n        // Look in the well-known credential file location.\n        credential =\n            await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            }\n            else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n        }\n        // Determine if we're running on GCE.\n        let isGCE;\n        try {\n            isGCE = await this._checkIsGCE();\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Unexpected error determining execution environment: ${e.message}`;\n            }\n            throw e;\n        }\n        if (!isGCE) {\n            // We failed to find the default credentials. Bail out with an error.\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n        }\n        // For GCE, just return a default ComputeClient. It will take care of\n        // the rest.\n        options.scopes = this.getAnyScopes();\n        return await this.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);\n    }\n    async prepareAndCacheADC(credential, quotaProjectIdOverride) {\n        const projectId = await this.getProjectIdOptional();\n        if (quotaProjectIdOverride) {\n            credential.quotaProjectId = quotaProjectIdOverride;\n        }\n        this.cachedCredential = credential;\n        return { credential, projectId };\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * Checks for GCP Residency, then fallback to checking if metadata server\n     * is available.\n     *\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE =\n                gcpMetadata.getGCPResidency() || (await gcpMetadata.isAvailable());\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n            process.env['google_application_credentials'];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env['APPDATA'];\n        }\n        else {\n            // Linux or Mac\n            const home = process.env['HOME'];\n            if (home) {\n                location = path.join(home, '.config');\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error('The file path is invalid.');\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using a given impersonated input options.\n     * @param json The impersonated input object.\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromImpersonatedJSON(json) {\n        var _a, _b, _c, _d, _e;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing an  impersonated refresh token');\n        }\n        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            throw new Error(`The incoming JSON object does not have the \"${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}\" type`);\n        }\n        if (!json.source_credentials) {\n            throw new Error('The incoming JSON object does not contain a source_credentials field');\n        }\n        if (!json.service_account_impersonation_url) {\n            throw new Error('The incoming JSON object does not contain a service_account_impersonation_url field');\n        }\n        // Create source client for impersonation\n        const sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);\n        if (((_a = json.service_account_impersonation_url) === null || _a === void 0 ? void 0 : _a.length) > 256) {\n            /**\n             * Prevents DOS attacks.\n             * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/85}\n             **/\n            throw new RangeError(`Target principal is too long: ${json.service_account_impersonation_url}`);\n        }\n        // Extreact service account from service_account_impersonation_url\n        const targetPrincipal = (_c = (_b = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _b === void 0 ? void 0 : _b.groups) === null || _c === void 0 ? void 0 : _c.target;\n        if (!targetPrincipal) {\n            throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);\n        }\n        const targetScopes = (_d = this.getAnyScopes()) !== null && _d !== void 0 ? _d : [];\n        const client = new impersonated_1.Impersonated({\n            delegates: (_e = json.delegates) !== null && _e !== void 0 ? _e : [],\n            sourceClient: sourceClient,\n            targetPrincipal: targetPrincipal,\n            targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes],\n        });\n        return client;\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options = {}) {\n        let client;\n        if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        }\n        else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            client = this.fromImpersonatedJSON(json);\n        }\n        else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        }\n        else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {\n            client = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient(json, options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    _cacheClientFromJSON(json, options) {\n        const client = this.fromJSON(json, options);\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return client;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    try {\n                        const data = JSON.parse(s);\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    }\n                    catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename)\n                            throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename,\n                        });\n                        this.cachedCredential = client;\n                        this.setGapicJWTValues(client);\n                        return resolve(client);\n                    }\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    async getDefaultServiceProjectId() {\n        return new Promise(resolve => {\n            (0, child_process_1.exec)('gcloud config config-helper --format json', (err, stdout) => {\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                    }\n                    catch (e) {\n                        // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return (process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\n            process.env['gcloud_project'] ||\n            process.env['google_cloud_project']);\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Gets the project ID from external account client if available.\n     */\n    async getExternalAccountClientProjectId() {\n        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            return null;\n        }\n        const creds = await this.getClient();\n        // Do not suppress the underlying error, as the error could contain helpful\n        // information for debugging and fixing. This is especially true for\n        // external account creds as in order to get the project ID, the following\n        // operations have to succeed:\n        // 1. Valid credentials file should be supplied.\n        // 2. Ability to retrieve access tokens from STS token exchange API.\n        // 3. Ability to exchange for service account impersonated credentials (if\n        //    enabled).\n        // 4. Ability to get project info using the access token from step 2 or 3.\n        // Without surfacing the error, it is harder for developers to determine\n        // which step went wrong.\n        return await creds.getProjectId();\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project('project-id');\n            return r;\n        }\n        catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        const client = await this.getClient();\n        if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {\n            const serviceAccountEmail = client.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                return { client_email: serviceAccountEmail };\n            }\n        }\n        if (this.jsonContent) {\n            const credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n            };\n            return credential;\n        }\n        const isGCE = await this._checkIsGCE();\n        if (!isGCE) {\n            throw new Error('Unknown error.');\n        }\n        // For GCE, return the service account details from the metadata server\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n        // The GCF metadata server doesn't respect querystring params if this / is\n        // not included.\n        const data = await gcpMetadata.instance({\n            property: 'service-accounts/',\n            params: { recursive: 'true' },\n        });\n        if (!data || !data.default || !data.default.email) {\n            throw new Error('Failure from metadata server.');\n        }\n        return { client_email: data.default.email };\n    }\n    /**\n     * Automatically obtain an {@link AuthClient `AuthClient`} based on the\n     * provided configuration. If no options were passed, use Application\n     * Default Credentials.\n     */\n    async getClient() {\n        if (!this.cachedCredential) {\n            if (this.jsonContent) {\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n            }\n            else if (this.keyFilename) {\n                const filePath = path.resolve(this.keyFilename);\n                const stream = fs.createReadStream(filePath);\n                await this.fromStreamAsync(stream, this.clientOptions);\n            }\n            else {\n                await this.getApplicationDefaultAsync(this.clientOptions);\n            }\n        }\n        return this.cachedCredential;\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n    async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!('fetchIdToken' in client)) {\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n        }\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return (0, envDetect_1.getEnv)();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    async sign(data) {\n        const client = await this.getClient();\n        const crypto = (0, crypto_1.createCrypto)();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error('Cannot sign data without `client_email`.');\n        }\n        return this.signBlob(crypto, creds.client_email, data);\n    }\n    async signBlob(crypto, emailOrUniqueId, data) {\n        const url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' +\n            `${emailOrUniqueId}:signBlob`;\n        const res = await this.request({\n            method: 'POST',\n            url,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data),\n            },\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}