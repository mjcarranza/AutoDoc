{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeResponse = exports.encodeRequest = void 0; // proto-over-HTTP request encoding and decoding\n\nconst serializer = require(\"proto3-json-serializer\");\n\nconst fallback_1 = require(\"./fallback\");\n\nconst googleError_1 = require(\"./googleError\");\n\nconst transcoding_1 = require(\"./transcoding\");\n\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const message = rpc.resolvedRequestType.fromObject(request);\n  const json = serializer.toProto3JSON(message, {\n    numericEnums\n  });\n\n  if (!json) {\n    throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n  }\n\n  if (typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n  }\n\n  const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n\n  if (!transcoded) {\n    throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n  } // If numeric enums feature is requested, add extra parameter to the query string\n\n\n  if (numericEnums) {\n    transcoded.queryString = (transcoded.queryString ? `${transcoded.queryString}&` : '') + '$alt=json%3Benum-encoding=int';\n  } // Converts httpMethod to method that permitted in standard Fetch API spec\n  // https://fetch.spec.whatwg.org/#methods\n\n\n  const method = transcoded.httpMethod.toUpperCase();\n  const body = JSON.stringify(transcoded.data);\n  const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n  return {\n    method,\n    url,\n    headers,\n    body\n  };\n}\n\nexports.encodeRequest = encodeRequest;\n\nfunction decodeResponse(rpc, ok, response) {\n  // eslint-disable-next-line node/no-unsupported-features/node-builtins\n  const decodedString = new TextDecoder().decode(response);\n  const json = JSON.parse(decodedString);\n\n  if (!ok) {\n    const error = googleError_1.GoogleError.parseHttpError(json);\n    throw error;\n  }\n\n  const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n\n  if (!message) {\n    throw new Error(`Received null response from RPC ${rpc.name}`);\n  }\n\n  return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\n\nexports.decodeResponse = decodeResponse;","map":{"version":3,"names":["Object","defineProperty","exports","value","decodeResponse","encodeRequest","serializer","require","fallback_1","googleError_1","transcoding_1","rpc","protocol","servicePath","servicePort","request","numericEnums","headers","message","resolvedRequestType","fromObject","json","toProto3JSON","Error","name","Array","isArray","transcoded","transcode","parsedOptions","JSON","stringify","queryString","method","httpMethod","toUpperCase","body","data","url","replace","ok","response","decodedString","TextDecoder","decode","parse","error","GoogleError","parseHttpError","fromProto3JSON","resolvedResponseType","toObject","defaultToObjectOptions"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/fallbackRest.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeResponse = exports.encodeRequest = void 0;\n// proto-over-HTTP request encoding and decoding\nconst serializer = require(\"proto3-json-serializer\");\nconst fallback_1 = require(\"./fallback\");\nconst googleError_1 = require(\"./googleError\");\nconst transcoding_1 = require(\"./transcoding\");\nfunction encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {\n    const headers = {\n        'Content-Type': 'application/json',\n    };\n    const message = rpc.resolvedRequestType.fromObject(request);\n    const json = serializer.toProto3JSON(message, {\n        numericEnums,\n    });\n    if (!json) {\n        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);\n    }\n    if (typeof json !== 'object' || Array.isArray(json)) {\n        throw new Error(`Request to RPC ${rpc.name} must be an object.`);\n    }\n    const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);\n    if (!transcoded) {\n        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);\n    }\n    // If numeric enums feature is requested, add extra parameter to the query string\n    if (numericEnums) {\n        transcoded.queryString =\n            (transcoded.queryString ? `${transcoded.queryString}&` : '') +\n                '$alt=json%3Benum-encoding=int';\n    }\n    // Converts httpMethod to method that permitted in standard Fetch API spec\n    // https://fetch.spec.whatwg.org/#methods\n    const method = transcoded.httpMethod.toUpperCase();\n    const body = JSON.stringify(transcoded.data);\n    const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n    return {\n        method,\n        url,\n        headers,\n        body,\n    };\n}\nexports.encodeRequest = encodeRequest;\nfunction decodeResponse(rpc, ok, response) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const decodedString = new TextDecoder().decode(response);\n    const json = JSON.parse(decodedString);\n    if (!ok) {\n        const error = googleError_1.GoogleError.parseHttpError(json);\n        throw error;\n    }\n    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);\n    if (!message) {\n        throw new Error(`Received null response from RPC ${rpc.name}`);\n    }\n    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);\n}\nexports.decodeResponse = decodeResponse;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}