{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveEnumValueToNumber = exports.resolveEnumValueToString = void 0;\n\nfunction resolveEnumValueToString(enumType, enumValue) {\n  // for unknown enum values, do not fail and try to do the best we could.\n  // protobuf.js fromObject() will likely ignore unknown values, but at least\n  // we won't fail.\n  if (typeof enumValue === 'number') {\n    const value = enumType.valuesById[enumValue];\n\n    if (typeof value === 'undefined') {\n      // unknown value, cannot convert to string, returning number as is\n      return enumValue;\n    }\n\n    return value;\n  }\n\n  if (typeof enumValue === 'string') {\n    // for strings, just accept what we got\n    return enumValue;\n  }\n\n  throw new Error('resolveEnumValueToString: enum value must be a string or a number');\n}\n\nexports.resolveEnumValueToString = resolveEnumValueToString;\n\nfunction resolveEnumValueToNumber(enumType, enumValue) {\n  if (typeof enumValue === 'number') {\n    // return as is\n    return enumValue;\n  }\n\n  if (typeof enumValue === 'string') {\n    const num = enumType.values[enumValue];\n\n    if (typeof num === 'undefined') {\n      // unknown value, cannot convert to number, returning string as is\n      return enumValue;\n    }\n\n    return num;\n  }\n\n  throw new Error('resolveEnumValueToNumber: enum value must be a string or a number');\n}\n\nexports.resolveEnumValueToNumber = resolveEnumValueToNumber;","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveEnumValueToNumber","resolveEnumValueToString","enumType","enumValue","valuesById","Error","num","values"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/proto3-json-serializer/build/src/enum.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveEnumValueToNumber = exports.resolveEnumValueToString = void 0;\nfunction resolveEnumValueToString(enumType, enumValue) {\n    // for unknown enum values, do not fail and try to do the best we could.\n    // protobuf.js fromObject() will likely ignore unknown values, but at least\n    // we won't fail.\n    if (typeof enumValue === 'number') {\n        const value = enumType.valuesById[enumValue];\n        if (typeof value === 'undefined') {\n            // unknown value, cannot convert to string, returning number as is\n            return enumValue;\n        }\n        return value;\n    }\n    if (typeof enumValue === 'string') {\n        // for strings, just accept what we got\n        return enumValue;\n    }\n    throw new Error('resolveEnumValueToString: enum value must be a string or a number');\n}\nexports.resolveEnumValueToString = resolveEnumValueToString;\nfunction resolveEnumValueToNumber(enumType, enumValue) {\n    if (typeof enumValue === 'number') {\n        // return as is\n        return enumValue;\n    }\n    if (typeof enumValue === 'string') {\n        const num = enumType.values[enumValue];\n        if (typeof num === 'undefined') {\n            // unknown value, cannot convert to number, returning string as is\n            return enumValue;\n        }\n        return num;\n    }\n    throw new Error('resolveEnumValueToNumber: enum value must be a string or a number');\n}\nexports.resolveEnumValueToNumber = resolveEnumValueToNumber;\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmCF,OAAO,CAACG,wBAAR,GAAmC,KAAK,CAA3E;;AACA,SAASA,wBAAT,CAAkCC,QAAlC,EAA4CC,SAA5C,EAAuD;EACnD;EACA;EACA;EACA,IAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;IAC/B,MAAMJ,KAAK,GAAGG,QAAQ,CAACE,UAAT,CAAoBD,SAApB,CAAd;;IACA,IAAI,OAAOJ,KAAP,KAAiB,WAArB,EAAkC;MAC9B;MACA,OAAOI,SAAP;IACH;;IACD,OAAOJ,KAAP;EACH;;EACD,IAAI,OAAOI,SAAP,KAAqB,QAAzB,EAAmC;IAC/B;IACA,OAAOA,SAAP;EACH;;EACD,MAAM,IAAIE,KAAJ,CAAU,mEAAV,CAAN;AACH;;AACDP,OAAO,CAACG,wBAAR,GAAmCA,wBAAnC;;AACA,SAASD,wBAAT,CAAkCE,QAAlC,EAA4CC,SAA5C,EAAuD;EACnD,IAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;IAC/B;IACA,OAAOA,SAAP;EACH;;EACD,IAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;IAC/B,MAAMG,GAAG,GAAGJ,QAAQ,CAACK,MAAT,CAAgBJ,SAAhB,CAAZ;;IACA,IAAI,OAAOG,GAAP,KAAe,WAAnB,EAAgC;MAC5B;MACA,OAAOH,SAAP;IACH;;IACD,OAAOG,GAAP;EACH;;EACD,MAAM,IAAID,KAAJ,CAAU,mEAAV,CAAN;AACH;;AACDP,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC"},"metadata":{},"sourceType":"script"}