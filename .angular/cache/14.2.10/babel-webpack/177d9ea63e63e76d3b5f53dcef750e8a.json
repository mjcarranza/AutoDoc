{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\n\nconst gtoken_1 = require(\"gtoken\");\n\nconst jwtaccess_1 = require(\"./jwtaccess\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super(opts);\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims; // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n\n\n  createScoped(scopes) {\n    const jwt = new JWT(this);\n    jwt.scopes = scopes;\n    return jwt;\n  }\n  /**\n   * Obtains the metadata to be sent with the request.\n   *\n   * @param url the URI being authorized.\n   */\n\n\n  getRequestMetadataAsync(url) {\n    var _superprop_getGetRequestMetadataAsync = () => super.getRequestMetadataAsync,\n        _this = this;\n\n    return _asyncToGenerator(function* () {\n      url = _this.defaultServicePath ? `https://${_this.defaultServicePath}/` : url;\n\n      const useSelfSignedJWT = !_this.hasUserScopes() && url || _this.useJWTAccessWithScope && _this.hasAnyScopes();\n\n      if (!_this.apiKey && useSelfSignedJWT) {\n        if (_this.additionalClaims && _this.additionalClaims.target_audience) {\n          const {\n            tokens\n          } = yield _this.refreshToken();\n          return {\n            headers: _this.addSharedMetadataHeaders({\n              Authorization: `Bearer ${tokens.id_token}`\n            })\n          };\n        } else {\n          // no scopes have been set, but a uri has been provided. Use JWTAccess\n          // credentials.\n          if (!_this.access) {\n            _this.access = new jwtaccess_1.JWTAccess(_this.email, _this.key, _this.keyId, _this.eagerRefreshThresholdMillis);\n          }\n\n          let scopes;\n\n          if (_this.hasUserScopes()) {\n            scopes = _this.scopes;\n          } else if (!url) {\n            scopes = _this.defaultScopes;\n          }\n\n          const headers = yield _this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, _this.additionalClaims, // Scopes take precedent over audience for signing,\n          // so we only provide them if useJWTAccessWithScope is on\n          _this.useJWTAccessWithScope ? scopes : undefined);\n          return {\n            headers: _this.addSharedMetadataHeaders(headers)\n          };\n        }\n      } else if (_this.hasAnyScopes() || _this.apiKey) {\n        return _superprop_getGetRequestMetadataAsync().call(_this, url);\n      } else {\n        // If no audience, apiKey, or scopes are provided, we should not attempt\n        // to populate any headers:\n        return {\n          headers: {}\n        };\n      }\n    })();\n  }\n  /**\n   * Fetches an ID token.\n   * @param targetAudience the audience for the fetched ID token.\n   */\n\n\n  fetchIdToken(targetAudience) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // Create a new gToken for fetching an ID token\n      const gtoken = new gtoken_1.GoogleToken({\n        iss: _this2.email,\n        sub: _this2.subject,\n        scope: _this2.scopes || _this2.defaultScopes,\n        keyFile: _this2.keyFile,\n        key: _this2.key,\n        additionalClaims: {\n          target_audience: targetAudience\n        },\n        transporter: _this2.transporter\n      });\n      yield gtoken.getToken({\n        forceRefresh: true\n      });\n\n      if (!gtoken.idToken) {\n        throw new Error('Unknown error: Failed to fetch ID token');\n      }\n\n      return gtoken.idToken;\n    })();\n  }\n  /**\n   * Determine if there are currently scopes available.\n   */\n\n\n  hasUserScopes() {\n    if (!this.scopes) {\n      return false;\n    }\n\n    return this.scopes.length > 0;\n  }\n  /**\n   * Are there any default or user scopes defined.\n   */\n\n\n  hasAnyScopes() {\n    if (this.scopes && this.scopes.length > 0) return true;\n    if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n    return false;\n  }\n\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n\n  authorizeAsync() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this3.refreshToken();\n\n      if (!result) {\n        throw new Error('No result returned');\n      }\n\n      _this3.credentials = result.tokens;\n      _this3.credentials.refresh_token = 'jwt-placeholder';\n      _this3.key = _this3.gtoken.key;\n      _this3.email = _this3.gtoken.iss;\n      return result.tokens;\n    })();\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken ignored\n   * @private\n   */\n\n\n  refreshTokenNoCache( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  refreshToken) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const gtoken = _this4.createGToken();\n\n      const token = yield gtoken.getToken({\n        forceRefresh: _this4.isTokenExpiring()\n      });\n      const tokens = {\n        access_token: token.access_token,\n        token_type: 'Bearer',\n        expiry_date: gtoken.expiresAt,\n        id_token: gtoken.idToken\n      };\n\n      _this4.emit('tokens', tokens);\n\n      return {\n        res: null,\n        tokens\n      };\n    })();\n  }\n  /**\n   * Create a gToken if it doesn't already exist.\n   */\n\n\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes || this.defaultScopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims,\n        transporter: this.transporter\n      });\n    }\n\n    return this.gtoken;\n  }\n  /**\n   * Create a JWT credentials instance using the given input options.\n   * @param json The input object.\n   */\n\n\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    } // Extract the relevant information from the json key file.\n\n\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n    this.quotaProjectId = json.quota_project_id;\n  }\n\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\n   * Creates a JWT credentials instance using an API Key for authentication.\n   * @param apiKey The API Key in string form.\n   */\n\n\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n\n    this.apiKey = apiKey;\n  }\n  /**\n   * Using the key or keyFile on the JWT client, obtain an object that contains\n   * the key and the client email.\n   */\n\n\n  getCredentials() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.key) {\n        return {\n          private_key: _this5.key,\n          client_email: _this5.email\n        };\n      } else if (_this5.keyFile) {\n        const gtoken = _this5.createGToken();\n\n        const creds = yield gtoken.getCredentials(_this5.keyFile);\n        return {\n          private_key: creds.privateKey,\n          client_email: creds.clientEmail\n        };\n      }\n\n      throw new Error('A key or a keyFile must be provided to getCredentials.');\n    })();\n  }\n\n}\n\nexports.JWT = JWT;","map":{"version":3,"names":["Object","defineProperty","exports","value","JWT","gtoken_1","require","jwtaccess_1","oauth2client_1","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","additionalClaims","credentials","refresh_token","expiry_date","createScoped","jwt","getRequestMetadataAsync","url","defaultServicePath","useSelfSignedJWT","hasUserScopes","useJWTAccessWithScope","hasAnyScopes","apiKey","target_audience","tokens","refreshToken","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","eagerRefreshThresholdMillis","defaultScopes","getRequestHeaders","undefined","fetchIdToken","targetAudience","gtoken","GoogleToken","iss","sub","scope","transporter","getToken","forceRefresh","idToken","Error","length","authorize","callback","authorizeAsync","then","r","result","refreshTokenNoCache","createGToken","token","isTokenExpiring","access_token","token_type","expiresAt","emit","res","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","fromStream","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","e","fromAPIKey","getCredentials","creds","privateKey","clientEmail"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super(opts);\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        const jwt = new JWT(this);\n        jwt.scopes = scopes;\n        return jwt;\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n        const useSelfSignedJWT = (!this.hasUserScopes() && url) ||\n            (this.useJWTAccessWithScope && this.hasAnyScopes());\n        if (!this.apiKey && useSelfSignedJWT) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`,\n                    }),\n                };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                let scopes;\n                if (this.hasUserScopes()) {\n                    scopes = this.scopes;\n                }\n                else if (!url) {\n                    scopes = this.defaultScopes;\n                }\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, \n                // Scopes take precedent over audience for signing,\n                // so we only provide them if useJWTAccessWithScope is on\n                this.useJWTAccessWithScope ? scopes : undefined);\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        }\n        else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return { headers: {} };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: { target_audience: targetAudience },\n            transporter: this.transporter,\n        });\n        await gtoken.getToken({\n            forceRefresh: true,\n        });\n        if (!gtoken.idToken) {\n            throw new Error('Unknown error: Failed to fetch ID token');\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */\n    hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0)\n            return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0)\n            return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring(),\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n                transporter: this.transporter,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}