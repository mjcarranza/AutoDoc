{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toLowerCamelCase = exports.toCamelCase = exports.camelToSnakeCase = void 0;\n\nfunction words(str, normalize = false) {\n  if (normalize) {\n    // strings like somethingABCSomething are special case for protobuf.js,\n    // they should be split as \"something\", \"abc\", \"something\".\n    // Deal with sequences of capital letters first.\n    str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, str => {\n      return str[0] + str.slice(1, str.length - 1).toLowerCase() + str[str.length - 1];\n    });\n  } // split on spaces, non-alphanumeric, or capital letters\n  // note: we keep the capitalization of the first word (special case: IPProtocol)\n\n\n  return str.split(/(?=[A-Z])|[^A-Za-z0-9.]+/).filter(w => w.length > 0).map((w, index) => index === 0 ? w : w.toLowerCase());\n}\n/**\n * Converts the first character of the given string to lower case.\n */\n\n\nfunction lowercase(str) {\n  if (str.length === 0) {\n    return str;\n  }\n\n  return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\n\n\nfunction camelToSnakeCase(str) {\n  // Keep the first position capitalization, otherwise decapitalize with underscore.\n  const wordsList = words(str);\n\n  if (wordsList.length === 0) {\n    return str;\n  }\n\n  const result = [wordsList[0]];\n  result.push(...wordsList.slice(1).map(lowercase));\n  return result.join('_');\n}\n\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\n\nfunction capitalize(str) {\n  if (str.length === 0) {\n    return str;\n  }\n\n  return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */\n\n\nfunction toCamelCase(str) {\n  const wordsList = words(str,\n  /*normalize:*/\n  true);\n\n  if (wordsList.length === 0) {\n    return str;\n  }\n\n  const result = [wordsList[0]];\n  result.push(...wordsList.slice(1).map(w => {\n    if (w.match(/^\\d+$/)) {\n      return '_' + w;\n    }\n\n    return capitalize(w);\n  }));\n  return result.join('');\n}\n\nexports.toCamelCase = toCamelCase;\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\n\nfunction toLowerCamelCase(str) {\n  const camelCase = toCamelCase(str);\n\n  if (camelCase.length === 0) {\n    return camelCase;\n  }\n\n  return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\n\nexports.toLowerCamelCase = toLowerCamelCase;","map":{"version":3,"names":["Object","defineProperty","exports","value","toLowerCamelCase","toCamelCase","camelToSnakeCase","words","str","normalize","replace","slice","length","toLowerCase","split","filter","w","map","index","lowercase","wordsList","result","push","join","capitalize","toUpperCase","match","camelCase"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toLowerCamelCase = exports.toCamelCase = exports.camelToSnakeCase = void 0;\nfunction words(str, normalize = false) {\n    if (normalize) {\n        // strings like somethingABCSomething are special case for protobuf.js,\n        // they should be split as \"something\", \"abc\", \"something\".\n        // Deal with sequences of capital letters first.\n        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str) => {\n            return (str[0] +\n                str.slice(1, str.length - 1).toLowerCase() +\n                str[str.length - 1]);\n        });\n    }\n    // split on spaces, non-alphanumeric, or capital letters\n    // note: we keep the capitalization of the first word (special case: IPProtocol)\n    return str\n        .split(/(?=[A-Z])|[^A-Za-z0-9.]+/)\n        .filter(w => w.length > 0)\n        .map((w, index) => (index === 0 ? w : w.toLowerCase()));\n}\n/**\n * Converts the first character of the given string to lower case.\n */\nfunction lowercase(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\nfunction camelToSnakeCase(str) {\n    // Keep the first position capitalization, otherwise decapitalize with underscore.\n    const wordsList = words(str);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(lowercase));\n    return result.join('_');\n}\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\nfunction capitalize(str) {\n    if (str.length === 0) {\n        return str;\n    }\n    return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */\nfunction toCamelCase(str) {\n    const wordsList = words(str, /*normalize:*/ true);\n    if (wordsList.length === 0) {\n        return str;\n    }\n    const result = [wordsList[0]];\n    result.push(...wordsList.slice(1).map(w => {\n        if (w.match(/^\\d+$/)) {\n            return '_' + w;\n        }\n        return capitalize(w);\n    }));\n    return result.join('');\n}\nexports.toCamelCase = toCamelCase;\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction toLowerCamelCase(str) {\n    const camelCase = toCamelCase(str);\n    if (camelCase.length === 0) {\n        return camelCase;\n    }\n    return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\nexports.toLowerCamelCase = toLowerCamelCase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}