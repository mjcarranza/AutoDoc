{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst descriptor_1 = require(\"./descriptor\");\n\nconst gax = require(\"./gax\");\n\nconst configData = require(\"./operations_client_config.json\");\n\nconst operationProtoJson = require(\"../protos/operations.json\");\n\nconst transcoding_1 = require(\"./transcoding\");\n\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\n\nconst version = require('../../package.json').version;\n\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\n\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\n\nclass OperationsClient {\n  constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  operationsProtos, options) {\n    const opts = Object.assign({\n      servicePath: exports.SERVICE_ADDRESS,\n      port: DEFAULT_SERVICE_PORT,\n      clientConfig: {}\n    }, options);\n    const googleApiClient = ['gl-node/' + process.versions.node];\n\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n\n    googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n\n    if (opts.fallback) {\n      googleApiClient.push('gl-web/' + version);\n    } else {\n      googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n    }\n\n    const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, {\n      'x-goog-api-client': googleApiClient.join(' ')\n    });\n    this.auth = gaxGrpc.auth; // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {};\n    this.descriptor = {\n      listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations')\n    }; // Put together the \"service stub\" for\n    // google.longrunning.Operations.\n\n    this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService('google.longrunning.Operations') : operationsProtos.google.longrunning.Operations, opts);\n    const operationsStubMethods = ['getOperation', 'listOperations', 'cancelOperation', 'deleteOperation'];\n\n    for (const methodName of operationsStubMethods) {\n      const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n    }\n  }\n  /** Closes this operations client. */\n\n\n  close() {\n    this.operationsStub.then(stub => stub.close());\n  }\n\n  getProjectId(callback) {\n    if (this.auth && 'getProjectId' in this.auth) {\n      return this.auth.getProjectId(callback);\n    }\n\n    if (callback) {\n      callback(new Error('Cannot determine project ID.'));\n    } else {\n      return Promise.reject('Cannot determine project ID.');\n    }\n  } // Service calls\n\n\n  getOperationInternal(request, options, callback) {\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\n   * \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   */\n\n\n  getOperation(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\n   *\n   * NOTE: the `name` binding below allows API services to override the binding\n   * to use different resource name schemes.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the\n   * result in a single response. If the response indicates the next page\n   * exists, the third parameter is set to be used for the next request object.\n   * The fourth parameter keeps the raw response object of an object\n   * representing [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, the array has\n   * three elements. The first element is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"} in a single response. The second\n   * element is the next request object if the response indicates the next page\n   * exists, or null. The third element is an object representing\n   * [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *     name: '',\n   *     filter: ''\n   * };\n   * // Iterate over all elements.\n   * const [resources] = await client.listOperations(request);\n   * for (const resource of resources) {\n   *   console.log(resources);\n   * }\n   *\n   * // Or obtain the paged response.\n   * const options = {autoPaginate: false};\n   * let nextRequest = request;\n   * while(nextRequest) {\n   *   const response = await client.listOperations(nextRequest, options);\n   *   const resources = response[0];\n   *   nextRequest = response[1];\n   *   const rawResponse = response[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   * };\n   */\n\n\n  listOperations(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.listOperations(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listOperations} continuously\n   * and invokes the callback registered for 'data' event for each element in\n   * the responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *   name: '',\n   *   filter: ''\n   * };\n   * client.listOperationsStream(request)\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   })\n   *   .on('error', err => {\n   *     console.error(err);\n   *   });\n   */\n\n\n  listOperationsStream(request, options) {\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\n   * Equivalent to {@link listOperations}, but returns an iterable object.\n   *\n   * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @returns {Object}\n   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n   */\n\n\n  listOperationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   */\n\n\n  cancelOperation(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.cancelOperation(request, options, callback);\n  }\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   */\n\n\n  deleteOperation(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.deleteOperation(request, options, callback);\n  }\n\n}\n\nexports.OperationsClient = OperationsClient;\n\nclass OperationsClientBuilder {\n  /**\n   * Builds a new Operations Client\n   * @param gaxGrpc {GrpcClient}\n   */\n  constructor(gaxGrpc, protoJson) {\n    if (protoJson && gaxGrpc.httpRules) {\n      // overwrite the http rules if provide in service yaml.\n      (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n    }\n\n    const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);\n    /**\n     * Build a new instance of {@link OperationsClient}.\n     *\n     * @param {Object=} opts - The optional parameters.\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\n     * @param {number=} opts.port - The port on which to connect to the remote host.\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n     */\n\n    this.operationsClient = opts => {\n      if (gaxGrpc.fallback) {\n        opts.fallback = gaxGrpc.fallback;\n      }\n\n      return new OperationsClient(gaxGrpc, operationsProtos, opts);\n    };\n\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n\n}\n\nexports.OperationsClientBuilder = OperationsClientBuilder;","map":{"version":3,"names":["Object","defineProperty","exports","value","OperationsClientBuilder","OperationsClient","ALL_SCOPES","SERVICE_ADDRESS","createApiCall_1","require","descriptor_1","gax","configData","operationProtoJson","transcoding_1","version","DEFAULT_SERVICE_PORT","CODE_GEN_NAME_VERSION","constructor","gaxGrpc","operationsProtos","options","opts","assign","servicePath","port","clientConfig","googleApiClient","process","versions","node","libName","libVersion","push","fallback","grpcVersion","defaults","constructSettings","join","auth","innerApiCalls","descriptor","listOperations","PageDescriptor","operationsStub","createStub","lookupService","google","longrunning","Operations","operationsStubMethods","methodName","innerCallPromise","then","stub","args","func","apply","err","createApiCall","close","getProjectId","callback","Error","Promise","reject","getOperationInternal","request","getOperation","optionsOrCallback","Function","undefined","listOperationsStream","callSettings","CallSettings","createStream","listOperationsAsync","asyncIterate","cancelOperation","deleteOperation","protoJson","httpRules","overrideHttpRules","loadProtoJSON","operationsClient"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/operationsClient.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst descriptor_1 = require(\"./descriptor\");\nconst gax = require(\"./gax\");\nconst configData = require(\"./operations_client_config.json\");\nconst operationProtoJson = require(\"../protos/operations.json\");\nconst transcoding_1 = require(\"./transcoding\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    operationsProtos, options) {\n        const opts = Object.assign({\n            servicePath: exports.SERVICE_ADDRESS,\n            port: DEFAULT_SERVICE_PORT,\n            clientConfig: {},\n        }, options);\n        const googleApiClient = ['gl-node/' + process.versions.node];\n        if (opts.libName && opts.libVersion) {\n            googleApiClient.push(opts.libName + '/' + opts.libVersion);\n        }\n        googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n        if (opts.fallback) {\n            googleApiClient.push('gl-web/' + version);\n        }\n        else {\n            googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n        }\n        const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, { 'x-goog-api-client': googleApiClient.join(' ') });\n        this.auth = gaxGrpc.auth;\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        this.descriptor = {\n            listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations'),\n        };\n        // Put together the \"service stub\" for\n        // google.longrunning.Operations.\n        this.operationsStub = gaxGrpc.createStub(opts.fallback\n            ? operationsProtos.lookupService('google.longrunning.Operations')\n            : operationsProtos.google.longrunning.Operations, opts);\n        const operationsStubMethods = [\n            'getOperation',\n            'listOperations',\n            'cancelOperation',\n            'deleteOperation',\n        ];\n        for (const methodName of operationsStubMethods) {\n            const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, err => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n        }\n    }\n    /** Closes this operations client. */\n    close() {\n        this.operationsStub.then(stub => stub.close());\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    // Service calls\n    getOperationInternal(request, options, callback) {\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}. The promise has a method named\n     * \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     */\n    getOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`.\n     *\n     * NOTE: the `name` binding below allows API services to override the binding\n     * to use different resource name schemes.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, it contains the\n     * result in a single response. If the response indicates the next page\n     * exists, the third parameter is set to be used for the next request object.\n     * The fourth parameter keeps the raw response object of an object\n     * representing [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"}.\n     *\n     *   When autoPaginate: false is specified through options, the array has\n     * three elements. The first element is Array of\n     * [google.longrunning.Operation]{@link\n     * external:\"google.longrunning.Operation\"} in a single response. The second\n     * element is the next request object if the response indicates the next page\n     * exists, or null. The third element is an object representing\n     * [google.longrunning.ListOperationsResponse]{@link\n     * external:\"google.longrunning.ListOperationsResponse\"}.\n     *\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *     name: '',\n     *     filter: ''\n     * };\n     * // Iterate over all elements.\n     * const [resources] = await client.listOperations(request);\n     * for (const resource of resources) {\n     *   console.log(resources);\n     * }\n     *\n     * // Or obtain the paged response.\n     * const options = {autoPaginate: false};\n     * let nextRequest = request;\n     * while(nextRequest) {\n     *   const response = await client.listOperations(nextRequest, options);\n     *   const resources = response[0];\n     *   nextRequest = response[1];\n     *   const rawResponse = response[2];\n     *   for (const resource of resources) {\n     *     // doThingsWith(resource);\n     *   }\n     * };\n     */\n    listOperations(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.listOperations(request, options, callback);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n     *\n     * This fetches the paged responses for {@link listOperations} continuously\n     * and invokes the callback registered for 'data' event for each element in\n     * the responses.\n     *\n     * The returned object has 'end' method when no more elements are required.\n     *\n     * autoPaginate option will be ignored.\n     *\n     * @see {@link https://nodejs.org/api/stream.html}\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * const request = {\n     *   name: '',\n     *   filter: ''\n     * };\n     * client.listOperationsStream(request)\n     *   .on('data', element => {\n     *     // doThingsWith(element)\n     *   })\n     *   .on('error', err => {\n     *     console.error(err);\n     *   });\n     */\n    listOperationsStream(request, options) {\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Equivalent to {@link listOperations}, but returns an iterable object.\n     *\n     * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n     */\n    listOperationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     */\n    cancelOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     *\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     */\n    deleteOperation(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        return this.innerApiCalls.deleteOperation(request, options, callback);\n    }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n    /**\n     * Builds a new Operations Client\n     * @param gaxGrpc {GrpcClient}\n     */\n    constructor(gaxGrpc, protoJson) {\n        if (protoJson && gaxGrpc.httpRules) {\n            // overwrite the http rules if provide in service yaml.\n            (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);\n        }\n        const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);\n        /**\n         * Build a new instance of {@link OperationsClient}.\n         *\n         * @param {Object=} opts - The optional parameters.\n         * @param {String=} opts.servicePath - Domain name of the API remote host.\n         * @param {number=} opts.port - The port on which to connect to the remote host.\n         * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n         * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n         */\n        this.operationsClient = opts => {\n            if (gaxGrpc.fallback) {\n                opts.fallback = gaxGrpc.fallback;\n            }\n            return new OperationsClient(gaxGrpc, operationsProtos, opts);\n        };\n        Object.assign(this.operationsClient, OperationsClient);\n    }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;\n"],"mappings":"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,OAAO,IAAI,EAArB;IACA9C,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,OAAO,KAAKmB,aAAL,CAAmB4B,YAAnB,CAAgCD,OAAhC,EAAyC9C,OAAzC,EAAkDyC,QAAlD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIpB,cAAc,CAACyB,OAAD,EAAUE,iBAAV,EAA6BP,QAA7B,EAAuC;IACjD,IAAIzC,OAAJ;;IACA,IAAIgD,iBAAiB,YAAYC,QAA7B,IAAyCR,QAAQ,KAAKS,SAA1D,EAAqE;MACjET,QAAQ,GAAGO,iBAAX;MACAhD,OAAO,GAAG,EAAV;IACH,CAHD,MAIK;MACDA,OAAO,GAAGgD,iBAAV;IACH;;IACDF,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA9C,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,OAAO,KAAKmB,aAAL,CAAmBE,cAAnB,CAAkCyB,OAAlC,EAA2C9C,OAA3C,EAAoDyC,QAApD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIU,oBAAoB,CAACL,OAAD,EAAU9C,OAAV,EAAmB;IACnC,MAAMoD,YAAY,GAAG,IAAI9D,G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"},"metadata":{},"sourceType":"script"}