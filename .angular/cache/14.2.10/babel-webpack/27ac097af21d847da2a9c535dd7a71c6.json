{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\n\nfunction googleProtobufTimestampToProto3JSON(obj) {\n  var _a; // seconds is an instance of Long so it won't be undefined\n\n\n  const durationSeconds = obj.seconds;\n  const date = new Date(durationSeconds * 1000).toISOString(); // Pad leading zeros if nano string length is less than 9.\n\n  let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, '0'); // Trim the unsignificant zeros and keep 3, 6, or 9 decimal digits.\n\n  while (nanos && nanos.length > 3 && nanos.endsWith('000')) {\n    nanos = nanos.slice(0, -3);\n  }\n\n  return date.replace(/(?:\\.\\d{0,9})/, '.' + nanos);\n}\n\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\n\nfunction googleProtobufTimestampFromProto3JSON(json) {\n  const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n\n  if (!match) {\n    throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n  }\n\n  const date = new Date(json);\n  const millisecondsSinceEpoch = date.getTime();\n  const seconds = Math.floor(millisecondsSinceEpoch / 1000); // The fractional seconds in the JSON timestamps can go up to 9 digits (i.e. up to 1 nanosecond resolution).\n  // However, Javascript Date object represent any date and time to millisecond precision.\n  // To keep the precision, we extract the fractional seconds and append 0 until the length is equal to 9.\n\n  let nanos = 0;\n  const secondsFromDate = json.split('.')[1];\n\n  if (secondsFromDate) {\n    nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, '0'));\n  }\n\n  const result = {};\n\n  if (seconds !== 0) {\n    result.seconds = seconds;\n  }\n\n  if (nanos !== 0) {\n    result.nanos = nanos;\n  }\n\n  return result;\n}\n\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;","map":{"version":3,"names":["Object","defineProperty","exports","value","googleProtobufTimestampFromProto3JSON","googleProtobufTimestampToProto3JSON","obj","_a","durationSeconds","seconds","date","Date","toISOString","nanos","toString","padStart","length","endsWith","slice","replace","json","match","Error","millisecondsSinceEpoch","getTime","Math","floor","secondsFromDate","split","parseInt","padEnd","result"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/proto3-json-serializer/build/src/timestamp.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\nfunction googleProtobufTimestampToProto3JSON(obj) {\n    var _a;\n    // seconds is an instance of Long so it won't be undefined\n    const durationSeconds = obj.seconds;\n    const date = new Date(durationSeconds * 1000).toISOString();\n    // Pad leading zeros if nano string length is less than 9.\n    let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, '0');\n    // Trim the unsignificant zeros and keep 3, 6, or 9 decimal digits.\n    while (nanos && nanos.length > 3 && nanos.endsWith('000')) {\n        nanos = nanos.slice(0, -3);\n    }\n    return date.replace(/(?:\\.\\d{0,9})/, '.' + nanos);\n}\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\nfunction googleProtobufTimestampFromProto3JSON(json) {\n    const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n    if (!match) {\n        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n    }\n    const date = new Date(json);\n    const millisecondsSinceEpoch = date.getTime();\n    const seconds = Math.floor(millisecondsSinceEpoch / 1000);\n    // The fractional seconds in the JSON timestamps can go up to 9 digits (i.e. up to 1 nanosecond resolution).\n    // However, Javascript Date object represent any date and time to millisecond precision.\n    // To keep the precision, we extract the fractional seconds and append 0 until the length is equal to 9.\n    let nanos = 0;\n    const secondsFromDate = json.split('.')[1];\n    if (secondsFromDate) {\n        nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, '0'));\n    }\n    const result = {};\n    if (seconds !== 0) {\n        result.seconds = seconds;\n    }\n    if (nanos !== 0) {\n        result.nanos = nanos;\n    }\n    return result;\n}\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,qCAAR,GAAgDF,OAAO,CAACG,mCAAR,GAA8C,KAAK,CAAnG;;AACA,SAASA,mCAAT,CAA6CC,GAA7C,EAAkD;EAC9C,IAAIC,EAAJ,CAD8C,CAE9C;;;EACA,MAAMC,eAAe,GAAGF,GAAG,CAACG,OAA5B;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASH,eAAe,GAAG,IAA3B,EAAiCI,WAAjC,EAAb,CAJ8C,CAK9C;;EACA,IAAIC,KAAK,GAAG,CAACN,EAAE,GAAGD,GAAG,CAACO,KAAV,MAAqB,IAArB,IAA6BN,EAAE,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,EAAE,CAACO,QAAH,GAAcC,QAAd,CAAuB,CAAvB,EAA0B,GAA1B,CAAlE,CAN8C,CAO9C;;EACA,OAAOF,KAAK,IAAIA,KAAK,CAACG,MAAN,GAAe,CAAxB,IAA6BH,KAAK,CAACI,QAAN,CAAe,KAAf,CAApC,EAA2D;IACvDJ,KAAK,GAAGA,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR;EACH;;EACD,OAAOR,IAAI,CAACS,OAAL,CAAa,eAAb,EAA8B,MAAMN,KAApC,CAAP;AACH;;AACDX,OAAO,CAACG,mCAAR,GAA8CA,mCAA9C;;AACA,SAASD,qCAAT,CAA+CgB,IAA/C,EAAqD;EACjD,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAW,gDAAX,CAAd;;EACA,IAAI,CAACA,KAAL,EAAY;IACR,MAAM,IAAIC,KAAJ,CAAW,yDAAwDF,IAAK,qCAAxE,CAAN;EACH;;EACD,MAAMV,IAAI,GAAG,IAAIC,IAAJ,CAASS,IAAT,CAAb;EACA,MAAMG,sBAAsB,GAAGb,IAAI,CAACc,OAAL,EAA/B;EACA,MAAMf,OAAO,GAAGgB,IAAI,CAACC,KAAL,CAAWH,sBAAsB,GAAG,IAApC,CAAhB,CAPiD,CAQjD;EACA;EACA;;EACA,IAAIV,KAAK,GAAG,CAAZ;EACA,MAAMc,eAAe,GAAGP,IAAI,CAACQ,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAxB;;EACA,IAAID,eAAJ,EAAqB;IACjBd,KAAK,GAAGgB,QAAQ,CAACF,eAAe,CAACT,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6BY,MAA7B,CAAoC,CAApC,EAAuC,GAAvC,CAAD,CAAhB;EACH;;EACD,MAAMC,MAAM,GAAG,EAAf;;EACA,IAAItB,OAAO,KAAK,CAAhB,EAAmB;IACfsB,MAAM,CAACtB,OAAP,GAAiBA,OAAjB;EACH;;EACD,IAAII,KAAK,KAAK,CAAd,EAAiB;IACbkB,MAAM,CAAClB,KAAP,GAAeA,KAAf;EACH;;EACD,OAAOkB,MAAP;AACH;;AACD7B,OAAO,CAACE,qCAAR,GAAgDA,qCAAhD"},"metadata":{},"sourceType":"script"}