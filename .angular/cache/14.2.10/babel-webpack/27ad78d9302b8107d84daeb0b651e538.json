{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufAnyFromProto3JSON = exports.googleProtobufAnyToProto3JSON = void 0;\n\nconst fromproto3json_1 = require(\"./fromproto3json\");\n\nconst toproto3json_1 = require(\"./toproto3json\"); // https://github.com/protocolbuffers/protobuf/blob/ba3836703b4a9e98e474aea2bac8c5b49b6d3b5c/python/google/protobuf/json_format.py#L850\n\n\nconst specialJSON = new Set(['google.protobuf.Any', 'google.protobuf.Duration', 'google.protobuf.FieldMask', 'google.protobuf.ListValue', 'google.protobuf.Struct', 'google.protobuf.Timestamp', 'google.protobuf.Value']);\n\nfunction googleProtobufAnyToProto3JSON(obj, options) {\n  // https://developers.google.com/protocol-buffers/docs/proto3#json\n  // If the Any contains a value that has a special JSON mapping, it will be converted as follows:\n  // {\"@type\": xxx, \"value\": yyy}.\n  // Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted\n  // to indicate the actual data type.\n  const typeName = obj.type_url.replace(/^.*\\//, '');\n  let type;\n\n  try {\n    type = obj.$type.root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);\n  }\n\n  const valueMessage = type.decode(obj.value);\n  const valueProto3JSON = (0, toproto3json_1.toProto3JSON)(valueMessage, options);\n\n  if (specialJSON.has(typeName)) {\n    return {\n      '@type': obj.type_url,\n      value: valueProto3JSON\n    };\n  }\n\n  valueProto3JSON['@type'] = obj.type_url;\n  return valueProto3JSON;\n}\n\nexports.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;\n\nfunction googleProtobufAnyFromProto3JSON(root, json) {\n  // Not all possible JSON values can hold Any, only real objects.\n  if (json === null || typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error('googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any');\n  }\n\n  const typeUrl = json['@type'];\n\n  if (!typeUrl || typeof typeUrl !== 'string') {\n    throw new Error('googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field');\n  }\n\n  const typeName = typeUrl.replace(/^.*\\//, '');\n  let type;\n\n  try {\n    type = root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);\n  }\n\n  let value = json;\n\n  if (specialJSON.has(typeName)) {\n    if (!('value' in json)) {\n      throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);\n    }\n\n    value = json.value;\n  }\n\n  const valueMessage = (0, fromproto3json_1.fromProto3JSON)(type, value);\n\n  if (valueMessage === null) {\n    return {\n      type_url: typeUrl,\n      value: null\n    };\n  }\n\n  const uint8array = type.encode(valueMessage).finish();\n  const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);\n  const base64 = buffer.toString('base64');\n  return {\n    type_url: typeUrl,\n    value: base64\n  };\n}\n\nexports.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;","map":{"version":3,"names":["Object","defineProperty","exports","value","googleProtobufAnyFromProto3JSON","googleProtobufAnyToProto3JSON","fromproto3json_1","require","toproto3json_1","specialJSON","Set","obj","options","typeName","type_url","replace","type","$type","root","lookupType","err","Error","valueMessage","decode","valueProto3JSON","toProto3JSON","has","json","Array","isArray","typeUrl","fromProto3JSON","uint8array","encode","finish","buffer","Buffer","from","byteLength","base64","toString"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/proto3-json-serializer/build/src/any.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.googleProtobufAnyFromProto3JSON = exports.googleProtobufAnyToProto3JSON = void 0;\nconst fromproto3json_1 = require(\"./fromproto3json\");\nconst toproto3json_1 = require(\"./toproto3json\");\n// https://github.com/protocolbuffers/protobuf/blob/ba3836703b4a9e98e474aea2bac8c5b49b6d3b5c/python/google/protobuf/json_format.py#L850\nconst specialJSON = new Set([\n    'google.protobuf.Any',\n    'google.protobuf.Duration',\n    'google.protobuf.FieldMask',\n    'google.protobuf.ListValue',\n    'google.protobuf.Struct',\n    'google.protobuf.Timestamp',\n    'google.protobuf.Value',\n]);\nfunction googleProtobufAnyToProto3JSON(obj, options) {\n    // https://developers.google.com/protocol-buffers/docs/proto3#json\n    // If the Any contains a value that has a special JSON mapping, it will be converted as follows:\n    // {\"@type\": xxx, \"value\": yyy}.\n    // Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted\n    // to indicate the actual data type.\n    const typeName = obj.type_url.replace(/^.*\\//, '');\n    let type;\n    try {\n        type = obj.$type.root.lookupType(typeName);\n    }\n    catch (err) {\n        throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);\n    }\n    const valueMessage = type.decode(obj.value);\n    const valueProto3JSON = (0, toproto3json_1.toProto3JSON)(valueMessage, options);\n    if (specialJSON.has(typeName)) {\n        return {\n            '@type': obj.type_url,\n            value: valueProto3JSON,\n        };\n    }\n    valueProto3JSON['@type'] = obj.type_url;\n    return valueProto3JSON;\n}\nexports.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;\nfunction googleProtobufAnyFromProto3JSON(root, json) {\n    // Not all possible JSON values can hold Any, only real objects.\n    if (json === null || typeof json !== 'object' || Array.isArray(json)) {\n        throw new Error('googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any');\n    }\n    const typeUrl = json['@type'];\n    if (!typeUrl || typeof typeUrl !== 'string') {\n        throw new Error('googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field');\n    }\n    const typeName = typeUrl.replace(/^.*\\//, '');\n    let type;\n    try {\n        type = root.lookupType(typeName);\n    }\n    catch (err) {\n        throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);\n    }\n    let value = json;\n    if (specialJSON.has(typeName)) {\n        if (!('value' in json)) {\n            throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);\n        }\n        value = json.value;\n    }\n    const valueMessage = (0, fromproto3json_1.fromProto3JSON)(type, value);\n    if (valueMessage === null) {\n        return {\n            type_url: typeUrl,\n            value: null,\n        };\n    }\n    const uint8array = type.encode(valueMessage).finish();\n    const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);\n    const base64 = buffer.toString('base64');\n    return {\n        type_url: typeUrl,\n        value: base64,\n    };\n}\nexports.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,+BAAR,GAA0CF,OAAO,CAACG,6BAAR,GAAwC,KAAK,CAAvF;;AACA,MAAMC,gBAAgB,GAAGC,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,gBAAD,CAA9B,C,CACA;;;AACA,MAAME,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CACxB,qBADwB,EAExB,0BAFwB,EAGxB,2BAHwB,EAIxB,2BAJwB,EAKxB,wBALwB,EAMxB,2BANwB,EAOxB,uBAPwB,CAAR,CAApB;;AASA,SAASL,6BAAT,CAAuCM,GAAvC,EAA4CC,OAA5C,EAAqD;EACjD;EACA;EACA;EACA;EACA;EACA,MAAMC,QAAQ,GAAGF,GAAG,CAACG,QAAJ,CAAaC,OAAb,CAAqB,OAArB,EAA8B,EAA9B,CAAjB;EACA,IAAIC,IAAJ;;EACA,IAAI;IACAA,IAAI,GAAGL,GAAG,CAACM,KAAJ,CAAUC,IAAV,CAAeC,UAAf,CAA0BN,QAA1B,CAAP;EACH,CAFD,CAGA,OAAOO,GAAP,EAAY;IACR,MAAM,IAAIC,KAAJ,CAAW,mDAAkDR,QAAS,KAAIO,GAAI,EAA9E,CAAN;EACH;;EACD,MAAME,YAAY,GAAGN,IAAI,CAACO,MAAL,CAAYZ,GAAG,CAACR,KAAhB,CAArB;EACA,MAAMqB,eAAe,GAAG,CAAC,GAAGhB,cAAc,CAACiB,YAAnB,EAAiCH,YAAjC,EAA+CV,OAA/C,CAAxB;;EACA,IAAIH,WAAW,CAACiB,GAAZ,CAAgBb,QAAhB,CAAJ,EAA+B;IAC3B,OAAO;MACH,SAASF,GAAG,CAACG,QADV;MAEHX,KAAK,EAAEqB;IAFJ,CAAP;EAIH;;EACDA,eAAe,CAAC,OAAD,CAAf,GAA2Bb,GAAG,CAACG,QAA/B;EACA,OAAOU,eAAP;AACH;;AACDtB,OAAO,CAACG,6BAAR,GAAwCA,6BAAxC;;AACA,SAASD,+BAAT,CAAyCc,IAAzC,EAA+CS,IAA/C,EAAqD;EACjD;EACA,IAAIA,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,QAAjC,IAA6CC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAjD,EAAsE;IAClE,MAAM,IAAIN,KAAJ,CAAU,kFAAV,CAAN;EACH;;EACD,MAAMS,OAAO,GAAGH,IAAI,CAAC,OAAD,CAApB;;EACA,IAAI,CAACG,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;IACzC,MAAM,IAAIT,KAAJ,CAAU,qGAAV,CAAN;EACH;;EACD,MAAMR,QAAQ,GAAGiB,OAAO,CAACf,OAAR,CAAgB,OAAhB,EAAyB,EAAzB,CAAjB;EACA,IAAIC,IAAJ;;EACA,IAAI;IACAA,IAAI,GAAGE,IAAI,CAACC,UAAL,CAAgBN,QAAhB,CAAP;EACH,CAFD,CAGA,OAAOO,GAAP,EAAY;IACR,MAAM,IAAIC,KAAJ,CAAW,qDAAoDR,QAAS,KAAIO,GAAI,EAAhF,CAAN;EACH;;EACD,IAAIjB,KAAK,GAAGwB,IAAZ;;EACA,IAAIlB,WAAW,CAACiB,GAAZ,CAAgBb,QAAhB,CAAJ,EAA+B;IAC3B,IAAI,EAAE,WAAWc,IAAb,CAAJ,EAAwB;MACpB,MAAM,IAAIN,KAAJ,CAAW,yFAAwFR,QAAS,+BAA5G,CAAN;IACH;;IACDV,KAAK,GAAGwB,IAAI,CAACxB,KAAb;EACH;;EACD,MAAMmB,YAAY,GAAG,CAAC,GAAGhB,gBAAgB,CAACyB,cAArB,EAAqCf,IAArC,EAA2Cb,KAA3C,CAArB;;EACA,IAAImB,YAAY,KAAK,IAArB,EAA2B;IACvB,OAAO;MACHR,QAAQ,EAAEgB,OADP;MAEH3B,KAAK,EAAE;IAFJ,CAAP;EAIH;;EACD,MAAM6B,UAAU,GAAGhB,IAAI,CAACiB,MAAL,CAAYX,YAAZ,EAA0BY,MAA1B,EAAnB;EACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwB,CAAxB,EAA2BA,UAAU,CAACM,UAAtC,CAAf;EACA,MAAMC,MAAM,GAAGJ,MAAM,CAACK,QAAP,CAAgB,QAAhB,CAAf;EACA,OAAO;IACH1B,QAAQ,EAAEgB,OADP;IAEH3B,KAAK,EAAEoC;EAFJ,CAAP;AAIH;;AACDrC,OAAO,CAACE,+BAAR,GAA0CA,+BAA1C"},"metadata":{},"sourceType":"script"}