{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Gaxios = void 0;\n\nconst extend_1 = __importDefault(require(\"extend\"));\n\nconst https_1 = require(\"https\");\n\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\n\nconst querystring_1 = __importDefault(require(\"querystring\"));\n\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\n\nconst url_1 = require(\"url\");\n\nconst common_1 = require(\"./common\");\n\nconst retry_1 = require(\"./retry\");\n\nconst https_proxy_agent_1 = require(\"https-proxy-agent\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\n\nfunction hasWindow() {\n  return typeof window !== 'undefined' && !!window;\n}\n\nfunction hasFetch() {\n  return hasWindow() && !!window.fetch;\n}\n\nfunction hasBuffer() {\n  return typeof Buffer !== 'undefined';\n}\n\nfunction hasHeader(options, header) {\n  return !!getHeader(options, header);\n}\n\nfunction getHeader(options, header) {\n  header = header.toLowerCase();\n\n  for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {\n    if (header === key.toLowerCase()) {\n      return options.headers[key];\n    }\n  }\n\n  return undefined;\n}\n\nlet HttpsProxyAgent;\n\nfunction loadProxy() {\n  var _a, _b, _c, _d;\n\n  const proxy = ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.HTTPS_PROXY) || ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.https_proxy) || ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c.HTTP_PROXY) || ((_d = process === null || process === void 0 ? void 0 : process.env) === null || _d === void 0 ? void 0 : _d.http_proxy);\n\n  if (proxy) {\n    HttpsProxyAgent = https_proxy_agent_1.HttpsProxyAgent;\n  }\n\n  return proxy;\n}\n\nloadProxy();\n\nfunction skipProxy(url) {\n  var _a;\n\n  const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;\n\n  if (!noProxyEnv) {\n    return false;\n  }\n\n  const noProxyUrls = noProxyEnv.split(',');\n  const parsedURL = new url_1.URL(url);\n  return !!noProxyUrls.find(url => {\n    if (url.startsWith('*.') || url.startsWith('.')) {\n      url = url.replace(/^\\*\\./, '.');\n      return parsedURL.hostname.endsWith(url);\n    } else {\n      return url === parsedURL.origin || url === parsedURL.hostname;\n    }\n  });\n} // Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\n\n\nfunction getProxy(url) {\n  // If there is a match between the no_proxy env variables and the url, then do not proxy\n  if (skipProxy(url)) {\n    return undefined; // If there is not a match between the no_proxy env variables and the url, check to see if there should be a proxy\n  } else {\n    return loadProxy();\n  }\n}\n\nclass Gaxios {\n  /**\n   * The Gaxios class is responsible for making HTTP requests.\n   * @param defaults The default set of options to be used for this instance.\n   */\n  constructor(defaults) {\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\n   * Perform an HTTP request with the given options.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  request(opts = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      opts = _this.validateOpts(opts);\n      return _this._request(opts);\n    })();\n  }\n\n  _defaultAdapter(opts) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const fetchImpl = opts.fetchImplementation || fetch;\n      const res = yield fetchImpl(opts.url, opts);\n      const data = yield _this2.getResponseData(opts, res);\n      return _this2.translateResponse(opts, res, data);\n    })();\n  }\n  /**\n   * Internal, retryable version of the `request` method.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  _request(opts = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        let translatedResponse;\n\n        if (opts.adapter) {\n          translatedResponse = yield opts.adapter(opts, _this3._defaultAdapter.bind(_this3));\n        } else {\n          translatedResponse = yield _this3._defaultAdapter(opts);\n        }\n\n        if (!opts.validateStatus(translatedResponse.status)) {\n          if (opts.responseType === 'stream') {\n            let response = '';\n            yield new Promise(resolve => {\n              (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on('data', chunk => {\n                response += chunk;\n              });\n              (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on('end', resolve);\n            });\n            translatedResponse.data = response;\n          }\n\n          throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n        }\n\n        return translatedResponse;\n      } catch (e) {\n        const err = e instanceof common_1.GaxiosError ? e : new common_1.GaxiosError(e.message, opts, undefined, e);\n        const {\n          shouldRetry,\n          config\n        } = yield (0, retry_1.getRetryConfig)(err);\n\n        if (shouldRetry && config) {\n          err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n          return _this3._request(err.config);\n        }\n\n        throw err;\n      }\n    })();\n  }\n\n  getResponseData(opts, res) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      switch (opts.responseType) {\n        case 'stream':\n          return res.body;\n\n        case 'json':\n          {\n            let data = yield res.text();\n\n            try {\n              data = JSON.parse(data);\n            } catch (_a) {// continue\n            }\n\n            return data;\n          }\n\n        case 'arraybuffer':\n          return res.arrayBuffer();\n\n        case 'blob':\n          return res.blob();\n\n        case 'text':\n          return res.text();\n\n        default:\n          return _this4.getResponseDataFromContentType(res);\n      }\n    })();\n  }\n  /**\n   * Validates the options, and merges them with defaults.\n   * @param opts The original options passed from the client.\n   */\n\n\n  validateOpts(options) {\n    const opts = (0, extend_1.default)(true, {}, this.defaults, options);\n\n    if (!opts.url) {\n      throw new Error('URL is required.');\n    } // baseUrl has been deprecated, remove in 2.0\n\n\n    const baseUrl = opts.baseUrl || opts.baseURL;\n\n    if (baseUrl) {\n      opts.url = baseUrl + opts.url;\n    }\n\n    opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n\n    if (opts.params && Object.keys(opts.params).length > 0) {\n      let additionalQueryParams = opts.paramsSerializer(opts.params);\n\n      if (additionalQueryParams.startsWith('?')) {\n        additionalQueryParams = additionalQueryParams.slice(1);\n      }\n\n      const prefix = opts.url.includes('?') ? '&' : '?';\n      opts.url = opts.url + prefix + additionalQueryParams;\n    }\n\n    if (typeof options.maxContentLength === 'number') {\n      opts.size = options.maxContentLength;\n    }\n\n    if (typeof options.maxRedirects === 'number') {\n      opts.follow = options.maxRedirects;\n    }\n\n    opts.headers = opts.headers || {};\n\n    if (opts.data) {\n      const isFormData = typeof FormData === 'undefined' ? false : (opts === null || opts === void 0 ? void 0 : opts.data) instanceof FormData;\n\n      if (is_stream_1.default.readable(opts.data)) {\n        opts.body = opts.data;\n      } else if (hasBuffer() && Buffer.isBuffer(opts.data)) {\n        // Do not attempt to JSON.stringify() a Buffer:\n        opts.body = opts.data;\n\n        if (!hasHeader(opts, 'Content-Type')) {\n          opts.headers['Content-Type'] = 'application/json';\n        }\n      } else if (typeof opts.data === 'object') {\n        // If www-form-urlencoded content type has been set, but data is\n        // provided as an object, serialize the content using querystring:\n        if (!isFormData) {\n          if (getHeader(opts, 'content-type') === 'application/x-www-form-urlencoded') {\n            opts.body = opts.paramsSerializer(opts.data);\n          } else {\n            // } else if (!(opts.data instanceof FormData)) {\n            if (!hasHeader(opts, 'Content-Type')) {\n              opts.headers['Content-Type'] = 'application/json';\n            }\n\n            opts.body = JSON.stringify(opts.data);\n          }\n        }\n      } else {\n        opts.body = opts.data;\n      }\n    }\n\n    opts.validateStatus = opts.validateStatus || this.validateStatus;\n    opts.responseType = opts.responseType || 'unknown';\n\n    if (!opts.headers['Accept'] && opts.responseType === 'json') {\n      opts.headers['Accept'] = 'application/json';\n    }\n\n    opts.method = opts.method || 'GET';\n    const proxy = getProxy(opts.url);\n\n    if (proxy) {\n      if (this.agentCache.has(proxy)) {\n        opts.agent = this.agentCache.get(proxy);\n      } else {\n        // Proxy is being used in conjunction with mTLS.\n        if (opts.cert && opts.key) {\n          const parsedURL = new url_1.URL(proxy);\n          opts.agent = new HttpsProxyAgent({\n            port: parsedURL.port,\n            host: parsedURL.host,\n            protocol: parsedURL.protocol,\n            cert: opts.cert,\n            key: opts.key\n          });\n        } else {\n          opts.agent = new HttpsProxyAgent(proxy);\n        }\n\n        this.agentCache.set(proxy, opts.agent);\n      }\n    } else if (opts.cert && opts.key) {\n      // Configure client for mTLS:\n      if (this.agentCache.has(opts.key)) {\n        opts.agent = this.agentCache.get(opts.key);\n      } else {\n        opts.agent = new https_1.Agent({\n          cert: opts.cert,\n          key: opts.key\n        });\n        this.agentCache.set(opts.key, opts.agent);\n      }\n    }\n\n    if (typeof opts.errorRedactor !== 'function' && opts.errorRedactor !== false) {\n      opts.errorRedactor = common_1.defaultErrorRedactor;\n    }\n\n    return opts;\n  }\n  /**\n   * By default, throw for any non-2xx status code\n   * @param status status code from the HTTP response\n   */\n\n\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n  /**\n   * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n   * @param params key value pars to encode\n   */\n\n\n  paramsSerializer(params) {\n    return querystring_1.default.stringify(params);\n  }\n\n  translateResponse(opts, res, data) {\n    // headers need to be converted from a map to an obj\n    const headers = {};\n    res.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n    return {\n      config: opts,\n      data: data,\n      headers,\n      status: res.status,\n      statusText: res.statusText,\n      // XMLHttpRequestLike\n      request: {\n        responseURL: res.url\n      }\n    };\n  }\n  /**\n   * Attempts to parse a response by looking at the Content-Type header.\n   * @param {FetchResponse} response the HTTP response.\n   * @returns {Promise<any>} a promise that resolves to the response data.\n   */\n\n\n  getResponseDataFromContentType(response) {\n    return _asyncToGenerator(function* () {\n      let contentType = response.headers.get('Content-Type');\n\n      if (contentType === null) {\n        // Maintain existing functionality by calling text()\n        return response.text();\n      }\n\n      contentType = contentType.toLowerCase();\n\n      if (contentType.includes('application/json')) {\n        let data = yield response.text();\n\n        try {\n          data = JSON.parse(data);\n        } catch (_a) {// continue\n        }\n\n        return data;\n      } else if (contentType.includes('text/plain') || contentType.includes('text/html')) {\n        return response.text();\n      } else {\n        // If the content type is something not easily handled, just return the raw data (blob)\n        return response.blob();\n      }\n    })();\n  }\n\n}\n\nexports.Gaxios = Gaxios;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Gaxios","extend_1","require","https_1","node_fetch_1","querystring_1","is_stream_1","url_1","common_1","retry_1","https_proxy_agent_1","fetch","hasFetch","window","default","hasWindow","hasBuffer","Buffer","hasHeader","options","header","getHeader","toLowerCase","key","keys","headers","undefined","HttpsProxyAgent","loadProxy","_a","_b","_c","_d","proxy","process","env","HTTPS_PROXY","https_proxy","HTTP_PROXY","http_proxy","skipProxy","url","noProxyEnv","NO_PROXY","no_proxy","noProxyUrls","split","parsedURL","URL","find","startsWith","replace","hostname","endsWith","origin","getProxy","constructor","defaults","agentCache","Map","request","opts","validateOpts","_request","_defaultAdapter","fetchImpl","fetchImplementation","res","data","getResponseData","translateResponse","translatedResponse","adapter","bind","validateStatus","status","responseType","response","Promise","resolve","on","chunk","GaxiosError","e","err","message","shouldRetry","config","getRetryConfig","retryConfig","currentRetryAttempt","body","text","JSON","parse","arrayBuffer","blob","getResponseDataFromContentType","Error","baseUrl","baseURL","paramsSerializer","params","length","additionalQueryParams","slice","prefix","includes","maxContentLength","size","maxRedirects","follow","isFormData","FormData","readable","isBuffer","stringify","method","has","agent","get","cert","port","host","protocol","set","Agent","errorRedactor","defaultErrorRedactor","forEach","statusText","responseURL","contentType"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/gaxios/build/src/gaxios.js"],"sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Gaxios = void 0;\nconst extend_1 = __importDefault(require(\"extend\"));\nconst https_1 = require(\"https\");\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst querystring_1 = __importDefault(require(\"querystring\"));\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\nconst url_1 = require(\"url\");\nconst common_1 = require(\"./common\");\nconst retry_1 = require(\"./retry\");\nconst https_proxy_agent_1 = require(\"https-proxy-agent\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\nfunction hasWindow() {\n    return typeof window !== 'undefined' && !!window;\n}\nfunction hasFetch() {\n    return hasWindow() && !!window.fetch;\n}\nfunction hasBuffer() {\n    return typeof Buffer !== 'undefined';\n}\nfunction hasHeader(options, header) {\n    return !!getHeader(options, header);\n}\nfunction getHeader(options, header) {\n    header = header.toLowerCase();\n    for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {\n        if (header === key.toLowerCase()) {\n            return options.headers[key];\n        }\n    }\n    return undefined;\n}\nlet HttpsProxyAgent;\nfunction loadProxy() {\n    var _a, _b, _c, _d;\n    const proxy = ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.HTTPS_PROXY) ||\n        ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.https_proxy) ||\n        ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c.HTTP_PROXY) ||\n        ((_d = process === null || process === void 0 ? void 0 : process.env) === null || _d === void 0 ? void 0 : _d.http_proxy);\n    if (proxy) {\n        HttpsProxyAgent = https_proxy_agent_1.HttpsProxyAgent;\n    }\n    return proxy;\n}\nloadProxy();\nfunction skipProxy(url) {\n    var _a;\n    const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;\n    if (!noProxyEnv) {\n        return false;\n    }\n    const noProxyUrls = noProxyEnv.split(',');\n    const parsedURL = new url_1.URL(url);\n    return !!noProxyUrls.find(url => {\n        if (url.startsWith('*.') || url.startsWith('.')) {\n            url = url.replace(/^\\*\\./, '.');\n            return parsedURL.hostname.endsWith(url);\n        }\n        else {\n            return url === parsedURL.origin || url === parsedURL.hostname;\n        }\n    });\n}\n// Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\nfunction getProxy(url) {\n    // If there is a match between the no_proxy env variables and the url, then do not proxy\n    if (skipProxy(url)) {\n        return undefined;\n        // If there is not a match between the no_proxy env variables and the url, check to see if there should be a proxy\n    }\n    else {\n        return loadProxy();\n    }\n}\nclass Gaxios {\n    /**\n     * The Gaxios class is responsible for making HTTP requests.\n     * @param defaults The default set of options to be used for this instance.\n     */\n    constructor(defaults) {\n        this.agentCache = new Map();\n        this.defaults = defaults || {};\n    }\n    /**\n     * Perform an HTTP request with the given options.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async request(opts = {}) {\n        opts = this.validateOpts(opts);\n        return this._request(opts);\n    }\n    async _defaultAdapter(opts) {\n        const fetchImpl = opts.fetchImplementation || fetch;\n        const res = (await fetchImpl(opts.url, opts));\n        const data = await this.getResponseData(opts, res);\n        return this.translateResponse(opts, res, data);\n    }\n    /**\n     * Internal, retryable version of the `request` method.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n    async _request(opts = {}) {\n        try {\n            let translatedResponse;\n            if (opts.adapter) {\n                translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));\n            }\n            else {\n                translatedResponse = await this._defaultAdapter(opts);\n            }\n            if (!opts.validateStatus(translatedResponse.status)) {\n                if (opts.responseType === 'stream') {\n                    let response = '';\n                    await new Promise(resolve => {\n                        (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on('data', chunk => {\n                            response += chunk;\n                        });\n                        (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on('end', resolve);\n                    });\n                    translatedResponse.data = response;\n                }\n                throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n            }\n            return translatedResponse;\n        }\n        catch (e) {\n            const err = e instanceof common_1.GaxiosError\n                ? e\n                : new common_1.GaxiosError(e.message, opts, undefined, e);\n            const { shouldRetry, config } = await (0, retry_1.getRetryConfig)(err);\n            if (shouldRetry && config) {\n                err.config.retryConfig.currentRetryAttempt =\n                    config.retryConfig.currentRetryAttempt;\n                return this._request(err.config);\n            }\n            throw err;\n        }\n    }\n    async getResponseData(opts, res) {\n        switch (opts.responseType) {\n            case 'stream':\n                return res.body;\n            case 'json': {\n                let data = await res.text();\n                try {\n                    data = JSON.parse(data);\n                }\n                catch (_a) {\n                    // continue\n                }\n                return data;\n            }\n            case 'arraybuffer':\n                return res.arrayBuffer();\n            case 'blob':\n                return res.blob();\n            case 'text':\n                return res.text();\n            default:\n                return this.getResponseDataFromContentType(res);\n        }\n    }\n    /**\n     * Validates the options, and merges them with defaults.\n     * @param opts The original options passed from the client.\n     */\n    validateOpts(options) {\n        const opts = (0, extend_1.default)(true, {}, this.defaults, options);\n        if (!opts.url) {\n            throw new Error('URL is required.');\n        }\n        // baseUrl has been deprecated, remove in 2.0\n        const baseUrl = opts.baseUrl || opts.baseURL;\n        if (baseUrl) {\n            opts.url = baseUrl + opts.url;\n        }\n        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n        if (opts.params && Object.keys(opts.params).length > 0) {\n            let additionalQueryParams = opts.paramsSerializer(opts.params);\n            if (additionalQueryParams.startsWith('?')) {\n                additionalQueryParams = additionalQueryParams.slice(1);\n            }\n            const prefix = opts.url.includes('?') ? '&' : '?';\n            opts.url = opts.url + prefix + additionalQueryParams;\n        }\n        if (typeof options.maxContentLength === 'number') {\n            opts.size = options.maxContentLength;\n        }\n        if (typeof options.maxRedirects === 'number') {\n            opts.follow = options.maxRedirects;\n        }\n        opts.headers = opts.headers || {};\n        if (opts.data) {\n            const isFormData = typeof FormData === 'undefined'\n                ? false\n                : (opts === null || opts === void 0 ? void 0 : opts.data) instanceof FormData;\n            if (is_stream_1.default.readable(opts.data)) {\n                opts.body = opts.data;\n            }\n            else if (hasBuffer() && Buffer.isBuffer(opts.data)) {\n                // Do not attempt to JSON.stringify() a Buffer:\n                opts.body = opts.data;\n                if (!hasHeader(opts, 'Content-Type')) {\n                    opts.headers['Content-Type'] = 'application/json';\n                }\n            }\n            else if (typeof opts.data === 'object') {\n                // If www-form-urlencoded content type has been set, but data is\n                // provided as an object, serialize the content using querystring:\n                if (!isFormData) {\n                    if (getHeader(opts, 'content-type') ===\n                        'application/x-www-form-urlencoded') {\n                        opts.body = opts.paramsSerializer(opts.data);\n                    }\n                    else {\n                        // } else if (!(opts.data instanceof FormData)) {\n                        if (!hasHeader(opts, 'Content-Type')) {\n                            opts.headers['Content-Type'] = 'application/json';\n                        }\n                        opts.body = JSON.stringify(opts.data);\n                    }\n                }\n            }\n            else {\n                opts.body = opts.data;\n            }\n        }\n        opts.validateStatus = opts.validateStatus || this.validateStatus;\n        opts.responseType = opts.responseType || 'unknown';\n        if (!opts.headers['Accept'] && opts.responseType === 'json') {\n            opts.headers['Accept'] = 'application/json';\n        }\n        opts.method = opts.method || 'GET';\n        const proxy = getProxy(opts.url);\n        if (proxy) {\n            if (this.agentCache.has(proxy)) {\n                opts.agent = this.agentCache.get(proxy);\n            }\n            else {\n                // Proxy is being used in conjunction with mTLS.\n                if (opts.cert && opts.key) {\n                    const parsedURL = new url_1.URL(proxy);\n                    opts.agent = new HttpsProxyAgent({\n                        port: parsedURL.port,\n                        host: parsedURL.host,\n                        protocol: parsedURL.protocol,\n                        cert: opts.cert,\n                        key: opts.key,\n                    });\n                }\n                else {\n                    opts.agent = new HttpsProxyAgent(proxy);\n                }\n                this.agentCache.set(proxy, opts.agent);\n            }\n        }\n        else if (opts.cert && opts.key) {\n            // Configure client for mTLS:\n            if (this.agentCache.has(opts.key)) {\n                opts.agent = this.agentCache.get(opts.key);\n            }\n            else {\n                opts.agent = new https_1.Agent({\n                    cert: opts.cert,\n                    key: opts.key,\n                });\n                this.agentCache.set(opts.key, opts.agent);\n            }\n        }\n        if (typeof opts.errorRedactor !== 'function' &&\n            opts.errorRedactor !== false) {\n            opts.errorRedactor = common_1.defaultErrorRedactor;\n        }\n        return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n    validateStatus(status) {\n        return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n    paramsSerializer(params) {\n        return querystring_1.default.stringify(params);\n    }\n    translateResponse(opts, res, data) {\n        // headers need to be converted from a map to an obj\n        const headers = {};\n        res.headers.forEach((value, key) => {\n            headers[key] = value;\n        });\n        return {\n            config: opts,\n            data: data,\n            headers,\n            status: res.status,\n            statusText: res.statusText,\n            // XMLHttpRequestLike\n            request: {\n                responseURL: res.url,\n            },\n        };\n    }\n    /**\n     * Attempts to parse a response by looking at the Content-Type header.\n     * @param {FetchResponse} response the HTTP response.\n     * @returns {Promise<any>} a promise that resolves to the response data.\n     */\n    async getResponseDataFromContentType(response) {\n        let contentType = response.headers.get('Content-Type');\n        if (contentType === null) {\n            // Maintain existing functionality by calling text()\n            return response.text();\n        }\n        contentType = contentType.toLowerCase();\n        if (contentType.includes('application/json')) {\n            let data = await response.text();\n            try {\n                data = JSON.parse(data);\n            }\n            catch (_a) {\n                // continue\n            }\n            return data;\n        }\n        else if (contentType.includes('text/plain') ||\n            contentType.includes('text/html')) {\n            return response.text();\n        }\n        else {\n            // If the content type is something not easily handled, just return the raw data (blob)\n            return response.blob();\n        }\n    }\n}\nexports.Gaxios = Gaxios;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}