{"ast":null,"code":"\"use strict\";\n\nmodule.exports = codegen;\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\n\nfunction codegen(functionParams, functionName) {\n  /* istanbul ignore if */\n  if (typeof functionParams === \"string\") {\n    functionName = functionParams;\n    functionParams = undefined;\n  }\n\n  var body = [];\n  /**\r\n   * Appends code to the function's body or finishes generation.\r\n   * @typedef Codegen\r\n   * @type {function}\r\n   * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n   * @param {...*} [formatParams] Format parameters\r\n   * @returns {Codegen|Function} Itself or the generated function if finished\r\n   * @throws {Error} If format parameter counts do not match\r\n   */\n\n  function Codegen(formatStringOrScope) {\n    // note that explicit array handling below makes this ~50% faster\n    // finish the function\n    if (typeof formatStringOrScope !== \"string\") {\n      var source = toString();\n      if (codegen.verbose) console.log(\"codegen: \" + source); // eslint-disable-line no-console\n\n      source = \"return \" + source;\n\n      if (formatStringOrScope) {\n        var scopeKeys = Object.keys(formatStringOrScope),\n            scopeParams = new Array(scopeKeys.length + 1),\n            scopeValues = new Array(scopeKeys.length),\n            scopeOffset = 0;\n\n        while (scopeOffset < scopeKeys.length) {\n          scopeParams[scopeOffset] = scopeKeys[scopeOffset];\n          scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\n        }\n\n        scopeParams[scopeOffset] = source;\n        return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\n      }\n\n      return Function(source)(); // eslint-disable-line no-new-func\n    } // otherwise append to body\n\n\n    var formatParams = new Array(arguments.length - 1),\n        formatOffset = 0;\n\n    while (formatOffset < formatParams.length) formatParams[formatOffset] = arguments[++formatOffset];\n\n    formatOffset = 0;\n    formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\n      var value = formatParams[formatOffset++];\n\n      switch ($1) {\n        case \"d\":\n        case \"f\":\n          return String(Number(value));\n\n        case \"i\":\n          return String(Math.floor(value));\n\n        case \"j\":\n          return JSON.stringify(value);\n\n        case \"s\":\n          return String(value);\n      }\n\n      return \"%\";\n    });\n    if (formatOffset !== formatParams.length) throw Error(\"parameter count mismatch\");\n    body.push(formatStringOrScope);\n    return Codegen;\n  }\n\n  function toString(functionNameOverride) {\n    return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\n  }\n\n  Codegen.toString = toString;\n  return Codegen;\n}\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\n\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\n\n\ncodegen.verbose = false;","map":{"version":3,"names":["module","exports","codegen","functionParams","functionName","undefined","body","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","Array","length","scopeValues","scopeOffset","Function","apply","formatParams","arguments","formatOffset","replace","$0","$1","value","String","Number","Math","floor","JSON","stringify","Error","push","functionNameOverride","join"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/@protobufjs/codegen/index.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}