{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from 'src/environments/environment';\nimport { gptModels } from '../models/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../vision.service\";\nimport * as i2 from \"@angular/forms\";\nexport class CustomerSupportComponent {\n  constructor(googleVisionService) {\n    this.googleVisionService = googleVisionService;\n    this.chatConversation = [];\n    this.gptModels = gptModels;\n    this.promptText = '';\n    this.showSpinner = false;\n    this.selectedImage = null;\n    this.imageSrc = '';\n  }\n\n  ngOnInit() {}\n\n  checkResponse() {\n    this.pushChatContent(this.promptText, 'You', 'person');\n    this.invokeGPT();\n  }\n\n  pushChatContent(content, person, cssClass) {\n    const chatToPush = {\n      person: person,\n      response: content,\n      cssClass: cssClass\n    };\n    this.chatConversation.push(chatToPush);\n  }\n\n  getText(data) {\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n\n  invokeGPT() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        let requestData = {\n          model: 'text-davinci-003',\n          prompt: _this.promptText + ' por favor resuma la respuesta en 200 tokens y responda como un taller mecánico virtual especializado llamado AutoDoc IA.',\n          temperature: 0.95,\n          max_tokens: 300,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0\n        };\n        _this.showSpinner = true;\n        let apiResponse = yield openai.createCompletion(requestData);\n        _this.response = apiResponse.data;\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false; // Consider adjusting the error handling logic for your use case\n\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    console.log();\n\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onload = evt => {\n        this.selectedImage = evt.target.result;\n      };\n    }\n  }\n\n  detectObjects() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const imageData = reader.result;\n        this.googleVisionService.detectObjects(imageData).subscribe(response => {\n          this.detectionResults = response; // Aquí puedes procesar y mostrar los resultados en tu interfaz de usuario\n          // los datos de la respuesta estan en la variable detection results\n        }, error => {\n          console.error('Error al llamar a la API de Google Vision', error);\n        });\n      };\n\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n\n}\n\nCustomerSupportComponent.ɵfac = function CustomerSupportComponent_Factory(t) {\n  return new (t || CustomerSupportComponent)(i0.ɵɵdirectiveInject(i1.VisionService));\n};\n\nCustomerSupportComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CustomerSupportComponent,\n  selectors: [[\"app-customer-support\"]],\n  decls: 26,\n  vars: 1,\n  consts: [[\"href\", \"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css\", \"rel\", \"stylesheet\"], [1, \"relative\", \"min-h-screen\", \"flex\", \"items-center\", \"justify-center\", \"bg-gray-50\", \"py-12\", \"px-4\", \"sm:px-6\", \"lg:px-8\", \"bg-gray-500\", \"bg-no-repeat\", \"bg-cover\", \"relative\", \"items-center\", 2, \"background-image\", \"url(https://images.unsplash.com/photo-1621243804936-775306a8f2e3?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80)\"], [1, \"absolute\", \"bg-black\", \"opacity-60\", \"inset-0\", \"z-0\"], [1, \"sm:max-w-lg\", \"w-full\", \"p-10\", \"bg-white\", \"rounded-xl\", \"z-10\"], [1, \"text-center\"], [1, \"mt-5\", \"text-3xl\", \"font-bold\", \"text-gray-900\"], [1, \"mt-2\", \"text-sm\", \"text-gray-400\"], [\"action\", \"#\", \"method\", \"POST\", 1, \"mt-8\", \"space-y-3\"], [1, \"grid\", \"grid-cols-1\", \"space-y-2\"], [1, \"flex\", \"items-center\", \"justify-center\", \"w-full\"], [1, \"flex\", \"flex-col\", \"rounded-lg\", \"border-4\", \"border-dashed\", \"w-full\", \"h-60\", \"p-10\", \"group\", \"text-center\"], [1, \"h-full\", \"w-full\", \"text-center\", \"flex\", \"flex-col\", \"items-center\", \"justify-center\", \"items-center\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"fill\", \"none\", \"viewBox\", \"0 0 24 24\", \"stroke\", \"currentColor\", 1, \"w-10\", \"h-10\", \"text-blue-400\", \"group-hover:text-blue-600\"], [\"stroke-linecap\", \"round\", \"stroke-linejoin\", \"round\", \"stroke-width\", \"2\", \"d\", \"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"], [\"height\", \"200\", 3, \"src\"], [1, \"pointer-none\", \"text-gray-500\"], [\"type\", \"file\", 1, \"hidden\", 3, \"change\"], [1, \"text-sm\", \"text-gray-300\"], [1, \"my-5\", \"w-full\", \"flex\", \"justify-center\", \"bg-blue-500\", \"text-gray-100\", \"p-4\", \"rounded-full\", \"tracking-wide\", \"font-semibold\", \"focus:outline-none\", \"focus:shadow-outline\", \"hover:bg-blue-600\", \"shadow-lg\", \"cursor-pointer\", \"transition\", \"ease-in\", \"duration-300\", 3, \"click\"]],\n  template: function CustomerSupportComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"link\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\", 4)(5, \"h2\", 5);\n      i0.ɵɵtext(6, \" Selecci\\u00F3n de imagen! \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"p\", 6);\n      i0.ɵɵtext(8, \"Seleccione una imagen para analizar y obtener la soluci\\u00F3n al problema que representa.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"form\", 7)(10, \"div\", 8)(11, \"div\", 9)(12, \"label\", 10)(13, \"div\", 11);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(14, \"svg\", 12);\n      i0.ɵɵelement(15, \"path\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(16, \"img\", 14);\n      i0.ɵɵelementStart(17, \"p\", 15);\n      i0.ɵɵtext(18, \"Seleccione una imagen desde su computadora.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"input\", 16);\n      i0.ɵɵlistener(\"change\", function CustomerSupportComponent_Template_input_change_19_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(20, \"p\", 17)(21, \"span\");\n      i0.ɵɵtext(22, \"Tipo de arcivo soportado: Im\\u00E1genes\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(23, \"div\")(24, \"button\", 18);\n      i0.ɵɵlistener(\"click\", function CustomerSupportComponent_Template_button_click_24_listener() {\n        return ctx.detectObjects();\n      });\n      i0.ɵɵtext(25, \" Analizar Imagen \");\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"src\", ctx.selectedImage, i0.ɵɵsanitizeUrl);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm],\n  styles: [\".push-right[_ngcontent-%COMP%] {\\r\\n    margin-left: 90%;\\r\\n}\\r\\n\\r\\n.person[_ngcontent-%COMP%] {\\r\\n    font-style: italic;\\r\\n    font-weight: bold;\\r\\n    color: purple;\\r\\n}\\r\\n\\r\\n.bot[_ngcontent-%COMP%] {    \\r\\n    font-weight: bold; \\r\\n    color: darkgreen;\\r\\n}\\r\\n\\r\\n.frame-box[_ngcontent-%COMP%]{\\r\\n    border: dotted 2px orange; padding: 20px;\\r\\n    min-height: 400px;\\r\\n    max-height: 400px;\\r\\n    overflow-y: scroll\\r\\n}\\r\\n\\r\\n.padding[_ngcontent-%COMP%]{\\r\\n    padding: 5px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN1c3RvbWVyLXN1cHBvcnQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSx5QkFBeUIsRUFBRSxhQUFhO0lBQ3hDLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakI7QUFDSjs7QUFHQTtJQUNJLFlBQVk7QUFDaEIiLCJmaWxlIjoiY3VzdG9tZXItc3VwcG9ydC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnB1c2gtcmlnaHQge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDkwJTtcclxufVxyXG5cclxuLnBlcnNvbiB7XHJcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIGNvbG9yOiBwdXJwbGU7XHJcbn1cclxuXHJcbi5ib3QgeyAgICBcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkOyBcclxuICAgIGNvbG9yOiBkYXJrZ3JlZW47XHJcbn1cclxuXHJcbi5mcmFtZS1ib3h7XHJcbiAgICBib3JkZXI6IGRvdHRlZCAycHggb3JhbmdlOyBwYWRkaW5nOiAyMHB4O1xyXG4gICAgbWluLWhlaWdodDogNDAwcHg7XHJcbiAgICBtYXgtaGVpZ2h0OiA0MDBweDtcclxuICAgIG92ZXJmbG93LXk6IHNjcm9sbFxyXG59XHJcblxyXG5cclxuLnBhZGRpbmd7XHJcbiAgICBwYWRkaW5nOiA1cHg7XHJcbn0iXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["Configuration","OpenAIApi","environment","gptModels","CustomerSupportComponent","constructor","googleVisionService","ngOnInit","checkResponse","pushChatContent","promptText","invokeGPT","content","person","cssClass","chatToPush","response","chatConversation","push","getText","data","split","filter","f","length","undefined","configuration","apiKey","openai","requestData","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","showSpinner","apiResponse","createCompletion","error","console","status","message","onFileSelected","event","file","target","files","log","reader","FileReader","readAsDataURL","onload","evt","selectedImage","result","detectObjects","imageData","subscribe","detectionResults","i0","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\mario\\Desktop\\AutoDocIA\\src\\app\\customer-support\\customer-support.component.ts","C:\\Users\\mario\\Desktop\\AutoDocIA\\src\\app\\customer-support\\customer-support.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Configuration, OpenAIApi } from 'openai';\r\nimport { environment } from 'src/environments/environment';\r\nimport { gptModels } from '../models/constants';\r\nimport { ChatWithBot, ResponseModel } from '../models/gpt-response';\r\nimport { VisionService } from '../vision.service';\r\n\r\n@Component({\r\n  selector: 'app-customer-support',\r\n  templateUrl: './customer-support.component.html',\r\n  styleUrls: ['./customer-support.component.css']\r\n})\r\nexport class CustomerSupportComponent implements OnInit {\r\n  chatConversation: ChatWithBot[]=[];\r\n  response!: ResponseModel | undefined;\r\n  gptModels = gptModels\r\n  promptText = '';\r\n  showSpinner = false;\r\n\r\n  constructor(private googleVisionService: VisionService) { }\r\n\r\n  selectedImage: File | null = null;\r\n  imageSrc: string = '';\r\n  detectionResults: any;\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  checkResponse() {\r\n    this.pushChatContent(this.promptText,'You','person');\r\n    this.invokeGPT();\r\n  }\r\n\r\n\r\n  pushChatContent(content:string, person:string, cssClass:string) {\r\n    const chatToPush: ChatWithBot = { person:person, response:content, cssClass:cssClass};\r\n    this.chatConversation.push(chatToPush);\r\n  }\r\n\r\n\r\n  getText(data:string) {\r\n    return data.split('\\n').filter(f=>f.length>0);\r\n  }\r\n\r\n  async invokeGPT() {\r\n\r\n    if(this.promptText.length<2)\r\n    return;\r\n\r\n    try{\r\n      this.response =undefined;\r\n      let configuration = new Configuration({apiKey: environment.apiKey});\r\n      let openai = new OpenAIApi(configuration);\r\n\r\n      let requestData={\r\n        model: 'text-davinci-003',//'text-davinci-003',//\"text-curie-001\",\r\n        prompt: this.promptText + ' por favor resuma la respuesta en 200 tokens y responda como un taller mecánico virtual especializado llamado AutoDoc IA.',//this.generatePrompt(animal),\r\n        temperature: 0.95,\r\n        max_tokens: 300,\r\n        top_p: 1.0,\r\n        frequency_penalty: 0.0,\r\n        presence_penalty: 0.0,\r\n      };\r\n      this.showSpinner = true;\r\n      let apiResponse =  await openai.createCompletion(requestData);\r\n\r\n      this.response = apiResponse.data as ResponseModel;\r\n      this.showSpinner = false;\r\n    }catch(error:any) {\r\n      this.showSpinner = false;\r\n      // Consider adjusting the error handling logic for your use case\r\n      if (error.response) {\r\n        console.error(error.response.status, error.response.data);\r\n        \r\n      } else {\r\n        console.error(`Error with OpenAI API request: ${error.message}`);\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  onFileSelected(event: any) {\r\n    const file = event.target.files[0];\r\n    console.log();\r\n    \r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = (evt:any) =>{\r\n        this.selectedImage = evt.target.result;\r\n      }\r\n    }\r\n  }\r\n\r\n  detectObjects() {\r\n    if (this.selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const imageData = reader.result as string;\r\n        this.googleVisionService.detectObjects(imageData).subscribe(\r\n          (response) => {\r\n            this.detectionResults = response;\r\n            // Aquí puedes procesar y mostrar los resultados en tu interfaz de usuario\r\n            // los datos de la respuesta estan en la variable detection results\r\n          },\r\n          (error) => {\r\n            console.error('Error al llamar a la API de Google Vision', error);\r\n          }\r\n        );\r\n      };\r\n      reader.readAsDataURL(this.selectedImage);\r\n    }\r\n  }\r\n}\r\n","<link href=\"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css\" rel=\"stylesheet\">\r\n<div class=\"relative min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8 bg-gray-500 bg-no-repeat bg-cover relative items-center\"\r\n\tstyle=\"background-image: url(https://images.unsplash.com/photo-1621243804936-775306a8f2e3?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80);\">\r\n\t<div class=\"absolute bg-black opacity-60 inset-0 z-0\"></div>\r\n\t<div class=\"sm:max-w-lg w-full p-10 bg-white rounded-xl z-10\">\r\n\t\t<div class=\"text-center\">\r\n\t\t\t<h2 class=\"mt-5 text-3xl font-bold text-gray-900\">\r\n\t\t\t\tSelección de imagen!\r\n\t\t\t</h2>\r\n\t\t\t<p class=\"mt-2 text-sm text-gray-400\">Seleccione una imagen para analizar y obtener la solución al problema que representa.</p>\r\n\t\t</div>\r\n        <form class=\"mt-8 space-y-3\" action=\"#\" method=\"POST\">\r\n            <div class=\"grid grid-cols-1 space-y-2\">\r\n                <div class=\"flex items-center justify-center w-full\">\r\n                    <label class=\"flex flex-col rounded-lg border-4 border-dashed w-full h-60 p-10 group text-center\">\r\n                        <div class=\"h-full w-full text-center flex flex-col items-center justify-center items-center  \">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"w-10 h-10 text-blue-400 group-hover:text-blue-600\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\r\n                            </svg>\r\n                            <img [src]=\"selectedImage\" height=\"200\">\r\n                            <p class=\"pointer-none text-gray-500 \">Seleccione una imagen desde su computadora.</p>\r\n                        </div>\r\n                        <input type=\"file\" class=\"hidden\" (change)=\"onFileSelected($event)\">\r\n                    </label>\r\n                </div>\r\n            </div>\r\n                <p class=\"text-sm text-gray-300\">\r\n                    <span>Tipo de arcivo soportado: Imágenes</span>\r\n                </p><!--\r\n                <div class=\"form-group\"> \r\n                    <h3 style=\"font-family: 'Times New Roman', Times, serif; font-size: 25px;\">Contexto de imagen:</h3><hr>\r\n                    <textarea rows=\"3\" placeholder=\"Escriba aquí el contexto para obtener una respuesta más acertada...\" class=\"form-control\" cols=\"6\"></textarea>\r\n                </div>-->\r\n            <div>\r\n                <button (click)=\"detectObjects()\" class=\"my-5 w-full flex justify-center bg-blue-500 text-gray-100 p-4  rounded-full tracking-wide\r\n                            font-semibold  focus:outline-none focus:shadow-outline hover:bg-blue-600 shadow-lg cursor-pointer transition ease-in duration-300\">\r\n                Analizar Imagen\r\n            </button>\r\n            </div>\r\n        </form>\r\n\t</div>\r\n</div>\r\n\r\n"]},"metadata":{},"sourceType":"module"}