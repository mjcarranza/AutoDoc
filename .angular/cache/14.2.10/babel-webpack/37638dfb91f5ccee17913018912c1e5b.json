{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamProxy = exports.StreamType = void 0;\n\nconst googleError_1 = require(\"../googleError\"); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst duplexify = require('duplexify'); // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\n\n\nvar StreamType;\n\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType || (exports.StreamType = StreamType = {}));\n\nclass StreamProxy extends duplexify {\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type, callback, rest) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    });\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n    this._responseHasSent = false;\n    this.rest = rest;\n  }\n\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n\n\n  forwardEvents(stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    }); // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\n    // Emit the 'response' event if stream has no 'metadata' event.\n    // This avoids the stream swallowing the other events, such as 'end'.\n\n    stream.on('status', () => {\n      if (!this._responseHasSent) {\n        stream.emit('response', {\n          code: 200,\n          details: '',\n          message: 'OK'\n        });\n      }\n    }); // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata\n      });\n      this._responseHasSent = true;\n    });\n    stream.on('error', error => {\n      googleError_1.GoogleError.parseGRPCStatusDetails(error);\n    });\n  }\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n\n\n  setStream(apiCall, argument, retryRequestOptions = {}) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      if (this.rest) {\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.setReadable(stream);\n      } else {\n        const retryStream = retryRequest(null, {\n          objectMode: true,\n          request: () => {\n            if (this._isCancelCalled) {\n              if (this.stream) {\n                this.stream.cancel();\n              }\n\n              return;\n            }\n\n            const stream = apiCall(argument, this._callback);\n            this.stream = stream;\n            this.forwardEvents(stream);\n            return stream;\n          },\n          retries: retryRequestOptions.retries,\n          currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n          noResponseRetries: retryRequestOptions.noResponseRetries,\n          shouldRetryFn: retryRequestOptions.shouldRetryFn\n        });\n        this.setReadable(retryStream);\n      }\n\n      return;\n    }\n\n    const stream = apiCall(argument, this._callback);\n    this.stream = stream;\n    this.forwardEvents(stream);\n\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n\n}\n\nexports.StreamProxy = StreamProxy;","map":{"version":3,"names":["Object","defineProperty","exports","value","StreamProxy","StreamType","googleError_1","require","duplexify","retryRequest","constructor","type","callback","rest","undefined","objectMode","readable","CLIENT_STREAMING","writable","SERVER_STREAMING","_callback","_isCancelCalled","_responseHasSent","cancel","stream","forwardEvents","eventsToForward","forEach","event","on","emit","bind","code","details","message","metadata","error","GoogleError","parseGRPCStatusDetails","setStream","apiCall","argument","retryRequestOptions","setReadable","retryStream","request","retries","currentRetryAttempt","noResponseRetries","shouldRetryFn","setWritable","BIDI_STREAMING"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/streamingCalls/streaming.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamProxy = exports.StreamType = void 0;\nconst googleError_1 = require(\"../googleError\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = require('duplexify');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nvar StreamType;\n(function (StreamType) {\n    /** Client sends a single request, server streams responses. */\n    StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n    /** Client streams requests, server returns a single response. */\n    StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n    /** Both client and server stream objects. */\n    StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType || (exports.StreamType = StreamType = {}));\nclass StreamProxy extends duplexify {\n    /**\n     * StreamProxy is a proxy to gRPC-streaming method.\n     *\n     * @private\n     * @constructor\n     * @param {StreamType} type - the type of gRPC stream.\n     * @param {ApiCallback} callback - the callback for further API call.\n     */\n    constructor(type, callback, rest) {\n        super(undefined, undefined, {\n            objectMode: true,\n            readable: type !== StreamType.CLIENT_STREAMING,\n            writable: type !== StreamType.SERVER_STREAMING,\n        });\n        this.type = type;\n        this._callback = callback;\n        this._isCancelCalled = false;\n        this._responseHasSent = false;\n        this.rest = rest;\n    }\n    cancel() {\n        if (this.stream) {\n            this.stream.cancel();\n        }\n        else {\n            this._isCancelCalled = true;\n        }\n    }\n    /**\n     * Forward events from an API request stream to the user's stream.\n     * @param {Stream} stream - The API request stream.\n     */\n    forwardEvents(stream) {\n        const eventsToForward = ['metadata', 'response', 'status'];\n        eventsToForward.forEach(event => {\n            stream.on(event, this.emit.bind(this, event));\n        });\n        // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\n        // Emit the 'response' event if stream has no 'metadata' event.\n        // This avoids the stream swallowing the other events, such as 'end'.\n        stream.on('status', () => {\n            if (!this._responseHasSent) {\n                stream.emit('response', {\n                    code: 200,\n                    details: '',\n                    message: 'OK',\n                });\n            }\n        });\n        // We also want to supply the status data as 'response' event to support\n        // the behavior of google-cloud-node expects.\n        // see:\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n        // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n        stream.on('metadata', metadata => {\n            // Create a response object with succeeds.\n            // TODO: unify this logic with the decoration of gRPC response when it's\n            // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n            stream.emit('response', {\n                code: 200,\n                details: '',\n                message: 'OK',\n                metadata,\n            });\n            this._responseHasSent = true;\n        });\n        stream.on('error', error => {\n            googleError_1.GoogleError.parseGRPCStatusDetails(error);\n        });\n    }\n    /**\n     * Specifies the target stream.\n     * @param {ApiCall} apiCall - the API function to be called.\n     * @param {Object} argument - the argument to be passed to the apiCall.\n     */\n    setStream(apiCall, argument, retryRequestOptions = {}) {\n        if (this.type === StreamType.SERVER_STREAMING) {\n            if (this.rest) {\n                const stream = apiCall(argument, this._callback);\n                this.stream = stream;\n                this.setReadable(stream);\n            }\n            else {\n                const retryStream = retryRequest(null, {\n                    objectMode: true,\n                    request: () => {\n                        if (this._isCancelCalled) {\n                            if (this.stream) {\n                                this.stream.cancel();\n                            }\n                            return;\n                        }\n                        const stream = apiCall(argument, this._callback);\n                        this.stream = stream;\n                        this.forwardEvents(stream);\n                        return stream;\n                    },\n                    retries: retryRequestOptions.retries,\n                    currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n                    noResponseRetries: retryRequestOptions.noResponseRetries,\n                    shouldRetryFn: retryRequestOptions.shouldRetryFn,\n                });\n                this.setReadable(retryStream);\n            }\n            return;\n        }\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.forwardEvents(stream);\n        if (this.type === StreamType.CLIENT_STREAMING) {\n            this.setWritable(stream);\n        }\n        if (this.type === StreamType.BIDI_STREAMING) {\n            this.setReadable(stream);\n            this.setWritable(stream);\n        }\n        if (this._isCancelCalled && this.stream) {\n            this.stream.cancel();\n        }\n    }\n}\nexports.StreamProxy = StreamProxy;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}