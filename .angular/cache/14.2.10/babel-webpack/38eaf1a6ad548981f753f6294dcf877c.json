{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IamClient = void 0;\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst routingHeader = require(\"./routingHeader\");\n\nconst gapicConfig = require(\"./iam_policy_service_client_config.json\");\n\nconst fallback = require(\"./fallback\");\n\nlet version = require('../../package.json').version;\n\nconst jsonProtos = require(\"../protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\n\n\nclass IamClient {\n  constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {}\n    };\n    this.innerApiCalls = {};\n    this.gaxGrpc = gaxGrpc; // Ensure that options include the service address and port.\n\n    const opts = Object.assign({\n      servicePath: options.servicePath,\n      port: options.port,\n      clientConfig: options.clientConfig,\n      apiEndpoint: options.apiEndpoint,\n      fallback: options.fallback\n    }, options);\n    version = opts.fallback ? fallback.version : version;\n    opts.scopes = this.constructor.scopes; // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos); // Put together the default options sent with requests.\n\n    this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.iamPolicyStub) {\n      return this.iamPolicyStub;\n    } // Put together the \"service stub\" for\n    // google.iam.v1.IAMPolicy.\n\n\n    this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.iam.v1.IAMPolicy') : this._protos.google.iam.v1.IAMPolicy, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const iamPolicyStubMethods = ['getIamPolicy', 'setIamPolicy', 'testIamPermissions'];\n\n    for (const methodName of iamPolicyStubMethods) {\n      const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n    }\n\n    return this.iamPolicyStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'cloudkms.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'cloudkms.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloudkms'];\n  }\n\n  getProjectId(callback) {\n    if (this.auth && 'getProjectId' in this.auth) {\n      return this.auth.getProjectId(callback);\n    }\n\n    if (callback) {\n      callback(new Error('Cannot determine project ID.'));\n    } else {\n      return Promise.reject('Cannot determine project ID.');\n    }\n  }\n\n  getIamPolicy(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.getIamPolicy(request, options, callback);\n  }\n\n  setIamPolicy(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.setIamPolicy(request, options, callback);\n  }\n\n  testIamPermissions(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.testIamPermissions(request, options, callback);\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.iamPolicyStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.IamClient = IamClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","IamClient","createApiCall_1","require","routingHeader","gapicConfig","fallback","version","jsonProtos","constructor","gaxGrpc","options","_terminated","descriptors","page","stream","longrunning","innerApiCalls","opts","assign","servicePath","port","clientConfig","apiEndpoint","scopes","_opts","auth","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","_defaults","constructSettings","join","initialize","iamPolicyStub","createStub","lookupService","google","iam","v1","IAMPolicy","iamPolicyStubMethods","methodName","innerCallPromise","then","stub","args","Promise","reject","func","apply","err","createApiCall","getProjectId","callback","Error","getIamPolicy","request","optionsOrCallback","Function","undefined","otherArgs","headers","fromParams","resource","setIamPolicy","testIamPermissions","close","resolve"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/iamService.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IamClient = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst gapicConfig = require(\"./iam_policy_service_client_config.json\");\nconst fallback = require(\"./fallback\");\nlet version = require('../../package.json').version;\nconst jsonProtos = require(\"../protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\nclass IamClient {\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        this._terminated = false;\n        this.descriptors = { page: {}, stream: {}, longrunning: {} };\n        this.innerApiCalls = {};\n        this.gaxGrpc = gaxGrpc;\n        // Ensure that options include the service address and port.\n        const opts = Object.assign({\n            servicePath: options.servicePath,\n            port: options.port,\n            clientConfig: options.clientConfig,\n            apiEndpoint: options.apiEndpoint,\n            fallback: options.fallback,\n        }, options);\n        version = opts.fallback ? fallback.version : version;\n        opts.scopes = this.constructor.scopes;\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.iamPolicyStub) {\n            return this.iamPolicyStub;\n        }\n        // Put together the \"service stub\" for\n        // google.iam.v1.IAMPolicy.\n        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.iam.v1.IAMPolicy')\n            : this._protos.google.iam.v1.IAMPolicy, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const iamPolicyStubMethods = [\n            'getIamPolicy',\n            'setIamPolicy',\n            'testIamPermissions',\n        ];\n        for (const methodName of iamPolicyStubMethods) {\n            const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n        }\n        return this.iamPolicyStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloudkms',\n        ];\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    getIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.getIamPolicy(request, options, callback);\n    }\n    setIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.setIamPolicy(request, options, callback);\n    }\n    testIamPermissions(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.testIamPermissions(request, options, callback);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.iamPolicyStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.IamClient = IamClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}