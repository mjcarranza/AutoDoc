{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\n\nconst status_1 = require(\"./status\");\n\nconst protobuf = require(\"protobufjs\");\n\nconst serializer = require(\"proto3-json-serializer\");\n\nconst fallback_1 = require(\"./fallback\");\n\nclass GoogleError extends Error {\n  // Parse details field in google.rpc.status wire over gRPC medatadata.\n  // Promote google.rpc.ErrorInfo if exist.\n  static parseGRPCStatusDetails(err) {\n    const decoder = new GoogleErrorDecoder();\n\n    try {\n      if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n        const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          err.statusDetails = statusDetailsObj.details;\n        }\n\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          err.reason = statusDetailsObj.errorInfo.reason;\n          err.domain = statusDetailsObj.errorInfo.domain;\n          err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      }\n    } catch (decodeErr) {// ignoring the error\n    }\n\n    return err;\n  } // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static parseHttpError(json) {\n    if (Array.isArray(json)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      json = json.find(obj => {\n        return 'error' in obj;\n      });\n    } // fallback logic.\n    // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n    // google error mapping: https://cloud.google.com/apis/design/errors\n    // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n\n\n    if (!json['error']) {\n      json['error'] = {};\n      Object.keys(json).filter(key => key !== 'error').forEach(key => {\n        json['error'][key] = json[key];\n        delete json[key];\n      });\n    }\n\n    const decoder = new GoogleErrorDecoder();\n    const proto3Error = decoder.decodeHTTPError(json['error']);\n    const error = Object.assign(new GoogleError(json['error']['message']), proto3Error); // Map Http Status Code to gRPC Status Code\n\n    if (json['error']['code']) {\n      error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\n    } else {\n      // If error code is absent, proto3 message default value is 0. We should\n      // keep error code as undefined.\n      delete error.code;\n    } // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n    // Rename \"details\" to \"statusDetails\".\n\n\n    if (error.details) {\n      try {\n        const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n\n        if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {\n          error.statusDetails = statusDetailsObj.details;\n        }\n\n        if (statusDetailsObj && statusDetailsObj.errorInfo) {\n          error.reason = statusDetailsObj.errorInfo.reason;\n          error.domain = statusDetailsObj.errorInfo.domain; // error.metadata has been occupied for gRPC metadata, so we use\n          // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n          // consistency with gRPC ErrorInfo metadata field name.\n\n          error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n        }\n      } catch (decodeErr) {// ignoring the error\n      }\n    }\n\n    return error;\n  }\n\n}\n\nexports.GoogleError = GoogleError;\n\nclass GoogleErrorDecoder {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const errorProtoJson = require('../../build/protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n  }\n\n  decodeProtobufAny(anyValue) {\n    const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n    if (!match) {\n      throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n    }\n\n    const typeName = match[1];\n    const type = this.root.lookupType(typeName);\n\n    if (!type) {\n      throw new Error(`Cannot lookup type ${typeName}`);\n    }\n\n    return type.decode(anyValue.value);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n\n  decodeRpcStatus(buffer) {\n    const uint8array = new Uint8Array(buffer);\n    const status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n    // which need a special treatment\n\n    const details = [];\n    let errorInfo;\n\n    for (const detail of status.details) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n\n    const result = {\n      code: status.code,\n      message: status.message,\n      statusDetails: details,\n      reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n      domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n      errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata\n    };\n    return result;\n  } // Construct an Error from a StatusObject.\n  // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n\n\n  callErrorFromStatus(status) {\n    status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n    return Object.assign(new GoogleError(status.message), status);\n  } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n  // and puts it into the object similar to gRPC ServiceError object.\n\n\n  decodeErrorFromBuffer(buffer) {\n    return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n  } // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n\n\n  decodeGRPCStatusDetails(bufferArr) {\n    const details = [];\n    let errorInfo;\n    bufferArr.forEach(buffer => {\n      const uint8array = new Uint8Array(buffer);\n      const rpcStatus = this.statusType.decode(uint8array);\n\n      for (const detail of rpcStatus.details) {\n        try {\n          const decodedDetail = this.decodeProtobufAny(detail);\n          details.push(decodedDetail);\n\n          if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n            errorInfo = decodedDetail;\n          }\n        } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n        }\n      }\n    });\n    const result = {\n      details,\n      errorInfo\n    };\n    return result;\n  } // Decodes http error which is an instance of google.rpc.Status.\n\n\n  decodeHTTPError(json) {\n    const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n\n    if (!errorMessage) {\n      throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n    }\n\n    return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n  } // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n\n\n  decodeHttpStatusDetails(rawDetails) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const details = [];\n    let errorInfo;\n\n    for (const detail of rawDetails) {\n      try {\n        const decodedDetail = this.decodeProtobufAny(detail);\n        details.push(decodedDetail);\n\n        if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n          errorInfo = decodedDetail;\n        }\n      } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n      }\n    }\n\n    return {\n      details,\n      errorInfo\n    };\n  }\n\n}\n\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":{"version":3,"names":["Object","defineProperty","exports","value","GoogleErrorDecoder","GoogleError","status_1","require","protobuf","serializer","fallback_1","Error","parseGRPCStatusDetails","err","decoder","metadata","get","statusDetailsObj","decodeGRPCStatusDetails","details","length","statusDetails","errorInfo","reason","domain","errorInfoMetadata","decodeErr","parseHttpError","json","Array","isArray","find","obj","keys","filter","key","forEach","proto3Error","decodeHTTPError","error","assign","code","rpcCodeFromHttpStatusCode","decodeHttpStatusDetails","constructor","errorProtoJson","root","Root","fromJSON","anyType","lookupType","statusType","decodeProtobufAny","anyValue","match","type_url","typeName","type","decode","decodeRpcStatus","buffer","uint8array","Uint8Array","status","detail","decodedDetail","push","result","message","callErrorFromStatus","Status","decodeErrorFromBuffer","bufferArr","rpcStatus","errorMessage","fromProto3JSON","toObject","defaultToObjectOptions","rawDetails"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/googleError.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\nconst status_1 = require(\"./status\");\nconst protobuf = require(\"protobufjs\");\nconst serializer = require(\"proto3-json-serializer\");\nconst fallback_1 = require(\"./fallback\");\nclass GoogleError extends Error {\n    // Parse details field in google.rpc.status wire over gRPC medatadata.\n    // Promote google.rpc.ErrorInfo if exist.\n    static parseGRPCStatusDetails(err) {\n        const decoder = new GoogleErrorDecoder();\n        try {\n            if (err.metadata && err.metadata.get('grpc-status-details-bin')) {\n                const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get('grpc-status-details-bin'));\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    err.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    err.reason = statusDetailsObj.errorInfo.reason;\n                    err.domain = statusDetailsObj.errorInfo.domain;\n                    err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n        }\n        catch (decodeErr) {\n            // ignoring the error\n        }\n        return err;\n    }\n    // Parse http JSON error and promote google.rpc.ErrorInfo if exist.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static parseHttpError(json) {\n        if (Array.isArray(json)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            json = json.find((obj) => {\n                return 'error' in obj;\n            });\n        }\n        // fallback logic.\n        // related issue: https://github.com/googleapis/gax-nodejs/issues/1303\n        // google error mapping: https://cloud.google.com/apis/design/errors\n        // if input json doesn't have 'error' fields, wrap the whole object with 'error' field\n        if (!json['error']) {\n            json['error'] = {};\n            Object.keys(json)\n                .filter(key => key !== 'error')\n                .forEach(key => {\n                json['error'][key] = json[key];\n                delete json[key];\n            });\n        }\n        const decoder = new GoogleErrorDecoder();\n        const proto3Error = decoder.decodeHTTPError(json['error']);\n        const error = Object.assign(new GoogleError(json['error']['message']), proto3Error);\n        // Map Http Status Code to gRPC Status Code\n        if (json['error']['code']) {\n            error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json['error']['code']);\n        }\n        else {\n            // If error code is absent, proto3 message default value is 0. We should\n            // keep error code as undefined.\n            delete error.code;\n        }\n        // Keep consistency with gRPC statusDetails fields. gRPC details has been occupied before.\n        // Rename \"details\" to \"statusDetails\".\n        if (error.details) {\n            try {\n                const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);\n                if (statusDetailsObj &&\n                    statusDetailsObj.details &&\n                    statusDetailsObj.details.length > 0) {\n                    error.statusDetails = statusDetailsObj.details;\n                }\n                if (statusDetailsObj && statusDetailsObj.errorInfo) {\n                    error.reason = statusDetailsObj.errorInfo.reason;\n                    error.domain = statusDetailsObj.errorInfo.domain;\n                    // error.metadata has been occupied for gRPC metadata, so we use\n                    // errorInfoMetadata to represent ErrorInfo' metadata field. Keep\n                    // consistency with gRPC ErrorInfo metadata field name.\n                    error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;\n                }\n            }\n            catch (decodeErr) {\n                // ignoring the error\n            }\n        }\n        return error;\n    }\n}\nexports.GoogleError = GoogleError;\nclass GoogleErrorDecoder {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const errorProtoJson = require('../../build/protos/status.json');\n        this.root = protobuf.Root.fromJSON(errorProtoJson);\n        this.anyType = this.root.lookupType('google.protobuf.Any');\n        this.statusType = this.root.lookupType('google.rpc.Status');\n    }\n    decodeProtobufAny(anyValue) {\n        const match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n        if (!match) {\n            throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);\n        }\n        const typeName = match[1];\n        const type = this.root.lookupType(typeName);\n        if (!type) {\n            throw new Error(`Cannot lookup type ${typeName}`);\n        }\n        return type.decode(anyValue.value);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n    decodeRpcStatus(buffer) {\n        const uint8array = new Uint8Array(buffer);\n        const status = this.statusType.decode(uint8array);\n        // google.rpc.Status contains an array of google.protobuf.Any\n        // which need a special treatment\n        const details = [];\n        let errorInfo;\n        for (const detail of status.details) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        const result = {\n            code: status.code,\n            message: status.message,\n            statusDetails: details,\n            reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,\n            domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,\n            errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata,\n        };\n        return result;\n    }\n    // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79\n    callErrorFromStatus(status) {\n        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;\n        return Object.assign(new GoogleError(status.message), status);\n    }\n    // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n    decodeErrorFromBuffer(buffer) {\n        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    }\n    // Decodes gRPC metadata error details which is an instance of google.rpc.Status.\n    decodeGRPCStatusDetails(bufferArr) {\n        const details = [];\n        let errorInfo;\n        bufferArr.forEach(buffer => {\n            const uint8array = new Uint8Array(buffer);\n            const rpcStatus = this.statusType.decode(uint8array);\n            for (const detail of rpcStatus.details) {\n                try {\n                    const decodedDetail = this.decodeProtobufAny(detail);\n                    details.push(decodedDetail);\n                    if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                        errorInfo = decodedDetail;\n                    }\n                }\n                catch (err) {\n                    // cannot decode detail, likely because of the unknown type - just skip it\n                }\n            }\n        });\n        const result = {\n            details,\n            errorInfo,\n        };\n        return result;\n    }\n    // Decodes http error which is an instance of google.rpc.Status.\n    decodeHTTPError(json) {\n        const errorMessage = serializer.fromProto3JSON(this.statusType, json);\n        if (!errorMessage) {\n            throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);\n        }\n        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);\n    }\n    // Decodes http error details which is an instance of Array<google.protobuf.Any>.\n    decodeHttpStatusDetails(rawDetails) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const details = [];\n        let errorInfo;\n        for (const detail of rawDetails) {\n            try {\n                const decodedDetail = this.decodeProtobufAny(detail);\n                details.push(decodedDetail);\n                if (detail.type_url === 'type.googleapis.com/google.rpc.ErrorInfo') {\n                    errorInfo = decodedDetail;\n                }\n            }\n            catch (err) {\n                // cannot decode detail, likely because of the unknown type - just skip it\n            }\n        }\n        return { details, errorInfo };\n    }\n}\nexports.GoogleErrorDecoder = GoogleErrorDecoder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}