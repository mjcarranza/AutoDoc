{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global window */\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserCrypto = void 0; // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nconst base64js = require(\"base64-js\");\n\nconst crypto_1 = require(\"../crypto\");\n\nclass BrowserCrypto {\n  constructor() {\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n    }\n  }\n\n  sha256DigestBase64(str) {\n    return _asyncToGenerator(function* () {\n      // SubtleCrypto digest() method is async, so we must make\n      // this method async as well.\n      // To calculate SHA256 digest using SubtleCrypto, we first\n      // need to convert an input string to an ArrayBuffer:\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      const inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n      const outputBuffer = yield window.crypto.subtle.digest('SHA-256', inputBuffer);\n      return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    })();\n  }\n\n  randomBytesBase64(count) {\n    const array = new Uint8Array(count);\n    window.crypto.getRandomValues(array);\n    return base64js.fromByteArray(array);\n  }\n\n  static padBase64(base64) {\n    // base64js requires padding, so let's add some '='\n    while (base64.length % 4 !== 0) {\n      base64 += '=';\n    }\n\n    return base64;\n  }\n\n  verify(pubkey, data, signature) {\n    return _asyncToGenerator(function* () {\n      const algo = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: {\n          name: 'SHA-256'\n        }\n      }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n      const dataArray = new TextEncoder().encode(data);\n      const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n      const cryptoKey = yield window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']); // SubtleCrypto's verify method is async so we must make\n      // this method async as well.\n\n      const result = yield window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n      return result;\n    })();\n  }\n\n  sign(privateKey, data) {\n    return _asyncToGenerator(function* () {\n      const algo = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: {\n          name: 'SHA-256'\n        }\n      }; // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n      const dataArray = new TextEncoder().encode(data);\n      const cryptoKey = yield window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']); // SubtleCrypto's sign method is async so we must make\n      // this method async as well.\n\n      const result = yield window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n      return base64js.fromByteArray(new Uint8Array(result));\n    })();\n  }\n\n  decodeBase64StringUtf8(base64) {\n    const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n    const result = new TextDecoder().decode(uint8array);\n    return result;\n  }\n\n  encodeBase64StringUtf8(text) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const uint8array = new TextEncoder().encode(text);\n    const result = base64js.fromByteArray(uint8array);\n    return result;\n  }\n  /**\n   * Computes the SHA-256 hash of the provided string.\n   * @param str The plain text string to hash.\n   * @return A promise that resolves with the SHA-256 hash of the provided\n   *   string in hexadecimal encoding.\n   */\n\n\n  sha256DigestHex(str) {\n    return _asyncToGenerator(function* () {\n      // SubtleCrypto digest() method is async, so we must make\n      // this method async as well.\n      // To calculate SHA256 digest using SubtleCrypto, we first\n      // need to convert an input string to an ArrayBuffer:\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      const inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n      const outputBuffer = yield window.crypto.subtle.digest('SHA-256', inputBuffer);\n      return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);\n    })();\n  }\n  /**\n   * Computes the HMAC hash of a message using the provided crypto key and the\n   * SHA-256 algorithm.\n   * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n   * @param msg The plain text message.\n   * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n   *   format.\n   */\n\n\n  signWithHmacSha256(key, msg) {\n    return _asyncToGenerator(function* () {\n      // Convert key, if provided in ArrayBuffer format, to string.\n      const rawKey = typeof key === 'string' ? key : String.fromCharCode(...new Uint16Array(key)); // eslint-disable-next-line node/no-unsupported-features/node-builtins\n\n      const enc = new TextEncoder();\n      const cryptoKey = yield window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n        name: 'HMAC',\n        hash: {\n          name: 'SHA-256'\n        }\n      }, false, ['sign']);\n      return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n    })();\n  }\n\n}\n\nexports.BrowserCrypto = BrowserCrypto;","map":{"version":3,"names":["Object","defineProperty","exports","value","BrowserCrypto","base64js","require","crypto_1","constructor","window","crypto","undefined","subtle","Error","sha256DigestBase64","str","inputBuffer","TextEncoder","encode","outputBuffer","digest","fromByteArray","Uint8Array","randomBytesBase64","count","array","getRandomValues","padBase64","base64","length","verify","pubkey","data","signature","algo","name","hash","dataArray","signatureArray","toByteArray","cryptoKey","importKey","result","sign","privateKey","decodeBase64StringUtf8","uint8array","TextDecoder","decode","encodeBase64StringUtf8","text","sha256DigestHex","fromArrayBufferToHex","signWithHmacSha256","key","msg","rawKey","String","fromCharCode","Uint16Array","enc"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-auth-library/build/src/crypto/browser/crypto.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\nconst crypto_1 = require(\"../crypto\");\nclass BrowserCrypto {\n    constructor() {\n        if (typeof window === 'undefined' ||\n            window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while (base64.length % 4 !== 0) {\n            base64 += '=';\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        // Convert key, if provided in ArrayBuffer format, to string.\n        const rawKey = typeof key === 'string'\n            ? key\n            : String.fromCharCode(...new Uint16Array(key));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const enc = new TextEncoder();\n        const cryptoKey = await window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n            name: 'HMAC',\n            hash: {\n                name: 'SHA-256',\n            },\n        }, false, ['sign']);\n        return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}