{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsClient = void 0;\n\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\n\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\n\n\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiates an AwsClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid AWS credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super(options, additionalOptions);\n    this.environmentId = options.credential_source.environment_id; // This is only required if the AWS region is not available in the\n    // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n\n    this.regionUrl = options.credential_source.region_url; // This is only required if AWS security credentials are not available in\n    // environment variables.\n\n    this.securityCredentialsUrl = options.credential_source.url;\n    this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;\n    this.imdsV2SessionTokenUrl = options.credential_source.imdsv2_session_token_url;\n    this.awsRequestSigner = null;\n    this.region = '';\n    this.credentialSourceType = 'aws'; // Data validators.\n\n    this.validateEnvironmentId();\n  }\n\n  validateEnvironmentId() {\n    var _a;\n\n    const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n\n    if (!match || !this.regionalCredVerificationUrl) {\n      throw new Error('No valid AWS \"credential_source\" provided');\n    } else if (parseInt(match[2], 10) !== 1) {\n      throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n    }\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this uses a serialized AWS signed request to the STS GetCallerIdentity\n   * endpoint.\n   * The logic is summarized as:\n   * 1. If imdsv2_session_token_url is provided in the credential source, then\n   *    fetch the aws session token and include it in the headers of the\n   *    metadata requests. This is a requirement for IDMSv2 but optional\n   *    for IDMSv1.\n   * 2. Retrieve AWS region from availability-zone.\n   * 3a. Check AWS credentials in environment variables. If not found, get\n   *     from security-credentials endpoint.\n   * 3b. Get AWS credentials from security-credentials endpoint. In order\n   *     to retrieve this, the AWS role needs to be determined by calling\n   *     security-credentials endpoint without any argument. Then the\n   *     credentials can be retrieved via: security-credentials/role_name\n   * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n   * 5. Inject x-goog-cloud-target-resource into header and serialize the\n   *    signed request. This will be the subject-token to pass to GCP STS.\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  retrieveSubjectToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Initialize AWS request signer if not already initialized.\n      if (!_this.awsRequestSigner) {\n        const metadataHeaders = {}; // Only retrieve the IMDSv2 session token if both the security credentials and region are\n        // not retrievable through the environment.\n        // The credential config contains all the URLs by default but clients may be running this\n        // where the metadata server is not available and returning the credentials through the environment.\n        // Removing this check may break them.\n\n        if (_this.shouldUseMetadataServer() && _this.imdsV2SessionTokenUrl) {\n          metadataHeaders['x-aws-ec2-metadata-token'] = yield _this.getImdsV2SessionToken();\n        }\n\n        _this.region = yield _this.getAwsRegion(metadataHeaders);\n        _this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner( /*#__PURE__*/_asyncToGenerator(function* () {\n          // Check environment variables for permanent credentials first.\n          // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n          if (_this.securityCredentialsFromEnv) {\n            return _this.securityCredentialsFromEnv;\n          } // Since the role on a VM can change, we don't need to cache it.\n\n\n          const roleName = yield _this.getAwsRoleName(metadataHeaders); // Temporary credentials typically last for several hours.\n          // Expiration is returned in response.\n          // Consider future optimization of this logic to cache AWS tokens\n          // until their natural expiration.\n\n          const awsCreds = yield _this.getAwsSecurityCredentials(roleName, metadataHeaders);\n          return {\n            accessKeyId: awsCreds.AccessKeyId,\n            secretAccessKey: awsCreds.SecretAccessKey,\n            token: awsCreds.Token\n          };\n        }), _this.region);\n      } // Generate signed request to AWS STS GetCallerIdentity API.\n      // Use the required regional endpoint. Otherwise, the request will fail.\n\n\n      const options = yield _this.awsRequestSigner.getRequestOptions({\n        url: _this.regionalCredVerificationUrl.replace('{region}', _this.region),\n        method: 'POST'\n      }); // The GCP STS endpoint expects the headers to be formatted as:\n      // [\n      //   {key: 'x-amz-date', value: '...'},\n      //   {key: 'Authorization', value: '...'},\n      //   ...\n      // ]\n      // And then serialized as:\n      // encodeURIComponent(JSON.stringify({\n      //   url: '...',\n      //   method: 'POST',\n      //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n      // }))\n\n      const reformattedHeader = [];\n      const extendedHeaders = Object.assign({\n        // The full, canonical resource name of the workload identity pool\n        // provider, with or without the HTTPS prefix.\n        // Including this header as part of the signature is recommended to\n        // ensure data integrity.\n        'x-goog-cloud-target-resource': _this.audience\n      }, options.headers); // Reformat header to GCP STS expected format.\n\n      for (const key in extendedHeaders) {\n        reformattedHeader.push({\n          key,\n          value: extendedHeaders[key]\n        });\n      } // Serialize the reformatted signed request.\n\n\n      return encodeURIComponent(JSON.stringify({\n        url: options.url,\n        method: options.method,\n        headers: reformattedHeader\n      }));\n    })();\n  }\n  /**\n   * @return A promise that resolves with the IMDSv2 Session Token.\n   */\n\n\n  getImdsV2SessionToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const opts = {\n        url: _this2.imdsV2SessionTokenUrl,\n        method: 'PUT',\n        responseType: 'text',\n        headers: {\n          'x-aws-ec2-metadata-token-ttl-seconds': '300'\n        }\n      };\n      const response = yield _this2.transporter.request(opts);\n      return response.data;\n    })();\n  }\n  /**\n   * @param headers The headers to be used in the metadata request.\n   * @return A promise that resolves with the current AWS region.\n   */\n\n\n  getAwsRegion(headers) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Priority order for region determination:\n      // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n      if (_this3.regionFromEnv) {\n        return _this3.regionFromEnv;\n      }\n\n      if (!_this3.regionUrl) {\n        throw new Error('Unable to determine AWS region due to missing ' + '\"options.credential_source.region_url\"');\n      }\n\n      const opts = {\n        url: _this3.regionUrl,\n        method: 'GET',\n        responseType: 'text',\n        headers: headers\n      };\n      const response = yield _this3.transporter.request(opts); // Remove last character. For example, if us-east-2b is returned,\n      // the region would be us-east-2.\n\n      return response.data.substr(0, response.data.length - 1);\n    })();\n  }\n  /**\n   * @param headers The headers to be used in the metadata request.\n   * @return A promise that resolves with the assigned role to the current\n   *   AWS VM. This is needed for calling the security-credentials endpoint.\n   */\n\n\n  getAwsRoleName(headers) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this4.securityCredentialsUrl) {\n        throw new Error('Unable to determine AWS role name due to missing ' + '\"options.credential_source.url\"');\n      }\n\n      const opts = {\n        url: _this4.securityCredentialsUrl,\n        method: 'GET',\n        responseType: 'text',\n        headers: headers\n      };\n      const response = yield _this4.transporter.request(opts);\n      return response.data;\n    })();\n  }\n  /**\n   * Retrieves the temporary AWS credentials by calling the security-credentials\n   * endpoint as specified in the `credential_source` object.\n   * @param roleName The role attached to the current VM.\n   * @param headers The headers to be used in the metadata request.\n   * @return A promise that resolves with the temporary AWS credentials\n   *   needed for creating the GetCallerIdentity signed request.\n   */\n\n\n  getAwsSecurityCredentials(roleName, headers) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this5.transporter.request({\n        url: `${_this5.securityCredentialsUrl}/${roleName}`,\n        responseType: 'json',\n        headers: headers\n      });\n      return response.data;\n    })();\n  }\n\n  shouldUseMetadataServer() {\n    // The metadata server must be used when either the AWS region or AWS security\n    // credentials cannot be retrieved through their defined environment variables.\n    return !this.regionFromEnv || !this.securityCredentialsFromEnv;\n  }\n\n  get regionFromEnv() {\n    // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n    // Only one is required.\n    return process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'] || null;\n  }\n\n  get securityCredentialsFromEnv() {\n    // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n    if (process.env['AWS_ACCESS_KEY_ID'] && process.env['AWS_SECRET_ACCESS_KEY']) {\n      return {\n        accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n        secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n        token: process.env['AWS_SESSION_TOKEN']\n      };\n    }\n\n    return null;\n  }\n\n}\n\nexports.AwsClient = AwsClient;\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';","map":{"version":3,"names":["Object","defineProperty","exports","value","AwsClient","awsrequestsigner_1","require","baseexternalclient_1","BaseExternalAccountClient","constructor","options","additionalOptions","environmentId","credential_source","environment_id","regionUrl","region_url","securityCredentialsUrl","url","regionalCredVerificationUrl","regional_cred_verification_url","imdsV2SessionTokenUrl","imdsv2_session_token_url","awsRequestSigner","region","credentialSourceType","validateEnvironmentId","_a","match","Error","parseInt","retrieveSubjectToken","metadataHeaders","shouldUseMetadataServer","getImdsV2SessionToken","getAwsRegion","AwsRequestSigner","securityCredentialsFromEnv","roleName","getAwsRoleName","awsCreds","getAwsSecurityCredentials","accessKeyId","AccessKeyId","secretAccessKey","SecretAccessKey","token","Token","getRequestOptions","replace","method","reformattedHeader","extendedHeaders","assign","audience","headers","key","push","encodeURIComponent","JSON","stringify","opts","responseType","response","transporter","request","data","regionFromEnv","substr","length","process","env","AWS_EC2_METADATA_IPV4_ADDRESS","AWS_EC2_METADATA_IPV6_ADDRESS"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-auth-library/build/src/auth/awsclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super(options, additionalOptions);\n        this.environmentId = options.credential_source.environment_id;\n        // This is only required if the AWS region is not available in the\n        // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n        this.regionUrl = options.credential_source.region_url;\n        // This is only required if AWS security credentials are not available in\n        // environment variables.\n        this.securityCredentialsUrl = options.credential_source.url;\n        this.regionalCredVerificationUrl =\n            options.credential_source.regional_cred_verification_url;\n        this.imdsV2SessionTokenUrl =\n            options.credential_source.imdsv2_session_token_url;\n        this.awsRequestSigner = null;\n        this.region = '';\n        this.credentialSourceType = 'aws';\n        // Data validators.\n        this.validateEnvironmentId();\n    }\n    validateEnvironmentId() {\n        var _a;\n        const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        }\n        else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this uses a serialized AWS signed request to the STS GetCallerIdentity\n     * endpoint.\n     * The logic is summarized as:\n     * 1. If imdsv2_session_token_url is provided in the credential source, then\n     *    fetch the aws session token and include it in the headers of the\n     *    metadata requests. This is a requirement for IDMSv2 but optional\n     *    for IDMSv1.\n     * 2. Retrieve AWS region from availability-zone.\n     * 3a. Check AWS credentials in environment variables. If not found, get\n     *     from security-credentials endpoint.\n     * 3b. Get AWS credentials from security-credentials endpoint. In order\n     *     to retrieve this, the AWS role needs to be determined by calling\n     *     security-credentials endpoint without any argument. Then the\n     *     credentials can be retrieved via: security-credentials/role_name\n     * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n     * 5. Inject x-goog-cloud-target-resource into header and serialize the\n     *    signed request. This will be the subject-token to pass to GCP STS.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            const metadataHeaders = {};\n            // Only retrieve the IMDSv2 session token if both the security credentials and region are\n            // not retrievable through the environment.\n            // The credential config contains all the URLs by default but clients may be running this\n            // where the metadata server is not available and returning the credentials through the environment.\n            // Removing this check may break them.\n            if (this.shouldUseMetadataServer() && this.imdsV2SessionTokenUrl) {\n                metadataHeaders['x-aws-ec2-metadata-token'] =\n                    await this.getImdsV2SessionToken();\n            }\n            this.region = await this.getAwsRegion(metadataHeaders);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n                // Check environment variables for permanent credentials first.\n                // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n                if (this.securityCredentialsFromEnv) {\n                    return this.securityCredentialsFromEnv;\n                }\n                // Since the role on a VM can change, we don't need to cache it.\n                const roleName = await this.getAwsRoleName(metadataHeaders);\n                // Temporary credentials typically last for several hours.\n                // Expiration is returned in response.\n                // Consider future optimization of this logic to cache AWS tokens\n                // until their natural expiration.\n                const awsCreds = await this.getAwsSecurityCredentials(roleName, metadataHeaders);\n                return {\n                    accessKeyId: awsCreds.AccessKeyId,\n                    secretAccessKey: awsCreds.SecretAccessKey,\n                    token: awsCreds.Token,\n                };\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n            method: 'POST',\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            'x-goog-cloud-target-resource': this.audience,\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for (const key in extendedHeaders) {\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key],\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader,\n        }));\n    }\n    /**\n     * @return A promise that resolves with the IMDSv2 Session Token.\n     */\n    async getImdsV2SessionToken() {\n        const opts = {\n            url: this.imdsV2SessionTokenUrl,\n            method: 'PUT',\n            responseType: 'text',\n            headers: { 'x-aws-ec2-metadata-token-ttl-seconds': '300' },\n        };\n        const response = await this.transporter.request(opts);\n        return response.data;\n    }\n    /**\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the current AWS region.\n     */\n    async getAwsRegion(headers) {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (this.regionFromEnv) {\n            return this.regionFromEnv;\n        }\n        if (!this.regionUrl) {\n            throw new Error('Unable to determine AWS region due to missing ' +\n                '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            url: this.regionUrl,\n            method: 'GET',\n            responseType: 'text',\n            headers: headers,\n        };\n        const response = await this.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the assigned role to the current\n     *   AWS VM. This is needed for calling the security-credentials endpoint.\n     */\n    async getAwsRoleName(headers) {\n        if (!this.securityCredentialsUrl) {\n            throw new Error('Unable to determine AWS role name due to missing ' +\n                '\"options.credential_source.url\"');\n        }\n        const opts = {\n            url: this.securityCredentialsUrl,\n            method: 'GET',\n            responseType: 'text',\n            headers: headers,\n        };\n        const response = await this.transporter.request(opts);\n        return response.data;\n    }\n    /**\n     * Retrieves the temporary AWS credentials by calling the security-credentials\n     * endpoint as specified in the `credential_source` object.\n     * @param roleName The role attached to the current VM.\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the temporary AWS credentials\n     *   needed for creating the GetCallerIdentity signed request.\n     */\n    async getAwsSecurityCredentials(roleName, headers) {\n        const response = await this.transporter.request({\n            url: `${this.securityCredentialsUrl}/${roleName}`,\n            responseType: 'json',\n            headers: headers,\n        });\n        return response.data;\n    }\n    shouldUseMetadataServer() {\n        // The metadata server must be used when either the AWS region or AWS security\n        // credentials cannot be retrieved through their defined environment variables.\n        return !this.regionFromEnv || !this.securityCredentialsFromEnv;\n    }\n    get regionFromEnv() {\n        // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n        // Only one is required.\n        return (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'] || null);\n    }\n    get securityCredentialsFromEnv() {\n        // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n        if (process.env['AWS_ACCESS_KEY_ID'] &&\n            process.env['AWS_SECRET_ACCESS_KEY']) {\n            return {\n                accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n                secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n                token: process.env['AWS_SESSION_TOKEN'],\n            };\n        }\n        return null;\n    }\n}\nexports.AwsClient = AwsClient;\nAwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\nAwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,sBAAD,CAApC;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,SAAN,SAAwBG,oBAAoB,CAACC,yBAA7C,CAAuE;EACnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,OAAD,EAAUC,iBAAV,EAA6B;IACpC,MAAMD,OAAN,EAAeC,iBAAf;IACA,KAAKC,aAAL,GAAqBF,OAAO,CAACG,iBAAR,CAA0BC,cAA/C,CAFoC,CAGpC;IACA;;IACA,KAAKC,SAAL,GAAiBL,OAAO,CAACG,iBAAR,CAA0BG,UAA3C,CALoC,CAMpC;IACA;;IACA,KAAKC,sBAAL,GAA8BP,OAAO,CAACG,iBAAR,CAA0BK,GAAxD;IACA,KAAKC,2BAAL,GACIT,OAAO,CAACG,iBAAR,CAA0BO,8BAD9B;IAEA,KAAKC,qBAAL,GACIX,OAAO,CAACG,iBAAR,CAA0BS,wBAD9B;IAEA,KAAKC,gBAAL,GAAwB,IAAxB;IACA,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,oBAAL,GAA4B,KAA5B,CAfoC,CAgBpC;;IACA,KAAKC,qBAAL;EACH;;EACDA,qBAAqB,GAAG;IACpB,IAAIC,EAAJ;;IACA,MAAMC,KAAK,GAAG,CAACD,EAAE,GAAG,KAAKf,aAAX,MAA8B,IAA9B,IAAsCe,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAACC,KAAH,CAAS,cAAT,CAA7E;;IACA,IAAI,CAACA,KAAD,IAAU,CAAC,KAAKT,2BAApB,EAAiD;MAC7C,MAAM,IAAIU,KAAJ,CAAU,2CAAV,CAAN;IACH,CAFD,MAGK,IAAIC,QAAQ,CAACF,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,KAA2B,CAA/B,EAAkC;MACnC,MAAM,IAAIC,KAAJ,CAAW,gBAAeD,KAAK,CAAC,CAAD,CAAI,0CAAnC,CAAN;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACUG,oBAAoB,GAAG;IAAA;;IAAA;MACzB;MACA,IAAI,CAAC,KAAI,CAACR,gBAAV,EAA4B;QACxB,MAAMS,eAAe,GAAG,EAAxB,CADwB,CAExB;QACA;QACA;QACA;QACA;;QACA,IAAI,KAAI,CAACC,uBAAL,MAAkC,KAAI,CAACZ,qBAA3C,EAAkE;UAC9DW,eAAe,CAAC,0BAAD,CAAf,SACU,KAAI,CAACE,qBAAL,EADV;QAEH;;QACD,KAAI,CAACV,MAAL,SAAoB,KAAI,CAACW,YAAL,CAAkBH,eAAlB,CAApB;QACA,KAAI,CAACT,gBAAL,GAAwB,IAAIlB,kBAAkB,CAAC+B,gBAAvB,iCAAwC,aAAY;UACxE;UACA;UACA,IAAI,KAAI,CAACC,0BAAT,EAAqC;YACjC,OAAO,KAAI,CAACA,0BAAZ;UACH,CALuE,CAMxE;;;UACA,MAAMC,QAAQ,SAAS,KAAI,CAACC,cAAL,CAAoBP,eAApB,CAAvB,CAPwE,CAQxE;UACA;UACA;UACA;;UACA,MAAMQ,QAAQ,SAAS,KAAI,CAACC,yBAAL,CAA+BH,QAA/B,EAAyCN,eAAzC,CAAvB;UACA,OAAO;YACHU,WAAW,EAAEF,QAAQ,CAACG,WADnB;YAEHC,eAAe,EAAEJ,QAAQ,CAACK,eAFvB;YAGHC,KAAK,EAAEN,QAAQ,CAACO;UAHb,CAAP;QAKH,CAlBuB,GAkBrB,KAAI,CAACvB,MAlBgB,CAAxB;MAmBH,CAjCwB,CAkCzB;MACA;;;MACA,MAAMd,OAAO,SAAS,KAAI,CAACa,gBAAL,CAAsByB,iBAAtB,CAAwC;QAC1D9B,GAAG,EAAE,KAAI,CAACC,2BAAL,CAAiC8B,OAAjC,CAAyC,UAAzC,EAAqD,KAAI,CAACzB,MAA1D,CADqD;QAE1D0B,MAAM,EAAE;MAFkD,CAAxC,CAAtB,CApCyB,CAwCzB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA,MAAMC,iBAAiB,GAAG,EAA1B;MACA,MAAMC,eAAe,GAAGpD,MAAM,CAACqD,MAAP,CAAc;QAClC;QACA;QACA;QACA;QACA,gCAAgC,KAAI,CAACC;MALH,CAAd,EAMrB5C,OAAO,CAAC6C,OANa,CAAxB,CArDyB,CA4DzB;;MACA,KAAK,MAAMC,GAAX,IAAkBJ,eAAlB,EAAmC;QAC/BD,iBAAiB,CAACM,IAAlB,CAAuB;UACnBD,GADmB;UAEnBrD,KAAK,EAAEiD,eAAe,CAACI,GAAD;QAFH,CAAvB;MAIH,CAlEwB,CAmEzB;;;MACA,OAAOE,kBAAkB,CAACC,IAAI,CAACC,SAAL,CAAe;QACrC1C,GAAG,EAAER,OAAO,CAACQ,GADwB;QAErCgC,MAAM,EAAExC,OAAO,CAACwC,MAFqB;QAGrCK,OAAO,EAAEJ;MAH4B,CAAf,CAAD,CAAzB;IApEyB;EAyE5B;EACD;AACJ;AACA;;;EACUjB,qBAAqB,GAAG;IAAA;;IAAA;MAC1B,MAAM2B,IAAI,GAAG;QACT3C,GAAG,EAAE,MAAI,CAACG,qBADD;QAET6B,MAAM,EAAE,KAFC;QAGTY,YAAY,EAAE,MAHL;QAITP,OAAO,EAAE;UAAE,wCAAwC;QAA1C;MAJA,CAAb;MAMA,MAAMQ,QAAQ,SAAS,MAAI,CAACC,WAAL,CAAiBC,OAAjB,CAAyBJ,IAAzB,CAAvB;MACA,OAAOE,QAAQ,CAACG,IAAhB;IAR0B;EAS7B;EACD;AACJ;AACA;AACA;;;EACU/B,YAAY,CAACoB,OAAD,EAAU;IAAA;;IAAA;MACxB;MACA;MACA,IAAI,MAAI,CAACY,aAAT,EAAwB;QACpB,OAAO,MAAI,CAACA,aAAZ;MACH;;MACD,IAAI,CAAC,MAAI,CAACpD,SAAV,EAAqB;QACjB,MAAM,IAAIc,KAAJ,CAAU,mDACZ,wCADE,CAAN;MAEH;;MACD,MAAMgC,IAAI,GAAG;QACT3C,GAAG,EAAE,MAAI,CAACH,SADD;QAETmC,MAAM,EAAE,KAFC;QAGTY,YAAY,EAAE,MAHL;QAITP,OAAO,EAAEA;MAJA,CAAb;MAMA,MAAMQ,QAAQ,SAAS,MAAI,CAACC,WAAL,CAAiBC,OAAjB,CAAyBJ,IAAzB,CAAvB,CAhBwB,CAiBxB;MACA;;MACA,OAAOE,QAAQ,CAACG,IAAT,CAAcE,MAAd,CAAqB,CAArB,EAAwBL,QAAQ,CAACG,IAAT,CAAcG,MAAd,GAAuB,CAA/C,CAAP;IAnBwB;EAoB3B;EACD;AACJ;AACA;AACA;AACA;;;EACU9B,cAAc,CAACgB,OAAD,EAAU;IAAA;;IAAA;MAC1B,IAAI,CAAC,MAAI,CAACtC,sBAAV,EAAkC;QAC9B,MAAM,IAAIY,KAAJ,CAAU,sDACZ,iCADE,CAAN;MAEH;;MACD,MAAMgC,IAAI,GAAG;QACT3C,GAAG,EAAE,MAAI,CAACD,sBADD;QAETiC,MAAM,EAAE,KAFC;QAGTY,YAAY,EAAE,MAHL;QAITP,OAAO,EAAEA;MAJA,CAAb;MAMA,MAAMQ,QAAQ,SAAS,MAAI,CAACC,WAAL,CAAiBC,OAAjB,CAAyBJ,IAAzB,CAAvB;MACA,OAAOE,QAAQ,CAACG,IAAhB;IAZ0B;EAa7B;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACUzB,yBAAyB,CAACH,QAAD,EAAWiB,OAAX,EAAoB;IAAA;;IAAA;MAC/C,MAAMQ,QAAQ,SAAS,MAAI,CAACC,WAAL,CAAiBC,OAAjB,CAAyB;QAC5C/C,GAAG,EAAG,GAAE,MAAI,CAACD,sBAAuB,IAAGqB,QAAS,EADJ;QAE5CwB,YAAY,EAAE,MAF8B;QAG5CP,OAAO,EAAEA;MAHmC,CAAzB,CAAvB;MAKA,OAAOQ,QAAQ,CAACG,IAAhB;IAN+C;EAOlD;;EACDjC,uBAAuB,GAAG;IACtB;IACA;IACA,OAAO,CAAC,KAAKkC,aAAN,IAAuB,CAAC,KAAK9B,0BAApC;EACH;;EACgB,IAAb8B,aAAa,GAAG;IAChB;IACA;IACA,OAAQG,OAAO,CAACC,GAAR,CAAY,YAAZ,KAA6BD,OAAO,CAACC,GAAR,CAAY,oBAAZ,CAA7B,IAAkE,IAA1E;EACH;;EAC6B,IAA1BlC,0BAA0B,GAAG;IAC7B;IACA,IAAIiC,OAAO,CAACC,GAAR,CAAY,mBAAZ,KACAD,OAAO,CAACC,GAAR,CAAY,uBAAZ,CADJ,EAC0C;MACtC,OAAO;QACH7B,WAAW,EAAE4B,OAAO,CAACC,GAAR,CAAY,mBAAZ,CADV;QAEH3B,eAAe,EAAE0B,OAAO,CAACC,GAAR,CAAY,uBAAZ,CAFd;QAGHzB,KAAK,EAAEwB,OAAO,CAACC,GAAR,CAAY,mBAAZ;MAHJ,CAAP;IAKH;;IACD,OAAO,IAAP;EACH;;AAzOkE;;AA2OvErE,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAA,SAAS,CAACoE,6BAAV,GAA0C,iBAA1C;AACApE,SAAS,CAACqE,6BAAV,GAA0C,eAA1C"},"metadata":{},"sourceType":"script"}