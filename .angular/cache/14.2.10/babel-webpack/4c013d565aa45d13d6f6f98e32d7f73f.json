{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuth2Client = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst querystring = require(\"querystring\");\n\nconst stream = require(\"stream\");\n\nconst formatEcdsa = require(\"ecdsa-sig-formatter\");\n\nconst crypto_1 = require(\"../crypto/crypto\");\n\nconst authclient_1 = require(\"./authclient\");\n\nconst loginticket_1 = require(\"./loginticket\");\n\nvar CodeChallengeMethod;\n\n(function (CodeChallengeMethod) {\n  CodeChallengeMethod[\"Plain\"] = \"plain\";\n  CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod || (exports.CodeChallengeMethod = CodeChallengeMethod = {}));\n\nvar CertificateFormat;\n\n(function (CertificateFormat) {\n  CertificateFormat[\"PEM\"] = \"PEM\";\n  CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat || (exports.CertificateFormat = CertificateFormat = {}));\n\nclass OAuth2Client extends authclient_1.AuthClient {\n  constructor(optionsOrClientId, clientSecret, redirectUri) {\n    const opts = optionsOrClientId && typeof optionsOrClientId === 'object' ? optionsOrClientId : {\n      clientId: optionsOrClientId,\n      clientSecret,\n      redirectUri\n    };\n    super(opts);\n    this.certificateCache = {};\n    this.certificateExpiry = null;\n    this.certificateCacheFormat = CertificateFormat.PEM;\n    this.refreshTokenPromises = new Map();\n    this._clientId = opts.clientId;\n    this._clientSecret = opts.clientSecret;\n    this.redirectUri = opts.redirectUri;\n  }\n  /**\n   * Generates URL for consent page landing.\n   * @param opts Options.\n   * @return URL to consent page.\n   */\n\n\n  generateAuthUrl(opts = {}) {\n    if (opts.code_challenge_method && !opts.code_challenge) {\n      throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n    }\n\n    opts.response_type = opts.response_type || 'code';\n    opts.client_id = opts.client_id || this._clientId;\n    opts.redirect_uri = opts.redirect_uri || this.redirectUri; // Allow scopes to be passed either as array or a string\n\n    if (Array.isArray(opts.scope)) {\n      opts.scope = opts.scope.join(' ');\n    }\n\n    const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;\n    return rootUrl + '?' + querystring.stringify(opts);\n  }\n\n  generateCodeVerifier() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n  }\n  /**\n   * Convenience method to automatically generate a code_verifier, and its\n   * resulting SHA256. If used, this must be paired with a S256\n   * code_challenge_method.\n   *\n   * For a full example see:\n   * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n   */\n\n\n  generateCodeVerifierAsync() {\n    return _asyncToGenerator(function* () {\n      // base64 encoding uses 6 bits per character, and we want to generate128\n      // characters. 6*128/8 = 96.\n      const crypto = (0, crypto_1.createCrypto)();\n      const randomString = crypto.randomBytesBase64(96); // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n      // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n      // swapping out a few chars.\n\n      const codeVerifier = randomString.replace(/\\+/g, '~').replace(/=/g, '_').replace(/\\//g, '-'); // Generate the base64 encoded SHA256\n\n      const unencodedCodeChallenge = yield crypto.sha256DigestBase64(codeVerifier); // We need to use base64UrlEncoding instead of standard base64\n\n      const codeChallenge = unencodedCodeChallenge.split('=')[0].replace(/\\+/g, '-').replace(/\\//g, '_');\n      return {\n        codeVerifier,\n        codeChallenge\n      };\n    })();\n  }\n\n  getToken(codeOrOptions, callback) {\n    const options = typeof codeOrOptions === 'string' ? {\n      code: codeOrOptions\n    } : codeOrOptions;\n\n    if (callback) {\n      this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n    } else {\n      return this.getTokenAsync(options);\n    }\n  }\n\n  getTokenAsync(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n      const values = {\n        code: options.code,\n        client_id: options.client_id || _this._clientId,\n        client_secret: _this._clientSecret,\n        redirect_uri: options.redirect_uri || _this.redirectUri,\n        grant_type: 'authorization_code',\n        code_verifier: options.codeVerifier\n      };\n      const res = yield _this.transporter.request({\n        method: 'POST',\n        url,\n        data: querystring.stringify(values),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const tokens = res.data;\n\n      if (res.data && res.data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n\n      _this.emit('tokens', tokens);\n\n      return {\n        tokens,\n        res\n      };\n    })();\n  }\n  /**\n   * Refreshes the access token.\n   * @param refresh_token Existing refresh token.\n   * @private\n   */\n\n\n  refreshToken(refreshToken) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!refreshToken) {\n        return _this2.refreshTokenNoCache(refreshToken);\n      } // If a request to refresh using the same token has started,\n      // return the same promise.\n\n\n      if (_this2.refreshTokenPromises.has(refreshToken)) {\n        return _this2.refreshTokenPromises.get(refreshToken);\n      }\n\n      const p = _this2.refreshTokenNoCache(refreshToken).then(r => {\n        _this2.refreshTokenPromises.delete(refreshToken);\n\n        return r;\n      }, e => {\n        _this2.refreshTokenPromises.delete(refreshToken);\n\n        throw e;\n      });\n\n      _this2.refreshTokenPromises.set(refreshToken, p);\n\n      return p;\n    })();\n  }\n\n  refreshTokenNoCache(refreshToken) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      if (!refreshToken) {\n        throw new Error('No refresh token is set.');\n      }\n\n      const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n      const data = {\n        refresh_token: refreshToken,\n        client_id: _this3._clientId,\n        client_secret: _this3._clientSecret,\n        grant_type: 'refresh_token'\n      };\n      let res;\n\n      try {\n        // request for new token\n        res = yield _this3.transporter.request({\n          method: 'POST',\n          url,\n          data: querystring.stringify(data),\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        });\n      } catch (e) {\n        if (e instanceof gaxios_1.GaxiosError && e.message === 'invalid_grant' && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) && /ReAuth/i.test(e.response.data.error_description)) {\n          e.message = JSON.stringify(e.response.data);\n        }\n\n        throw e;\n      }\n\n      const tokens = res.data; // TODO: de-duplicate this code from a few spots\n\n      if (res.data && res.data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n\n      _this3.emit('tokens', tokens);\n\n      return {\n        tokens,\n        res\n      };\n    })();\n  }\n\n  refreshAccessToken(callback) {\n    if (callback) {\n      this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n    } else {\n      return this.refreshAccessTokenAsync();\n    }\n  }\n\n  refreshAccessTokenAsync() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const r = yield _this4.refreshToken(_this4.credentials.refresh_token);\n      const tokens = r.tokens;\n      tokens.refresh_token = _this4.credentials.refresh_token;\n      _this4.credentials = tokens;\n      return {\n        credentials: _this4.credentials,\n        res: r.res\n      };\n    })();\n  }\n\n  getAccessToken(callback) {\n    if (callback) {\n      this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n    } else {\n      return this.getAccessTokenAsync();\n    }\n  }\n\n  getAccessTokenAsync() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const shouldRefresh = !_this5.credentials.access_token || _this5.isTokenExpiring();\n\n      if (shouldRefresh) {\n        if (!_this5.credentials.refresh_token) {\n          if (_this5.refreshHandler) {\n            const refreshedAccessToken = yield _this5.processAndValidateRefreshHandler();\n\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n              _this5.setCredentials(refreshedAccessToken);\n\n              return {\n                token: _this5.credentials.access_token\n              };\n            }\n          } else {\n            throw new Error('No refresh token or refresh handler callback is set.');\n          }\n        }\n\n        const r = yield _this5.refreshAccessTokenAsync();\n\n        if (!r.credentials || r.credentials && !r.credentials.access_token) {\n          throw new Error('Could not refresh access token.');\n        }\n\n        return {\n          token: r.credentials.access_token,\n          res: r.res\n        };\n      } else {\n        return {\n          token: _this5.credentials.access_token\n        };\n      }\n    })();\n  }\n  /**\n   * The main authentication interface.  It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * In OAuth2Client, the result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   * @param url The optional url being authorized\n   */\n\n\n  getRequestHeaders(url) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = (yield _this6.getRequestMetadataAsync(url)).headers;\n      return headers;\n    })();\n  }\n\n  getRequestMetadataAsync( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  url) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const thisCreds = _this7.credentials;\n\n      if (!thisCreds.access_token && !thisCreds.refresh_token && !_this7.apiKey && !_this7.refreshHandler) {\n        throw new Error('No access, refresh token, API key or refresh handler callback is set.');\n      }\n\n      if (thisCreds.access_token && !_this7.isTokenExpiring()) {\n        thisCreds.token_type = thisCreds.token_type || 'Bearer';\n        const headers = {\n          Authorization: thisCreds.token_type + ' ' + thisCreds.access_token\n        };\n        return {\n          headers: _this7.addSharedMetadataHeaders(headers)\n        };\n      } // If refreshHandler exists, call processAndValidateRefreshHandler().\n\n\n      if (_this7.refreshHandler) {\n        const refreshedAccessToken = yield _this7.processAndValidateRefreshHandler();\n\n        if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n          _this7.setCredentials(refreshedAccessToken);\n\n          const headers = {\n            Authorization: 'Bearer ' + _this7.credentials.access_token\n          };\n          return {\n            headers: _this7.addSharedMetadataHeaders(headers)\n          };\n        }\n      }\n\n      if (_this7.apiKey) {\n        return {\n          headers: {\n            'X-Goog-Api-Key': _this7.apiKey\n          }\n        };\n      }\n\n      let r = null;\n      let tokens = null;\n\n      try {\n        r = yield _this7.refreshToken(thisCreds.refresh_token);\n        tokens = r.tokens;\n      } catch (err) {\n        const e = err;\n\n        if (e.response && (e.response.status === 403 || e.response.status === 404)) {\n          e.message = `Could not refresh access token: ${e.message}`;\n        }\n\n        throw e;\n      }\n\n      const credentials = _this7.credentials;\n      credentials.token_type = credentials.token_type || 'Bearer';\n      tokens.refresh_token = credentials.refresh_token;\n      _this7.credentials = tokens;\n      const headers = {\n        Authorization: credentials.token_type + ' ' + tokens.access_token\n      };\n      return {\n        headers: _this7.addSharedMetadataHeaders(headers),\n        res: r.res\n      };\n    })();\n  }\n  /**\n   * Generates an URL to revoke the given token.\n   * @param token The existing token to be revoked.\n   */\n\n\n  static getRevokeTokenUrl(token) {\n    const parameters = querystring.stringify({\n      token\n    });\n    return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;\n  }\n\n  revokeToken(token, callback) {\n    const opts = {\n      url: OAuth2Client.getRevokeTokenUrl(token),\n      method: 'POST'\n    };\n\n    if (callback) {\n      this.transporter.request(opts).then(r => callback(null, r), callback);\n    } else {\n      return this.transporter.request(opts);\n    }\n  }\n\n  revokeCredentials(callback) {\n    if (callback) {\n      this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n    } else {\n      return this.revokeCredentialsAsync();\n    }\n  }\n\n  revokeCredentialsAsync() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const token = _this8.credentials.access_token;\n      _this8.credentials = {};\n\n      if (token) {\n        return _this8.revokeToken(token);\n      } else {\n        throw new Error('No access token to revoke.');\n      }\n    })();\n  }\n\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n\n  requestAsync(opts, retry = false) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      let r2;\n\n      try {\n        const r = yield _this9.getRequestMetadataAsync(opts.url);\n        opts.headers = opts.headers || {};\n\n        if (r.headers && r.headers['x-goog-user-project']) {\n          opts.headers['x-goog-user-project'] = r.headers['x-goog-user-project'];\n        }\n\n        if (r.headers && r.headers.Authorization) {\n          opts.headers.Authorization = r.headers.Authorization;\n        }\n\n        if (_this9.apiKey) {\n          opts.headers['X-Goog-Api-Key'] = _this9.apiKey;\n        }\n\n        r2 = yield _this9.transporter.request(opts);\n      } catch (e) {\n        const res = e.response;\n\n        if (res) {\n          const statusCode = res.status; // Retry the request for metadata if the following criteria are true:\n          // - We haven't already retried.  It only makes sense to retry once.\n          // - The response was a 401 or a 403\n          // - The request didn't send a readableStream\n          // - An access_token and refresh_token were available, but either no\n          //   expiry_date was available or the forceRefreshOnFailure flag is set.\n          //   The absent expiry_date case can happen when developers stash the\n          //   access_token and refresh_token for later use, but the access_token\n          //   fails on the first try because it's expired. Some developers may\n          //   choose to enable forceRefreshOnFailure to mitigate time-related\n          //   errors.\n          // Or the following criteria are true:\n          // - We haven't already retried.  It only makes sense to retry once.\n          // - The response was a 401 or a 403\n          // - The request didn't send a readableStream\n          // - No refresh_token was available\n          // - An access_token and a refreshHandler callback were available, but\n          //   either no expiry_date was available or the forceRefreshOnFailure\n          //   flag is set. The access_token fails on the first try because it's\n          //   expired. Some developers may choose to enable forceRefreshOnFailure\n          //   to mitigate time-related errors.\n\n          const mayRequireRefresh = _this9.credentials && _this9.credentials.access_token && _this9.credentials.refresh_token && (!_this9.credentials.expiry_date || _this9.forceRefreshOnFailure);\n          const mayRequireRefreshWithNoRefreshToken = _this9.credentials && _this9.credentials.access_token && !_this9.credentials.refresh_token && (!_this9.credentials.expiry_date || _this9.forceRefreshOnFailure) && _this9.refreshHandler;\n          const isReadableStream = res.config.data instanceof stream.Readable;\n          const isAuthErr = statusCode === 401 || statusCode === 403;\n\n          if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n            yield _this9.refreshAccessTokenAsync();\n            return _this9.requestAsync(opts, true);\n          } else if (!retry && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {\n            const refreshedAccessToken = yield _this9.processAndValidateRefreshHandler();\n\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n              _this9.setCredentials(refreshedAccessToken);\n            }\n\n            return _this9.requestAsync(opts, true);\n          }\n        }\n\n        throw e;\n      }\n\n      return r2;\n    })();\n  }\n\n  verifyIdToken(options, callback) {\n    // This function used to accept two arguments instead of an options object.\n    // Check the types to help users upgrade with less pain.\n    // This check can be removed after a 2.0 release.\n    if (callback && typeof callback !== 'function') {\n      throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n    }\n\n    if (callback) {\n      this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n    } else {\n      return this.verifyIdTokenAsync(options);\n    }\n  }\n\n  verifyIdTokenAsync(options) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!options.idToken) {\n        throw new Error('The verifyIdToken method requires an ID Token');\n      }\n\n      const response = yield _this10.getFederatedSignonCertsAsync();\n      const login = yield _this10.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);\n      return login;\n    })();\n  }\n  /**\n   * Obtains information about the provisioned access token.  Especially useful\n   * if you want to check the scopes that were provisioned to a given token.\n   *\n   * @param accessToken Required.  The Access Token for which you want to get\n   * user info.\n   */\n\n\n  getTokenInfo(accessToken) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        data\n      } = yield _this11.transporter.request({\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: `Bearer ${accessToken}`\n        },\n        url: OAuth2Client.GOOGLE_TOKEN_INFO_URL\n      });\n      const info = Object.assign({\n        expiry_date: new Date().getTime() + data.expires_in * 1000,\n        scopes: data.scope.split(' ')\n      }, data);\n      delete info.expires_in;\n      delete info.scope;\n      return info;\n    })();\n  }\n\n  getFederatedSignonCerts(callback) {\n    if (callback) {\n      this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n    } else {\n      return this.getFederatedSignonCertsAsync();\n    }\n  }\n\n  getFederatedSignonCertsAsync() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      const nowTime = new Date().getTime();\n      const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;\n\n      if (_this12.certificateExpiry && nowTime < _this12.certificateExpiry.getTime() && _this12.certificateCacheFormat === format) {\n        return {\n          certs: _this12.certificateCache,\n          format\n        };\n      }\n\n      let res;\n      let url;\n\n      switch (format) {\n        case CertificateFormat.PEM:\n          url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;\n          break;\n\n        case CertificateFormat.JWK:\n          url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;\n          break;\n\n        default:\n          throw new Error(`Unsupported certificate format ${format}`);\n      }\n\n      try {\n        res = yield _this12.transporter.request({\n          url\n        });\n      } catch (e) {\n        if (e instanceof Error) {\n          e.message = `Failed to retrieve verification certificates: ${e.message}`;\n        }\n\n        throw e;\n      }\n\n      const cacheControl = res ? res.headers['cache-control'] : undefined;\n      let cacheAge = -1;\n\n      if (cacheControl) {\n        const pattern = new RegExp('max-age=([0-9]*)');\n        const regexResult = pattern.exec(cacheControl);\n\n        if (regexResult && regexResult.length === 2) {\n          // Cache results with max-age (in seconds)\n          cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n        }\n      }\n\n      let certificates = {};\n\n      switch (format) {\n        case CertificateFormat.PEM:\n          certificates = res.data;\n          break;\n\n        case CertificateFormat.JWK:\n          for (const key of res.data.keys) {\n            certificates[key.kid] = key;\n          }\n\n          break;\n\n        default:\n          throw new Error(`Unsupported certificate format ${format}`);\n      }\n\n      const now = new Date();\n      _this12.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n      _this12.certificateCache = certificates;\n      _this12.certificateCacheFormat = format;\n      return {\n        certs: certificates,\n        format,\n        res\n      };\n    })();\n  }\n\n  getIapPublicKeys(callback) {\n    if (callback) {\n      this.getIapPublicKeysAsync().then(r => callback(null, r.pubkeys, r.res), callback);\n    } else {\n      return this.getIapPublicKeysAsync();\n    }\n  }\n\n  getIapPublicKeysAsync() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      let res;\n      const url = OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_;\n\n      try {\n        res = yield _this13.transporter.request({\n          url\n        });\n      } catch (e) {\n        if (e instanceof Error) {\n          e.message = `Failed to retrieve verification certificates: ${e.message}`;\n        }\n\n        throw e;\n      }\n\n      return {\n        pubkeys: res.data,\n        res\n      };\n    })();\n  }\n\n  verifySignedJwtWithCerts() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n  }\n  /**\n   * Verify the id token is signed with the correct certificate\n   * and is from the correct audience.\n   * @param jwt The jwt to verify (The ID Token in this case).\n   * @param certs The array of certs to test the jwt against.\n   * @param requiredAudience The audience to test the jwt against.\n   * @param issuers The allowed issuers of the jwt (Optional).\n   * @param maxExpiry The max expiry the certificate can be (Optional).\n   * @return Returns a promise resolving to LoginTicket on verification.\n   */\n\n\n  verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n    return _asyncToGenerator(function* () {\n      const crypto = (0, crypto_1.createCrypto)();\n\n      if (!maxExpiry) {\n        maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;\n      }\n\n      const segments = jwt.split('.');\n\n      if (segments.length !== 3) {\n        throw new Error('Wrong number of segments in token: ' + jwt);\n      }\n\n      const signed = segments[0] + '.' + segments[1];\n      let signature = segments[2];\n      let envelope;\n      let payload;\n\n      try {\n        envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n      } catch (err) {\n        if (err instanceof Error) {\n          err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n        }\n\n        throw err;\n      }\n\n      if (!envelope) {\n        throw new Error(\"Can't parse token envelope: \" + segments[0]);\n      }\n\n      try {\n        payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n      } catch (err) {\n        if (err instanceof Error) {\n          err.message = `Can't parse token payload '${segments[0]}`;\n        }\n\n        throw err;\n      }\n\n      if (!payload) {\n        throw new Error(\"Can't parse token payload: \" + segments[1]);\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n        // If this is not present, then there's no reason to attempt verification\n        throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n      }\n\n      const cert = certs[envelope.kid];\n\n      if (envelope.alg === 'ES256') {\n        signature = formatEcdsa.joseToDer(signature, 'ES256').toString('base64');\n      }\n\n      const verified = yield crypto.verify(cert, signed, signature);\n\n      if (!verified) {\n        throw new Error('Invalid token signature: ' + jwt);\n      }\n\n      if (!payload.iat) {\n        throw new Error('No issue time in token: ' + JSON.stringify(payload));\n      }\n\n      if (!payload.exp) {\n        throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n      }\n\n      const iat = Number(payload.iat);\n      if (isNaN(iat)) throw new Error('iat field using invalid format');\n      const exp = Number(payload.exp);\n      if (isNaN(exp)) throw new Error('exp field using invalid format');\n      const now = new Date().getTime() / 1000;\n\n      if (exp >= now + maxExpiry) {\n        throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n      }\n\n      const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n      const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n\n      if (now < earliest) {\n        throw new Error('Token used too early, ' + now + ' < ' + earliest + ': ' + JSON.stringify(payload));\n      }\n\n      if (now > latest) {\n        throw new Error('Token used too late, ' + now + ' > ' + latest + ': ' + JSON.stringify(payload));\n      }\n\n      if (issuers && issuers.indexOf(payload.iss) < 0) {\n        throw new Error('Invalid issuer, expected one of [' + issuers + '], but got ' + payload.iss);\n      } // Check the audience matches if we have one\n\n\n      if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n        const aud = payload.aud;\n        let audVerified = false; // If the requiredAudience is an array, check if it contains token\n        // audience\n\n        if (requiredAudience.constructor === Array) {\n          audVerified = requiredAudience.indexOf(aud) > -1;\n        } else {\n          audVerified = aud === requiredAudience;\n        }\n\n        if (!audVerified) {\n          throw new Error('Wrong recipient, payload audience != requiredAudience');\n        }\n      }\n\n      return new loginticket_1.LoginTicket(envelope, payload);\n    })();\n  }\n  /**\n   * Returns a promise that resolves with AccessTokenResponse type if\n   * refreshHandler is defined.\n   * If not, nothing is returned.\n   */\n\n\n  processAndValidateRefreshHandler() {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this14.refreshHandler) {\n        const accessTokenResponse = yield _this14.refreshHandler();\n\n        if (!accessTokenResponse.access_token) {\n          throw new Error('No access token is returned by the refreshHandler callback.');\n        }\n\n        return accessTokenResponse;\n      }\n\n      return;\n    })();\n  }\n  /**\n   * Returns true if a token is expired or will expire within\n   * eagerRefreshThresholdMillismilliseconds.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   */\n\n\n  isTokenExpiring() {\n    const expiryDate = this.credentials.expiry_date;\n    return expiryDate ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis : false;\n  }\n\n}\n\nexports.OAuth2Client = OAuth2Client;\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * The base URL for auth endpoints.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = 'https://accounts.google.com/o/oauth2/v2/auth';\n/**\n * The base endpoint for token retrieval.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = 'https://oauth2.googleapis.com/token';\n/**\n * The base endpoint to revoke tokens.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = 'https://oauth2.googleapis.com/revoke';\n/**\n * Google Sign on certificates in PEM format.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v1/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v3/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\n\nOAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_ = 'https://www.gstatic.com/iap/verify/public_key';\n/**\n * Clock skew - five minutes in seconds\n */\n\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * Max Token Lifetime is one day in seconds\n */\n\nOAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;\n/**\n * The allowed oauth token issuers.\n */\n\nOAuth2Client.ISSUERS_ = ['accounts.google.com', 'https://accounts.google.com'];","map":{"version":3,"names":["Object","defineProperty","exports","value","OAuth2Client","CertificateFormat","CodeChallengeMethod","gaxios_1","require","querystring","stream","formatEcdsa","crypto_1","authclient_1","loginticket_1","AuthClient","constructor","optionsOrClientId","clientSecret","redirectUri","opts","clientId","certificateCache","certificateExpiry","certificateCacheFormat","PEM","refreshTokenPromises","Map","_clientId","_clientSecret","generateAuthUrl","code_challenge_method","code_challenge","Error","response_type","client_id","redirect_uri","Array","isArray","scope","join","rootUrl","GOOGLE_OAUTH2_AUTH_BASE_URL_","stringify","generateCodeVerifier","generateCodeVerifierAsync","crypto","createCrypto","randomString","randomBytesBase64","codeVerifier","replace","unencodedCodeChallenge","sha256DigestBase64","codeChallenge","split","getToken","codeOrOptions","callback","options","code","getTokenAsync","then","r","tokens","res","e","response","url","GOOGLE_OAUTH2_TOKEN_URL_","values","client_secret","grant_type","code_verifier","transporter","request","method","data","headers","expires_in","expiry_date","Date","getTime","emit","refreshToken","refreshTokenNoCache","has","get","p","delete","set","_a","refresh_token","GaxiosError","message","test","error_description","JSON","refreshAccessToken","refreshAccessTokenAsync","credentials","getAccessToken","getAccessTokenAsync","token","shouldRefresh","access_token","isTokenExpiring","refreshHandler","refreshedAccessToken","processAndValidateRefreshHandler","setCredentials","getRequestHeaders","getRequestMetadataAsync","thisCreds","apiKey","token_type","Authorization","addSharedMetadataHeaders","err","status","getRevokeTokenUrl","parameters","GOOGLE_OAUTH2_REVOKE_URL_","revokeToken","revokeCredentials","revokeCredentialsAsync","requestAsync","retry","r2","statusCode","mayRequireRefresh","forceRefreshOnFailure","mayRequireRefreshWithNoRefreshToken","isReadableStream","config","Readable","isAuthErr","verifyIdToken","verifyIdTokenAsync","idToken","getFederatedSignonCertsAsync","login","verifySignedJwtWithCertsAsync","certs","audience","ISSUERS_","maxExpiry","getTokenInfo","accessToken","GOOGLE_TOKEN_INFO_URL","info","assign","scopes","getFederatedSignonCerts","nowTime","format","hasBrowserCrypto","JWK","GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_","GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_","cacheControl","undefined","cacheAge","pattern","RegExp","regexResult","exec","length","Number","certificates","key","keys","kid","now","getIapPublicKeys","getIapPublicKeysAsync","pubkeys","GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_","verifySignedJwtWithCerts","jwt","requiredAudience","issuers","MAX_TOKEN_LIFETIME_SECS_","segments","signed","signature","envelope","payload","parse","decodeBase64StringUtf8","prototype","hasOwnProperty","call","cert","alg","joseToDer","toString","verified","verify","iat","exp","isNaN","earliest","CLOCK_SKEW_SECS_","latest","indexOf","iss","aud","audVerified","LoginTicket","accessTokenResponse","expiryDate","eagerRefreshThresholdMillis"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-auth-library/build/src/auth/oauth2client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OAuth2Client = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst querystring = require(\"querystring\");\nconst stream = require(\"stream\");\nconst formatEcdsa = require(\"ecdsa-sig-formatter\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst authclient_1 = require(\"./authclient\");\nconst loginticket_1 = require(\"./loginticket\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod || (exports.CodeChallengeMethod = CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat || (exports.CertificateFormat = CertificateFormat = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri) {\n        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'\n            ? optionsOrClientId\n            : { clientId: optionsOrClientId, clientSecret, redirectUri };\n        super(opts);\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */\n    generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n        }\n        opts.response_type = opts.response_type || 'code';\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (Array.isArray(opts.scope)) {\n            opts.scope = opts.scope.join(' ');\n        }\n        const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;\n        return (rootUrl +\n            '?' +\n            querystring.stringify(opts));\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and its\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     *\n     * For a full example see:\n     * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n     */\n    async generateCodeVerifierAsync() {\n        // base64 encoding uses 6 bits per character, and we want to generate128\n        // characters. 6*128/8 = 96.\n        const crypto = (0, crypto_1.createCrypto)();\n        const randomString = crypto.randomBytesBase64(96);\n        // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n        // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n        // swapping out a few chars.\n        const codeVerifier = randomString\n            .replace(/\\+/g, '~')\n            .replace(/=/g, '_')\n            .replace(/\\//g, '-');\n        // Generate the base64 encoded SHA256\n        const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n        // We need to use base64UrlEncoding instead of standard base64\n        const codeChallenge = unencodedCodeChallenge\n            .split('=')[0]\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_');\n        return { codeVerifier, codeChallenge };\n    }\n    getToken(codeOrOptions, callback) {\n        const options = typeof codeOrOptions === 'string' ? { code: codeOrOptions } : codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n        }\n        else {\n            return this.getTokenAsync(options);\n        }\n    }\n    async getTokenAsync(options) {\n        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n        const values = {\n            code: options.code,\n            client_id: options.client_id || this._clientId,\n            client_secret: this._clientSecret,\n            redirect_uri: options.redirect_uri || this.redirectUri,\n            grant_type: 'authorization_code',\n            code_verifier: options.codeVerifier,\n        };\n        const res = await this.transporter.request({\n            method: 'POST',\n            url,\n            data: querystring.stringify(values),\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n        });\n        const tokens = res.data;\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */\n    async refreshToken(refreshToken) {\n        if (!refreshToken) {\n            return this.refreshTokenNoCache(refreshToken);\n        }\n        // If a request to refresh using the same token has started,\n        // return the same promise.\n        if (this.refreshTokenPromises.has(refreshToken)) {\n            return this.refreshTokenPromises.get(refreshToken);\n        }\n        const p = this.refreshTokenNoCache(refreshToken).then(r => {\n            this.refreshTokenPromises.delete(refreshToken);\n            return r;\n        }, e => {\n            this.refreshTokenPromises.delete(refreshToken);\n            throw e;\n        });\n        this.refreshTokenPromises.set(refreshToken, p);\n        return p;\n    }\n    async refreshTokenNoCache(refreshToken) {\n        var _a;\n        if (!refreshToken) {\n            throw new Error('No refresh token is set.');\n        }\n        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n        const data = {\n            refresh_token: refreshToken,\n            client_id: this._clientId,\n            client_secret: this._clientSecret,\n            grant_type: 'refresh_token',\n        };\n        let res;\n        try {\n            // request for new token\n            res = await this.transporter.request({\n                method: 'POST',\n                url,\n                data: querystring.stringify(data),\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            });\n        }\n        catch (e) {\n            if (e instanceof gaxios_1.GaxiosError &&\n                e.message === 'invalid_grant' &&\n                ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) &&\n                /ReAuth/i.test(e.response.data.error_description)) {\n                e.message = JSON.stringify(e.response.data);\n            }\n            throw e;\n        }\n        const tokens = res.data;\n        // TODO: de-duplicate this code from a few spots\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit('tokens', tokens);\n        return { tokens, res };\n    }\n    refreshAccessToken(callback) {\n        if (callback) {\n            this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n        }\n        else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    async refreshAccessTokenAsync() {\n        const r = await this.refreshToken(this.credentials.refresh_token);\n        const tokens = r.tokens;\n        tokens.refresh_token = this.credentials.refresh_token;\n        this.credentials = tokens;\n        return { credentials: this.credentials, res: r.res };\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n        }\n        else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    async getAccessTokenAsync() {\n        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n        if (shouldRefresh) {\n            if (!this.credentials.refresh_token) {\n                if (this.refreshHandler) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                        return { token: this.credentials.access_token };\n                    }\n                }\n                else {\n                    throw new Error('No refresh token or refresh handler callback is set.');\n                }\n            }\n            const r = await this.refreshAccessTokenAsync();\n            if (!r.credentials || (r.credentials && !r.credentials.access_token)) {\n                throw new Error('Could not refresh access token.');\n            }\n            return { token: r.credentials.access_token, res: r.res };\n        }\n        else {\n            return { token: this.credentials.access_token };\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */\n    async getRequestHeaders(url) {\n        const headers = (await this.getRequestMetadataAsync(url)).headers;\n        return headers;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        const thisCreds = this.credentials;\n        if (!thisCreds.access_token &&\n            !thisCreds.refresh_token &&\n            !this.apiKey &&\n            !this.refreshHandler) {\n            throw new Error('No access, refresh token, API key or refresh handler callback is set.');\n        }\n        if (thisCreds.access_token && !this.isTokenExpiring()) {\n            thisCreds.token_type = thisCreds.token_type || 'Bearer';\n            const headers = {\n                Authorization: thisCreds.token_type + ' ' + thisCreds.access_token,\n            };\n            return { headers: this.addSharedMetadataHeaders(headers) };\n        }\n        // If refreshHandler exists, call processAndValidateRefreshHandler().\n        if (this.refreshHandler) {\n            const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                this.setCredentials(refreshedAccessToken);\n                const headers = {\n                    Authorization: 'Bearer ' + this.credentials.access_token,\n                };\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        if (this.apiKey) {\n            return { headers: { 'X-Goog-Api-Key': this.apiKey } };\n        }\n        let r = null;\n        let tokens = null;\n        try {\n            r = await this.refreshToken(thisCreds.refresh_token);\n            tokens = r.tokens;\n        }\n        catch (err) {\n            const e = err;\n            if (e.response &&\n                (e.response.status === 403 || e.response.status === 404)) {\n                e.message = `Could not refresh access token: ${e.message}`;\n            }\n            throw e;\n        }\n        const credentials = this.credentials;\n        credentials.token_type = credentials.token_type || 'Bearer';\n        tokens.refresh_token = credentials.refresh_token;\n        this.credentials = tokens;\n        const headers = {\n            Authorization: credentials.token_type + ' ' + tokens.access_token,\n        };\n        return { headers: this.addSharedMetadataHeaders(headers), res: r.res };\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     */\n    static getRevokeTokenUrl(token) {\n        const parameters = querystring.stringify({ token });\n        return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            url: OAuth2Client.getRevokeTokenUrl(token),\n            method: 'POST',\n        };\n        if (callback) {\n            this.transporter\n                .request(opts)\n                .then(r => callback(null, r), callback);\n        }\n        else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n        }\n        else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    async revokeCredentialsAsync() {\n        const token = this.credentials.access_token;\n        this.credentials = {};\n        if (token) {\n            return this.revokeToken(token);\n        }\n        else {\n            throw new Error('No access token to revoke.');\n        }\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    async requestAsync(opts, retry = false) {\n        let r2;\n        try {\n            const r = await this.getRequestMetadataAsync(opts.url);\n            opts.headers = opts.headers || {};\n            if (r.headers && r.headers['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] = r.headers['x-goog-user-project'];\n            }\n            if (r.headers && r.headers.Authorization) {\n                opts.headers.Authorization = r.headers.Authorization;\n            }\n            if (this.apiKey) {\n                opts.headers['X-Goog-Api-Key'] = this.apiKey;\n            }\n            r2 = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - An access_token and refresh_token were available, but either no\n                //   expiry_date was available or the forceRefreshOnFailure flag is set.\n                //   The absent expiry_date case can happen when developers stash the\n                //   access_token and refresh_token for later use, but the access_token\n                //   fails on the first try because it's expired. Some developers may\n                //   choose to enable forceRefreshOnFailure to mitigate time-related\n                //   errors.\n                // Or the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - No refresh_token was available\n                // - An access_token and a refreshHandler callback were available, but\n                //   either no expiry_date was available or the forceRefreshOnFailure\n                //   flag is set. The access_token fails on the first try because it's\n                //   expired. Some developers may choose to enable forceRefreshOnFailure\n                //   to mitigate time-related errors.\n                const mayRequireRefresh = this.credentials &&\n                    this.credentials.access_token &&\n                    this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n                const mayRequireRefreshWithNoRefreshToken = this.credentials &&\n                    this.credentials.access_token &&\n                    !this.credentials.refresh_token &&\n                    (!this.credentials.expiry_date || this.forceRefreshOnFailure) &&\n                    this.refreshHandler;\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n                    await this.refreshAccessTokenAsync();\n                    return this.requestAsync(opts, true);\n                }\n                else if (!retry &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    mayRequireRefreshWithNoRefreshToken) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                    }\n                    return this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return r2;\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== 'function') {\n            throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    async verifyIdTokenAsync(options) {\n        if (!options.idToken) {\n            throw new Error('The verifyIdToken method requires an ID Token');\n        }\n        const response = await this.getFederatedSignonCertsAsync();\n        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);\n        return login;\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */\n    async getTokenInfo(accessToken) {\n        const { data } = await this.transporter.request({\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Authorization: `Bearer ${accessToken}`,\n            },\n            url: OAuth2Client.GOOGLE_TOKEN_INFO_URL,\n        });\n        const info = Object.assign({\n            expiry_date: new Date().getTime() + data.expires_in * 1000,\n            scopes: data.scope.split(' '),\n        }, data);\n        delete info.expires_in;\n        delete info.scope;\n        return info;\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n        }\n        else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    async getFederatedSignonCertsAsync() {\n        const nowTime = new Date().getTime();\n        const format = (0, crypto_1.hasBrowserCrypto)()\n            ? CertificateFormat.JWK\n            : CertificateFormat.PEM;\n        if (this.certificateExpiry &&\n            nowTime < this.certificateExpiry.getTime() &&\n            this.certificateCacheFormat === format) {\n            return { certs: this.certificateCache, format };\n        }\n        let res;\n        let url;\n        switch (format) {\n            case CertificateFormat.PEM:\n                url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;\n                break;\n            case CertificateFormat.JWK:\n                url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        try {\n            res = await this.transporter.request({ url });\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        const cacheControl = res ? res.headers['cache-control'] : undefined;\n        let cacheAge = -1;\n        if (cacheControl) {\n            const pattern = new RegExp('max-age=([0-9]*)');\n            const regexResult = pattern.exec(cacheControl);\n            if (regexResult && regexResult.length === 2) {\n                // Cache results with max-age (in seconds)\n                cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n            }\n        }\n        let certificates = {};\n        switch (format) {\n            case CertificateFormat.PEM:\n                certificates = res.data;\n                break;\n            case CertificateFormat.JWK:\n                for (const key of res.data.keys) {\n                    certificates[key.kid] = key;\n                }\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        const now = new Date();\n        this.certificateExpiry =\n            cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n        this.certificateCache = certificates;\n        this.certificateCacheFormat = format;\n        return { certs: certificates, format, res };\n    }\n    getIapPublicKeys(callback) {\n        if (callback) {\n            this.getIapPublicKeysAsync().then(r => callback(null, r.pubkeys, r.res), callback);\n        }\n        else {\n            return this.getIapPublicKeysAsync();\n        }\n    }\n    async getIapPublicKeysAsync() {\n        let res;\n        const url = OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_;\n        try {\n            res = await this.transporter.request({ url });\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        return { pubkeys: res.data, res };\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */\n    async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        const crypto = (0, crypto_1.createCrypto)();\n        if (!maxExpiry) {\n            maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;\n        }\n        const segments = jwt.split('.');\n        if (segments.length !== 3) {\n            throw new Error('Wrong number of segments in token: ' + jwt);\n        }\n        const signed = segments[0] + '.' + segments[1];\n        let signature = segments[2];\n        let envelope;\n        let payload;\n        try {\n            envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n            }\n            throw err;\n        }\n        if (!envelope) {\n            throw new Error(\"Can't parse token envelope: \" + segments[0]);\n        }\n        try {\n            payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token payload '${segments[0]}`;\n            }\n            throw err;\n        }\n        if (!payload) {\n            throw new Error(\"Can't parse token payload: \" + segments[1]);\n        }\n        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n            // If this is not present, then there's no reason to attempt verification\n            throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n        }\n        const cert = certs[envelope.kid];\n        if (envelope.alg === 'ES256') {\n            signature = formatEcdsa.joseToDer(signature, 'ES256').toString('base64');\n        }\n        const verified = await crypto.verify(cert, signed, signature);\n        if (!verified) {\n            throw new Error('Invalid token signature: ' + jwt);\n        }\n        if (!payload.iat) {\n            throw new Error('No issue time in token: ' + JSON.stringify(payload));\n        }\n        if (!payload.exp) {\n            throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n        }\n        const iat = Number(payload.iat);\n        if (isNaN(iat))\n            throw new Error('iat field using invalid format');\n        const exp = Number(payload.exp);\n        if (isNaN(exp))\n            throw new Error('exp field using invalid format');\n        const now = new Date().getTime() / 1000;\n        if (exp >= now + maxExpiry) {\n            throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n        }\n        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n        if (now < earliest) {\n            throw new Error('Token used too early, ' +\n                now +\n                ' < ' +\n                earliest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (now > latest) {\n            throw new Error('Token used too late, ' +\n                now +\n                ' > ' +\n                latest +\n                ': ' +\n                JSON.stringify(payload));\n        }\n        if (issuers && issuers.indexOf(payload.iss) < 0) {\n            throw new Error('Invalid issuer, expected one of [' +\n                issuers +\n                '], but got ' +\n                payload.iss);\n        }\n        // Check the audience matches if we have one\n        if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n            const aud = payload.aud;\n            let audVerified = false;\n            // If the requiredAudience is an array, check if it contains token\n            // audience\n            if (requiredAudience.constructor === Array) {\n                audVerified = requiredAudience.indexOf(aud) > -1;\n            }\n            else {\n                audVerified = aud === requiredAudience;\n            }\n            if (!audVerified) {\n                throw new Error('Wrong recipient, payload audience != requiredAudience');\n            }\n        }\n        return new loginticket_1.LoginTicket(envelope, payload);\n    }\n    /**\n     * Returns a promise that resolves with AccessTokenResponse type if\n     * refreshHandler is defined.\n     * If not, nothing is returned.\n     */\n    async processAndValidateRefreshHandler() {\n        if (this.refreshHandler) {\n            const accessTokenResponse = await this.refreshHandler();\n            if (!accessTokenResponse.access_token) {\n                throw new Error('No access token is returned by the refreshHandler callback.');\n            }\n            return accessTokenResponse;\n        }\n        return;\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */\n    isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate\n            ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.OAuth2Client = OAuth2Client;\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * The base URL for auth endpoints.\n */\nOAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = 'https://accounts.google.com/o/oauth2/v2/auth';\n/**\n * The base endpoint for token retrieval.\n */\nOAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = 'https://oauth2.googleapis.com/token';\n/**\n * The base endpoint to revoke tokens.\n */\nOAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = 'https://oauth2.googleapis.com/revoke';\n/**\n * Google Sign on certificates in PEM format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v1/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v3/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\nOAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_ = 'https://www.gstatic.com/iap/verify/public_key';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * Max Token Lifetime is one day in seconds\n */\nOAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;\n/**\n * The allowed oauth token issuers.\n */\nOAuth2Client.ISSUERS_ = [\n    'accounts.google.com',\n    'https://accounts.google.com',\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}