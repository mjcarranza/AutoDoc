{"ast":null,"code":"\"use strict\"; // Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageAnnotatorClient = void 0;\n\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p3beta1/image_annotator_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./image_annotator_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Service that performs Google Cloud Vision API detection tasks over client\n *  images, such as face, landmark, logo, label, and text detection. The\n *  ImageAnnotator service returns detected entities from the images.\n * @class\n * @memberof v1p3beta1\n */\n\n\nclass ImageAnnotatorClient {\n  /**\n   * Construct an instance of ImageAnnotatorClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n   *     For more information, please check the\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n   *     need to avoid loading the default gRPC version and want to use the fallback\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\n   *     ```\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n   *     const client = new ImageAnnotatorClient({fallback: true}, gax);\n   *     ```\n   */\n  constructor(opts, gaxInstance) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // Request numeric enum values if REST transport is used.\n\n    opts.numericEnums = true; // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Load google-gax module synchronously if needed\n\n\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set useJWTAccessWithScope on the auth object.\n\n    this.auth.useJWTAccessWithScope = true; // Set defaultServicePath on the auth object.\n\n    this.auth.defaultServicePath = staticMembers.servicePath; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      productPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}'),\n      productSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/productSets/{product_set}'),\n      referenceImagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}')\n    };\n\n    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos); // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n\n    const lroOptions = {\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    };\n\n    if (opts.fallback) {\n      lroOptions.protoJson = protoFilesRoot;\n      lroOptions.httpRules = [];\n    }\n\n    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);\n    const asyncBatchAnnotateFilesResponse = protoFilesRoot.lookup('.google.cloud.vision.v1p3beta1.AsyncBatchAnnotateFilesResponse');\n    const asyncBatchAnnotateFilesMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p3beta1.OperationMetadata');\n    this.descriptors.longrunning = {\n      asyncBatchAnnotateFiles: new this._gaxModule.LongrunningDescriptor(this.operationsClient, asyncBatchAnnotateFilesResponse.decode.bind(asyncBatchAnnotateFilesResponse), asyncBatchAnnotateFilesMetadata.decode.bind(asyncBatchAnnotateFilesMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p3beta1.ImageAnnotator', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {}; // Add a warn function to the client constructor so it can be easily tested.\n\n    this.warn = this._gaxModule.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.imageAnnotatorStub) {\n      return this.imageAnnotatorStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.vision.v1p3beta1.ImageAnnotator.\n\n\n    this.imageAnnotatorStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.vision.v1p3beta1.ImageAnnotator') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.vision.v1p3beta1.ImageAnnotator, this._opts, this._providedCustomServicePath); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const imageAnnotatorStubMethods = ['batchAnnotateImages', 'asyncBatchAnnotateFiles'];\n\n    for (const methodName of imageAnnotatorStubMethods) {\n      const callPromise = this.imageAnnotatorStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.longrunning[methodName] || undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.imageAnnotatorStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-vision'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n\n  batchAnnotateImages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    this.initialize();\n    return this.innerApiCalls.batchAnnotateImages(request, options, callback);\n  }\n\n  asyncBatchAnnotateFiles(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    this.initialize();\n    return this.innerApiCalls.asyncBatchAnnotateFiles(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `asyncBatchAnnotateFiles()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1p3beta1/image_annotator.async_batch_annotate_files.js</caption>\n   * region_tag:vision_v1p3beta1_generated_ImageAnnotator_AsyncBatchAnnotateFiles_async\n   */\n\n\n  checkAsyncBatchAnnotateFilesProgress(name) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const request = new _this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({\n        name\n      });\n      const [operation] = yield _this.operationsClient.getOperation(request);\n      const decodeOperation = new _this._gaxModule.Operation(operation, _this.descriptors.longrunning.asyncBatchAnnotateFiles, _this._gaxModule.createDefaultBackoffSettings());\n      return decodeOperation;\n    })();\n  } // --------------------\n  // -- Path templates --\n  // --------------------\n\n  /**\n   * Return a fully-qualified product resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} product\n   * @returns {string} Resource name string.\n   */\n\n\n  productPath(project, location, product) {\n    return this.pathTemplates.productPathTemplate.render({\n      project: project,\n      location: location,\n      product: product\n    });\n  }\n  /**\n   * Parse the project from Product resource.\n   *\n   * @param {string} productName\n   *   A fully-qualified path representing Product resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProductName(productName) {\n    return this.pathTemplates.productPathTemplate.match(productName).project;\n  }\n  /**\n   * Parse the location from Product resource.\n   *\n   * @param {string} productName\n   *   A fully-qualified path representing Product resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromProductName(productName) {\n    return this.pathTemplates.productPathTemplate.match(productName).location;\n  }\n  /**\n   * Parse the product from Product resource.\n   *\n   * @param {string} productName\n   *   A fully-qualified path representing Product resource.\n   * @returns {string} A string representing the product.\n   */\n\n\n  matchProductFromProductName(productName) {\n    return this.pathTemplates.productPathTemplate.match(productName).product;\n  }\n  /**\n   * Return a fully-qualified productSet resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} product_set\n   * @returns {string} Resource name string.\n   */\n\n\n  productSetPath(project, location, productSet) {\n    return this.pathTemplates.productSetPathTemplate.render({\n      project: project,\n      location: location,\n      product_set: productSet\n    });\n  }\n  /**\n   * Parse the project from ProductSet resource.\n   *\n   * @param {string} productSetName\n   *   A fully-qualified path representing ProductSet resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromProductSetName(productSetName) {\n    return this.pathTemplates.productSetPathTemplate.match(productSetName).project;\n  }\n  /**\n   * Parse the location from ProductSet resource.\n   *\n   * @param {string} productSetName\n   *   A fully-qualified path representing ProductSet resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromProductSetName(productSetName) {\n    return this.pathTemplates.productSetPathTemplate.match(productSetName).location;\n  }\n  /**\n   * Parse the product_set from ProductSet resource.\n   *\n   * @param {string} productSetName\n   *   A fully-qualified path representing ProductSet resource.\n   * @returns {string} A string representing the product_set.\n   */\n\n\n  matchProductSetFromProductSetName(productSetName) {\n    return this.pathTemplates.productSetPathTemplate.match(productSetName).product_set;\n  }\n  /**\n   * Return a fully-qualified referenceImage resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} product\n   * @param {string} reference_image\n   * @returns {string} Resource name string.\n   */\n\n\n  referenceImagePath(project, location, product, referenceImage) {\n    return this.pathTemplates.referenceImagePathTemplate.render({\n      project: project,\n      location: location,\n      product: product,\n      reference_image: referenceImage\n    });\n  }\n  /**\n   * Parse the project from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the project.\n   */\n\n\n  matchProjectFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).project;\n  }\n  /**\n   * Parse the location from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the location.\n   */\n\n\n  matchLocationFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).location;\n  }\n  /**\n   * Parse the product from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the product.\n   */\n\n\n  matchProductFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).product;\n  }\n  /**\n   * Parse the reference_image from ReferenceImage resource.\n   *\n   * @param {string} referenceImageName\n   *   A fully-qualified path representing ReferenceImage resource.\n   * @returns {string} A string representing the reference_image.\n   */\n\n\n  matchReferenceImageFromReferenceImageName(referenceImageName) {\n    return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).reference_image;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    if (this.imageAnnotatorStub && !this._terminated) {\n      return this.imageAnnotatorStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n        this.operationsClient.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.ImageAnnotatorClient = ImageAnnotatorClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","ImageAnnotatorClient","jsonProtos","require","gapicConfig","version","constructor","opts","gaxInstance","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","numericEnums","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","pathTemplates","productPathTemplate","PathTemplate","productSetPathTemplate","referenceImagePathTemplate","protoFilesRoot","protobuf","Root","fromJSON","lroOptions","grpc","undefined","protoJson","httpRules","operationsClient","lro","asyncBatchAnnotateFilesResponse","lookup","asyncBatchAnnotateFilesMetadata","asyncBatchAnnotateFiles","LongrunningDescriptor","decode","bind","_defaults","constructSettings","join","innerApiCalls","warn","initialize","imageAnnotatorStub","createStub","lookupService","google","cloud","vision","v1p3beta1","ImageAnnotator","imageAnnotatorStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","apiCall","createApiCall","getProjectId","callback","batchAnnotateImages","request","optionsOrCallback","options","otherArgs","headers","checkAsyncBatchAnnotateFilesProgress","name","operationsProtos","GetOperationRequest","operation","getOperation","decodeOperation","Operation","createDefaultBackoffSettings","productPath","project","location","product","render","matchProjectFromProductName","productName","match","matchLocationFromProductName","matchProductFromProductName","productSetPath","productSet","product_set","matchProjectFromProductSetName","productSetName","matchLocationFromProductSetName","matchProductSetFromProductSetName","referenceImagePath","referenceImage","reference_image","matchProjectFromReferenceImageName","referenceImageName","matchLocationFromReferenceImageName","matchProductFromReferenceImageName","matchReferenceImageFromReferenceImageName","close","resolve"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/@google-cloud/vision/build/src/v1p3beta1/image_annotator_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageAnnotatorClient = void 0;\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p3beta1/image_annotator_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./image_annotator_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that performs Google Cloud Vision API detection tasks over client\n *  images, such as face, landmark, logo, label, and text detection. The\n *  ImageAnnotator service returns detected entities from the images.\n * @class\n * @memberof v1p3beta1\n */\nclass ImageAnnotatorClient {\n    /**\n     * Construct an instance of ImageAnnotatorClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new ImageAnnotatorClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = staticMembers.servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            productPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}'),\n            productSetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/productSets/{product_set}'),\n            referenceImagePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/products/{product}/referenceImages/{reference_image}'),\n        };\n        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const lroOptions = {\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        };\n        if (opts.fallback) {\n            lroOptions.protoJson = protoFilesRoot;\n            lroOptions.httpRules = [];\n        }\n        this.operationsClient = this._gaxModule\n            .lro(lroOptions)\n            .operationsClient(opts);\n        const asyncBatchAnnotateFilesResponse = protoFilesRoot.lookup('.google.cloud.vision.v1p3beta1.AsyncBatchAnnotateFilesResponse');\n        const asyncBatchAnnotateFilesMetadata = protoFilesRoot.lookup('.google.cloud.vision.v1p3beta1.OperationMetadata');\n        this.descriptors.longrunning = {\n            asyncBatchAnnotateFiles: new this._gaxModule.LongrunningDescriptor(this.operationsClient, asyncBatchAnnotateFilesResponse.decode.bind(asyncBatchAnnotateFilesResponse), asyncBatchAnnotateFilesMetadata.decode.bind(asyncBatchAnnotateFilesMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p3beta1.ImageAnnotator', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.imageAnnotatorStub) {\n            return this.imageAnnotatorStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.vision.v1p3beta1.ImageAnnotator.\n        this.imageAnnotatorStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.vision.v1p3beta1.ImageAnnotator')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.vision.v1p3beta1.ImageAnnotator, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const imageAnnotatorStubMethods = [\n            'batchAnnotateImages',\n            'asyncBatchAnnotateFiles',\n        ];\n        for (const methodName of imageAnnotatorStubMethods) {\n            const callPromise = this.imageAnnotatorStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.longrunning[methodName] || undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.imageAnnotatorStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloud-vision',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    batchAnnotateImages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        this.initialize();\n        return this.innerApiCalls.batchAnnotateImages(request, options, callback);\n    }\n    asyncBatchAnnotateFiles(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        this.initialize();\n        return this.innerApiCalls.asyncBatchAnnotateFiles(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `asyncBatchAnnotateFiles()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1p3beta1/image_annotator.async_batch_annotate_files.js</caption>\n     * region_tag:vision_v1p3beta1_generated_ImageAnnotator_AsyncBatchAnnotateFiles_async\n     */\n    async checkAsyncBatchAnnotateFilesProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.asyncBatchAnnotateFiles, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified product resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} product\n     * @returns {string} Resource name string.\n     */\n    productPath(project, location, product) {\n        return this.pathTemplates.productPathTemplate.render({\n            project: project,\n            location: location,\n            product: product,\n        });\n    }\n    /**\n     * Parse the project from Product resource.\n     *\n     * @param {string} productName\n     *   A fully-qualified path representing Product resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProductName(productName) {\n        return this.pathTemplates.productPathTemplate.match(productName).project;\n    }\n    /**\n     * Parse the location from Product resource.\n     *\n     * @param {string} productName\n     *   A fully-qualified path representing Product resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProductName(productName) {\n        return this.pathTemplates.productPathTemplate.match(productName).location;\n    }\n    /**\n     * Parse the product from Product resource.\n     *\n     * @param {string} productName\n     *   A fully-qualified path representing Product resource.\n     * @returns {string} A string representing the product.\n     */\n    matchProductFromProductName(productName) {\n        return this.pathTemplates.productPathTemplate.match(productName).product;\n    }\n    /**\n     * Return a fully-qualified productSet resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} product_set\n     * @returns {string} Resource name string.\n     */\n    productSetPath(project, location, productSet) {\n        return this.pathTemplates.productSetPathTemplate.render({\n            project: project,\n            location: location,\n            product_set: productSet,\n        });\n    }\n    /**\n     * Parse the project from ProductSet resource.\n     *\n     * @param {string} productSetName\n     *   A fully-qualified path representing ProductSet resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProductSetName(productSetName) {\n        return this.pathTemplates.productSetPathTemplate.match(productSetName)\n            .project;\n    }\n    /**\n     * Parse the location from ProductSet resource.\n     *\n     * @param {string} productSetName\n     *   A fully-qualified path representing ProductSet resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromProductSetName(productSetName) {\n        return this.pathTemplates.productSetPathTemplate.match(productSetName)\n            .location;\n    }\n    /**\n     * Parse the product_set from ProductSet resource.\n     *\n     * @param {string} productSetName\n     *   A fully-qualified path representing ProductSet resource.\n     * @returns {string} A string representing the product_set.\n     */\n    matchProductSetFromProductSetName(productSetName) {\n        return this.pathTemplates.productSetPathTemplate.match(productSetName)\n            .product_set;\n    }\n    /**\n     * Return a fully-qualified referenceImage resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} product\n     * @param {string} reference_image\n     * @returns {string} Resource name string.\n     */\n    referenceImagePath(project, location, product, referenceImage) {\n        return this.pathTemplates.referenceImagePathTemplate.render({\n            project: project,\n            location: location,\n            product: product,\n            reference_image: referenceImage,\n        });\n    }\n    /**\n     * Parse the project from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).project;\n    }\n    /**\n     * Parse the location from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).location;\n    }\n    /**\n     * Parse the product from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the product.\n     */\n    matchProductFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).product;\n    }\n    /**\n     * Parse the reference_image from ReferenceImage resource.\n     *\n     * @param {string} referenceImageName\n     *   A fully-qualified path representing ReferenceImage resource.\n     * @returns {string} A string representing the reference_image.\n     */\n    matchReferenceImageFromReferenceImageName(referenceImageName) {\n        return this.pathTemplates.referenceImagePathTemplate.match(referenceImageName).reference_image;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.imageAnnotatorStub && !this._terminated) {\n            return this.imageAnnotatorStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.operationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.ImageAnnotatorClient = ImageAnnotatorClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}