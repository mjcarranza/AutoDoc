{"ast":null,"code":"\"use strict\";\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\n\nvar wrappers = exports;\n\nvar Message = require(\"./message\");\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n// Custom wrapper for Any\n\n\nwrappers[\".google.protobuf.Any\"] = {\n  fromObject: function (object) {\n    // unwrap value type if mapped\n    if (object && object[\"@type\"]) {\n      // Only use fully qualified type name after the last '/'\n      var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n\n      if (type) {\n        // type_url does not accept leading \".\"\n        var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].slice(1) : object[\"@type\"]; // type_url prefix is optional, but path seperator is required\n\n        if (type_url.indexOf(\"/\") === -1) {\n          type_url = \"/\" + type_url;\n        }\n\n        return this.create({\n          type_url: type_url,\n          value: type.encode(type.fromObject(object)).finish()\n        });\n      }\n    }\n\n    return this.fromObject(object);\n  },\n  toObject: function (message, options) {\n    // Default prefix\n    var googleApi = \"type.googleapis.com/\";\n    var prefix = \"\";\n    var name = \"\"; // decode value if requested and unmapped\n\n    if (options && options.json && message.type_url && message.value) {\n      // Only use fully qualified type name after the last '/'\n      name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1); // Separate the prefix used\n\n      prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n\n      if (type) message = type.decode(message.value);\n    } // wrap value if unmapped\n\n\n    if (!(message instanceof this.ctor) && message instanceof Message) {\n      var object = message.$type.toObject(message, options);\n      var messageName = message.$type.fullName[0] === \".\" ? message.$type.fullName.slice(1) : message.$type.fullName; // Default to type.googleapis.com prefix if no prefix is used\n\n      if (prefix === \"\") {\n        prefix = googleApi;\n      }\n\n      name = prefix + messageName;\n      object[\"@type\"] = name;\n      return object;\n    }\n\n    return this.toObject(message, options);\n  }\n};","map":{"version":3,"names":["wrappers","exports","Message","require","fromObject","object","name","substring","lastIndexOf","type","lookup","type_url","charAt","slice","indexOf","create","value","encode","finish","toObject","message","options","googleApi","prefix","json","decode","ctor","$type","messageName","fullName"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/protobufjs/src/wrappers.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(\"./message\");\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n             // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].slice(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ?\n                message.$type.fullName.slice(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}