{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectGCPResidency = exports.isGoogleComputeEngine = exports.isGoogleComputeEngineMACAddress = exports.isGoogleComputeEngineLinux = exports.isGoogleCloudServerless = exports.GCE_LINUX_BIOS_PATHS = void 0;\n\nconst fs_1 = require(\"fs\");\n\nconst os_1 = require(\"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */\n\n\nexports.GCE_LINUX_BIOS_PATHS = {\n  BIOS_DATE: '/sys/class/dmi/id/bios_date',\n  BIOS_VENDOR: '/sys/class/dmi/id/bios_vendor'\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */\n\nfunction isGoogleCloudServerless() {\n  /**\n   * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   *\n   * `FUNCTION_NAME` is used in older Cloud Functions environments:\n   * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n   *\n   * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n   * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n   * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n   */\n  const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;\n  return !!isGFEnvironment;\n}\n\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */\n\nfunction isGoogleComputeEngineLinux() {\n  if ((0, os_1.platform)() !== 'linux') return false;\n\n  try {\n    // ensure this file exist\n    (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE); // ensure this file exist and matches\n\n    const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, 'utf8');\n    return /Google/.test(biosVendor);\n  } catch (_a) {\n    return false;\n  }\n}\n\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */\n\nfunction isGoogleComputeEngineMACAddress() {\n  const interfaces = (0, os_1.networkInterfaces)();\n\n  for (const item of Object.values(interfaces)) {\n    if (!item) continue;\n\n    for (const {\n      mac\n    } of item) {\n      if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */\n\nfunction isGoogleComputeEngine() {\n  return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\n\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */\n\nfunction detectGCPResidency() {\n  return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\n\nexports.detectGCPResidency = detectGCPResidency;","map":{"version":3,"names":["Object","defineProperty","exports","value","detectGCPResidency","isGoogleComputeEngine","isGoogleComputeEngineMACAddress","isGoogleComputeEngineLinux","isGoogleCloudServerless","GCE_LINUX_BIOS_PATHS","fs_1","require","os_1","BIOS_DATE","BIOS_VENDOR","GCE_MAC_ADDRESS_REGEX","isGFEnvironment","process","env","CLOUD_RUN_JOB","FUNCTION_NAME","K_SERVICE","platform","statSync","biosVendor","readFileSync","test","_a","interfaces","networkInterfaces","item","values","mac"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/gcp-metadata/build/src/gcp-residency.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.detectGCPResidency = exports.isGoogleComputeEngine = exports.isGoogleComputeEngineMACAddress = exports.isGoogleComputeEngineLinux = exports.isGoogleCloudServerless = exports.GCE_LINUX_BIOS_PATHS = void 0;\nconst fs_1 = require(\"fs\");\nconst os_1 = require(\"os\");\n/**\n * Known paths unique to Google Compute Engine Linux instances\n */\nexports.GCE_LINUX_BIOS_PATHS = {\n    BIOS_DATE: '/sys/class/dmi/id/bios_date',\n    BIOS_VENDOR: '/sys/class/dmi/id/bios_vendor',\n};\nconst GCE_MAC_ADDRESS_REGEX = /^42:01/;\n/**\n * Determines if the process is running on a Google Cloud Serverless environment (Cloud Run or Cloud Functions instance).\n *\n * Uses the:\n * - {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n * - {@link https://cloud.google.com/functions/docs/env-var Cloud Functions environment variables}.\n *\n * @returns {boolean} `true` if the process is running on GCP serverless, `false` otherwise.\n */\nfunction isGoogleCloudServerless() {\n    /**\n     * `CLOUD_RUN_JOB` is used for Cloud Run Jobs\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     *\n     * `FUNCTION_NAME` is used in older Cloud Functions environments:\n     * - See {@link https://cloud.google.com/functions/docs/env-var Python 3.7 and Go 1.11}.\n     *\n     * `K_SERVICE` is used in Cloud Run and newer Cloud Functions environments:\n     * - See {@link https://cloud.google.com/run/docs/container-contract#env-vars Cloud Run environment variables}.\n     * - See {@link https://cloud.google.com/functions/docs/env-var Cloud Functions newer runtimes}.\n     */\n    const isGFEnvironment = process.env.CLOUD_RUN_JOB ||\n        process.env.FUNCTION_NAME ||\n        process.env.K_SERVICE;\n    return !!isGFEnvironment;\n}\nexports.isGoogleCloudServerless = isGoogleCloudServerless;\n/**\n * Determines if the process is running on a Linux Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on Linux GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngineLinux() {\n    if ((0, os_1.platform)() !== 'linux')\n        return false;\n    try {\n        // ensure this file exist\n        (0, fs_1.statSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_DATE);\n        // ensure this file exist and matches\n        const biosVendor = (0, fs_1.readFileSync)(exports.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, 'utf8');\n        return /Google/.test(biosVendor);\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexports.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;\n/**\n * Determines if the process is running on a Google Compute Engine instance with a known\n * MAC address.\n *\n * @returns {boolean} `true` if the process is running on GCE (as determined by MAC address), `false` otherwise.\n */\nfunction isGoogleComputeEngineMACAddress() {\n    const interfaces = (0, os_1.networkInterfaces)();\n    for (const item of Object.values(interfaces)) {\n        if (!item)\n            continue;\n        for (const { mac } of item) {\n            if (GCE_MAC_ADDRESS_REGEX.test(mac)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexports.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;\n/**\n * Determines if the process is running on a Google Compute Engine instance.\n *\n * @returns {boolean} `true` if the process is running on GCE, `false` otherwise.\n */\nfunction isGoogleComputeEngine() {\n    return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();\n}\nexports.isGoogleComputeEngine = isGoogleComputeEngine;\n/**\n * Determines if the process is running on Google Cloud Platform.\n *\n * @returns {boolean} `true` if the process is running on GCP, `false` otherwise.\n */\nfunction detectGCPResidency() {\n    return isGoogleCloudServerless() || isGoogleComputeEngine();\n}\nexports.detectGCPResidency = detectGCPResidency;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,+BAAR,GAA0CJ,OAAO,CAACK,0BAAR,GAAqCL,OAAO,CAACM,uBAAR,GAAkCN,OAAO,CAACO,oBAAR,GAA+B,KAAK,CAAlN;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,IAAD,CAApB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAD,CAApB;AACA;AACA;AACA;;;AACAT,OAAO,CAACO,oBAAR,GAA+B;EAC3BI,SAAS,EAAE,6BADgB;EAE3BC,WAAW,EAAE;AAFc,CAA/B;AAIA,MAAMC,qBAAqB,GAAG,QAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASP,uBAAT,GAAmC;EAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMQ,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IACpBF,OAAO,CAACC,GAAR,CAAYE,aADQ,IAEpBH,OAAO,CAACC,GAAR,CAAYG,SAFhB;EAGA,OAAO,CAAC,CAACL,eAAT;AACH;;AACDd,OAAO,CAACM,uBAAR,GAAkCA,uBAAlC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,0BAAT,GAAsC;EAClC,IAAI,CAAC,GAAGK,IAAI,CAACU,QAAT,QAAyB,OAA7B,EACI,OAAO,KAAP;;EACJ,IAAI;IACA;IACA,CAAC,GAAGZ,IAAI,CAACa,QAAT,EAAmBrB,OAAO,CAACO,oBAAR,CAA6BI,SAAhD,EAFA,CAGA;;IACA,MAAMW,UAAU,GAAG,CAAC,GAAGd,IAAI,CAACe,YAAT,EAAuBvB,OAAO,CAACO,oBAAR,CAA6BK,WAApD,EAAiE,MAAjE,CAAnB;IACA,OAAO,SAASY,IAAT,CAAcF,UAAd,CAAP;EACH,CAND,CAOA,OAAOG,EAAP,EAAW;IACP,OAAO,KAAP;EACH;AACJ;;AACDzB,OAAO,CAACK,0BAAR,GAAqCA,0BAArC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,+BAAT,GAA2C;EACvC,MAAMsB,UAAU,GAAG,CAAC,GAAGhB,IAAI,CAACiB,iBAAT,GAAnB;;EACA,KAAK,MAAMC,IAAX,IAAmB9B,MAAM,CAAC+B,MAAP,CAAcH,UAAd,CAAnB,EAA8C;IAC1C,IAAI,CAACE,IAAL,EACI;;IACJ,KAAK,MAAM;MAAEE;IAAF,CAAX,IAAsBF,IAAtB,EAA4B;MACxB,IAAIf,qBAAqB,CAACW,IAAtB,CAA2BM,GAA3B,CAAJ,EAAqC;QACjC,OAAO,IAAP;MACH;IACJ;EACJ;;EACD,OAAO,KAAP;AACH;;AACD9B,OAAO,CAACI,+BAAR,GAA0CA,+BAA1C;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,qBAAT,GAAiC;EAC7B,OAAOE,0BAA0B,MAAMD,+BAA+B,EAAtE;AACH;;AACDJ,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,kBAAT,GAA8B;EAC1B,OAAOI,uBAAuB,MAAMH,qBAAqB,EAAzD;AACH;;AACDH,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B"},"metadata":{},"sourceType":"script"}