{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Service; // extends Namespace\n\nvar Namespace = require(\"./namespace\");\n\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(\"./method\"),\n    util = require(\"./util\"),\n    rpc = require(\"./rpc\");\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\n\n\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n  /**\n   * Service methods.\n   * @type {Object.<string,Method>}\n   */\n\n  this.methods = {}; // toJSON, marker\n\n  /**\n   * Cached methods as an array.\n   * @type {Method[]|null}\n   * @private\n   */\n\n  this._methodsArray = null;\n}\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\n\n\nService.fromJSON = function fromJSON(name, json) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n\n  if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n  if (json.nested) service.addJSON(json.nested);\n  service.comment = json.comment;\n  return service;\n};\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\n\n\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"methods\", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) ||\n  /* istanbul ignore next */\n  {}, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\n\n\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function () {\n    return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n  }\n});\n\nfunction clearCache(service) {\n  service._methodsArray = null;\n  return service;\n}\n/**\n * @override\n */\n\n\nService.prototype.get = function get(name) {\n  return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n/**\n * @override\n */\n\n\nService.prototype.resolveAll = function resolveAll() {\n  var methods = this.methodsArray;\n\n  for (var i = 0; i < methods.length; ++i) methods[i].resolve();\n\n  return Namespace.prototype.resolve.call(this);\n};\n/**\n * @override\n */\n\n\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return clearCache(this);\n  }\n\n  return Namespace.prototype.add.call(this, object);\n};\n/**\n * @override\n */\n\n\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.methods[object.name];\n    object.parent = null;\n    return clearCache(this);\n  }\n\n  return Namespace.prototype.remove.call(this, object);\n};\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\n\n\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n\n  for (var i = 0, method; i <\n  /* initializes */\n  this.methodsArray.length; ++i) {\n    var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n    rpcService[methodName] = util.codegen([\"r\", \"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n      m: method,\n      q: method.resolvedRequestType.ctor,\n      s: method.resolvedResponseType.ctor\n    });\n  }\n\n  return rpcService;\n};","map":{"version":3,"names":["module","exports","Service","Namespace","require","prototype","Object","create","constructor","className","Method","util","rpc","name","options","call","methods","_methodsArray","fromJSON","json","service","names","keys","i","length","add","nested","addJSON","comment","toJSON","toJSONOptions","inherited","keepComments","Boolean","toObject","undefined","arrayToJSON","methodsArray","defineProperty","get","toArray","clearCache","resolveAll","resolve","object","Error","parent","remove","rpcImpl","requestDelimited","responseDelimited","rpcService","method","methodName","lcFirst","replace","codegen","isReserved","m","q","resolvedRequestType","ctor","s","resolvedResponseType"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/protobufjs/src/service.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(\"./method\"),\n    util   = require(\"./util\"),\n    rpc    = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}