{"ast":null,"code":"\"use strict\"; // Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\n\nconst events_1 = require(\"events\");\n\nconst transporters_1 = require(\"../transporters\");\n\nconst util_1 = require(\"../util\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */\n\n\nexports.DEFAULT_UNIVERSE = 'googleapis.com';\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */\n\nexports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\n\nclass AuthClient extends events_1.EventEmitter {\n  constructor(opts = {}) {\n    var _a, _b, _c, _d, _e;\n\n    super();\n    this.credentials = {};\n    this.eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n    this.forceRefreshOnFailure = false;\n    this.universeDomain = exports.DEFAULT_UNIVERSE;\n    const options = (0, util_1.originalOrCamelOptions)(opts); // Shared auth options\n\n    this.projectId = (_a = options.get('project_id')) !== null && _a !== void 0 ? _a : null;\n    this.quotaProjectId = options.get('quota_project_id');\n    this.credentials = (_b = options.get('credentials')) !== null && _b !== void 0 ? _b : {};\n    this.universeDomain = (_c = options.get('universe_domain')) !== null && _c !== void 0 ? _c : exports.DEFAULT_UNIVERSE; // Shared client options\n\n    this.transporter = (_d = opts.transporter) !== null && _d !== void 0 ? _d : new transporters_1.DefaultTransporter();\n\n    if (opts.transporterOptions) {\n      this.transporter.defaults = opts.transporterOptions;\n    }\n\n    if (opts.eagerRefreshThresholdMillis) {\n      this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n    }\n\n    this.forceRefreshOnFailure = (_e = opts.forceRefreshOnFailure) !== null && _e !== void 0 ? _e : false;\n  }\n  /**\n   * Sets the auth credentials.\n   */\n\n\n  setCredentials(credentials) {\n    this.credentials = credentials;\n  }\n  /**\n   * Append additional headers, e.g., x-goog-user-project, shared across the\n   * classes inheriting AuthClient. This method should be used by any method\n   * that overrides getRequestMetadataAsync(), which is a shared helper for\n   * setting request information in both gRPC and HTTP API calls.\n   *\n   * @param headers object to append additional headers to.\n   */\n\n\n  addSharedMetadataHeaders(headers) {\n    // quota_project_id, stored in application_default_credentials.json, is set in\n    // the x-goog-user-project header, to indicate an alternate account for\n    // billing and quota:\n    if (!headers['x-goog-user-project'] && // don't override a value the user sets.\n    this.quotaProjectId) {\n      headers['x-goog-user-project'] = this.quotaProjectId;\n    }\n\n    return headers;\n  }\n\n}\n\nexports.AuthClient = AuthClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","AuthClient","DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS","DEFAULT_UNIVERSE","events_1","require","transporters_1","util_1","EventEmitter","constructor","opts","_a","_b","_c","_d","_e","credentials","eagerRefreshThresholdMillis","forceRefreshOnFailure","universeDomain","options","originalOrCamelOptions","projectId","get","quotaProjectId","transporter","DefaultTransporter","transporterOptions","defaults","setCredentials","addSharedMetadataHeaders","headers"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-auth-library/build/src/auth/authclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = require(\"events\");\nconst transporters_1 = require(\"../transporters\");\nconst util_1 = require(\"../util\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */\nexports.DEFAULT_UNIVERSE = 'googleapis.com';\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */\nexports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nclass AuthClient extends events_1.EventEmitter {\n    constructor(opts = {}) {\n        var _a, _b, _c, _d, _e;\n        super();\n        this.credentials = {};\n        this.eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n        this.forceRefreshOnFailure = false;\n        this.universeDomain = exports.DEFAULT_UNIVERSE;\n        const options = (0, util_1.originalOrCamelOptions)(opts);\n        // Shared auth options\n        this.projectId = (_a = options.get('project_id')) !== null && _a !== void 0 ? _a : null;\n        this.quotaProjectId = options.get('quota_project_id');\n        this.credentials = (_b = options.get('credentials')) !== null && _b !== void 0 ? _b : {};\n        this.universeDomain = (_c = options.get('universe_domain')) !== null && _c !== void 0 ? _c : exports.DEFAULT_UNIVERSE;\n        // Shared client options\n        this.transporter = (_d = opts.transporter) !== null && _d !== void 0 ? _d : new transporters_1.DefaultTransporter();\n        if (opts.transporterOptions) {\n            this.transporter.defaults = opts.transporterOptions;\n        }\n        if (opts.eagerRefreshThresholdMillis) {\n            this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = (_e = opts.forceRefreshOnFailure) !== null && _e !== void 0 ? _e : false;\n    }\n    /**\n     * Sets the auth credentials.\n     */\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers object to append additional headers to.\n     */\n    addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers['x-goog-user-project'] && // don't override a value the user sets.\n            this.quotaProjectId) {\n            headers['x-goog-user-project'] = this.quotaProjectId;\n        }\n        return headers;\n    }\n}\nexports.AuthClient = AuthClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}