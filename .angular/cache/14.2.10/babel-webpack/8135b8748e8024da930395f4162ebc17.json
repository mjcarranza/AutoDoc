{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { environment } from 'src/environments/environment';\nimport { gptModels } from '../models/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\n\nfunction DemoComponent_h4_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Procesando, espere...\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DemoComponent_div_23_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", data_r4, \" \");\n  }\n}\n\nfunction DemoComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DemoComponent_div_23_p_1_Template, 3, 1, \"p\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const choice_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.getText(choice_r2.text));\n  }\n}\n\nexport class DemoComponent {\n  constructor() {\n    this.gptModels = gptModels;\n    this.promptText = '';\n    this.showSpinner = false;\n  }\n\n  ngOnInit() {}\n\n  checkResponse() {\n    this.invokeGPT();\n  }\n\n  getText(data) {\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n\n  invokeGPT() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        let requestData = {\n          model: 'text-davinci-003',\n          prompt: _this.promptText + ' por favor resuma la respuesta en 200 tokens.',\n          temperature: 0.95,\n          max_tokens: 300,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0\n        };\n        _this.showSpinner = true;\n        let apiResponse = yield openai.createCompletion(requestData);\n        _this.response = apiResponse.data;\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false; // Consider adjusting the error handling logic for your use case\n\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n\n  generatePrompt(animal) {\n    const capitalizedAnimal = animal[0].toUpperCase() + animal.slice(1).toLowerCase();\n    return `Suggest three names for an animal that is a superhero.\n  Animal: Cat\n  Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline\n  Animal: Dog\n  Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot\n  Animal: ${capitalizedAnimal}\n  Names:`;\n  }\n\n}\n\nDemoComponent.ɵfac = function DemoComponent_Factory(t) {\n  return new (t || DemoComponent)();\n};\n\nDemoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DemoComponent,\n  selectors: [[\"app-demo\"]],\n  decls: 25,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-6\"], [1, \"form-group\"], [\"rows\", \"10\", \"placeholder\", \"Escriba su pregunta aqu\\u00ED...\", \"cols\", \"6\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"responseStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"responseStyle\"]],\n  template: function DemoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \" Hasle cualquier pregunta sobre mecanica a AutoDoc IA \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\")(4, \"p\");\n      i0.ɵɵtext(5, \"This is a demo app to see how powerful ChatGPT answers your questions to technology. \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(6, \"hr\");\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"div\", 2)(9, \"div\", 3)(10, \"h3\");\n      i0.ɵɵtext(11, \"Pregunta para AutoDocIA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"hr\");\n      i0.ɵɵelementStart(13, \"textarea\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function DemoComponent_Template_textarea_ngModelChange_13_listener($event) {\n        return ctx.promptText = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\");\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function DemoComponent_Template_button_click_16_listener() {\n        return ctx.checkResponse();\n      });\n      i0.ɵɵtext(17, \"Preguntar\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(18, \"div\", 2)(19, \"h3\");\n      i0.ɵɵtext(20, \"Respuesta de AutoDoc IA\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"hr\");\n      i0.ɵɵtemplate(22, DemoComponent_h4_22_Template, 2, 0, \"h4\", 6);\n      i0.ɵɵtemplate(23, DemoComponent_div_23_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(24, \"br\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngModel\", ctx.promptText);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.response == null ? null : ctx.response.choices);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkZW1vLmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Configuration","OpenAIApi","environment","gptModels","i0","DemoComponent","constructor","ngOnInit","checkResponse","invokeGPT","getText","data","split","filter","f","length","promptText","response","undefined","configuration","apiKey","openai","requestData","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","showSpinner","apiResponse","createCompletion","error","console","status","message","generatePrompt","animal","capitalizedAnimal","toUpperCase","slice","toLowerCase","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\mario\\Desktop\\AutoDocIA\\src\\app\\demo\\demo.component.ts","C:\\Users\\mario\\Desktop\\AutoDocIA\\src\\app\\demo\\demo.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport {Configuration, OpenAIApi} from \"openai\";\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { gptModels } from '../models/constants';\r\nimport { ResponseModel } from '../models/gpt-response';\r\n\r\n\r\n@Component({\r\n  selector: 'app-demo',\r\n  templateUrl: './demo.component.html',\r\n  styleUrls: ['demo.component.css'],\r\n})\r\nexport class DemoComponent implements OnInit {\r\n    response!: ResponseModel | undefined;\r\n    gptModels = gptModels\r\n    promptText = '';\r\n    showSpinner = false;\r\n\r\n  constructor(\r\n    \r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    \r\n  }\r\n\r\n  checkResponse() {\r\n    this.invokeGPT();\r\n  }\r\n\r\n  getText(data:string) {\r\n    return data.split('\\n').filter(f=>f.length>0);\r\n  }\r\n\r\n  async invokeGPT() {\r\n\r\n    if(this.promptText.length<2)\r\n    return;\r\n\r\n    try{\r\n      this.response =undefined;\r\n      let configuration = new Configuration({apiKey: environment.apiKey});\r\n      let openai = new OpenAIApi(configuration);\r\n\r\n      let requestData={\r\n        model: 'text-davinci-003',//'text-davinci-003',//\"text-curie-001\",\r\n        prompt: this.promptText + ' por favor resuma la respuesta en 200 tokens.',//this.generatePrompt(animal),\r\n        temperature: 0.95,\r\n        max_tokens: 300,\r\n        top_p: 1.0,\r\n        frequency_penalty: 0.0,\r\n        presence_penalty: 0.0,\r\n      };\r\n      this.showSpinner = true;\r\n      let apiResponse =  await openai.createCompletion(requestData);\r\n\r\n      this.response = apiResponse.data as ResponseModel;\r\n      this.showSpinner = false;\r\n    }catch(error:any) {\r\n      this.showSpinner = false;\r\n      // Consider adjusting the error handling logic for your use case\r\n      if (error.response) {\r\n        console.error(error.response.status, error.response.data);\r\n        \r\n      } else {\r\n        console.error(`Error with OpenAI API request: ${error.message}`);\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n   generatePrompt(animal:string) {\r\n    const capitalizedAnimal =\r\n      animal[0].toUpperCase() + animal.slice(1).toLowerCase();\r\n    return `Suggest three names for an animal that is a superhero.\r\n  Animal: Cat\r\n  Names: Captain Sharpclaw, Agent Fluffball, The Incredible Feline\r\n  Animal: Dog\r\n  Names: Ruff the Protector, Wonder Canine, Sir Barks-a-Lot\r\n  Animal: ${capitalizedAnimal}\r\n  Names:`;\r\n  }\r\n\r\n  \r\n}\r\n\r\n\r\n//https://beta.openai.com/docs/api-reference/completions/create","<div class=\"container\">\r\n    <h2>\r\n       Hasle cualquier pregunta sobre mecanica a AutoDoc IA\r\n    </h2>\r\n    <div>\r\n        <p>This is a demo app to see how powerful ChatGPT answers your questions to technology.\r\n        </p>\r\n    </div>\r\n    <hr>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6\">\r\n            <div\r\n                class=\"form-group\">\r\n                <h3>Pregunta para AutoDocIA</h3><hr>\r\n                <!-- <label for=\"name\">Prompt</label> -->\r\n            <textarea rows=\"10\" placeholder=\"Escriba su pregunta aquí...\" class=\"form-control\" cols=\"6\" [(ngModel)]=\"promptText\"></textarea>\r\n            </div>\r\n\r\n            <div>\r\n                <br>\r\n                <button class=\"btn btn-primary\" (click)=\"checkResponse()\">Preguntar</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n            <h3>Respuesta de AutoDoc IA</h3><hr>\r\n            <h4 *ngIf=\"showSpinner\">Procesando, espere...</h4>\r\n            <div *ngFor=\"let choice of response?.choices\">\r\n                <p *ngFor=\"let data of getText(choice.text)\" class=\"responseStyle\"> {{data}} <br> </p>                        \r\n            </div>\r\n        </div>\r\n    </div>\r\n    <br>\r\n</div>\r\n\r\n"]},"metadata":{},"sourceType":"module"}