{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Enum; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(\"./namespace\"),\n    util = require(\"./util\");\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\n */\n\n\nfunction Enum(name, values, options, comment, comments, valuesOptions) {\n  ReflectionObject.call(this, name, options);\n  if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n  /**\n   * Enum values by id.\n   * @type {Object.<number,string>}\n   */\n\n  this.valuesById = {};\n  /**\n   * Enum values by name.\n   * @type {Object.<string,number>}\n   */\n\n  this.values = Object.create(this.valuesById); // toJSON, marker\n\n  /**\n   * Enum comment text.\n   * @type {string|null}\n   */\n\n  this.comment = comment;\n  /**\n   * Value comment texts, if any.\n   * @type {Object.<string,string>}\n   */\n\n  this.comments = comments || {};\n  /**\n   * Values options, if any\n   * @type {Object<string, Object<string, *>>|undefined}\n   */\n\n  this.valuesOptions = valuesOptions;\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n\n  this.reserved = undefined; // toJSON\n  // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n  // compatible enum. This is used by pbts to write actual enum definitions that work for\n  // static and reflection code alike instead of emitting generic object definitions.\n\n  if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) if (typeof values[keys[i]] === \"number\") // use forward entries only\n    this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n}\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\n\n\nEnum.fromJSON = function fromJSON(name, json) {\n  var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n  enm.reserved = json.reserved;\n  return enm;\n};\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\n\n\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"valuesOptions\", this.valuesOptions, \"values\", this.values, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"comment\", keepComments ? this.comment : undefined, \"comments\", keepComments ? this.comments : undefined]);\n};\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @param {Object.<string, *>|undefined} [options] Options, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\n\n\nEnum.prototype.add = function add(name, id, comment, options) {\n  // utilized by the parser but not by .fromJSON\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n  if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n  if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n  if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n  if (this.valuesById[id] !== undefined) {\n    if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n    this.values[name] = id;\n  } else this.valuesById[this.values[name] = id] = name;\n\n  if (options) {\n    if (this.valuesOptions === undefined) this.valuesOptions = {};\n    this.valuesOptions[name] = options || null;\n  }\n\n  this.comments[name] = comment || null;\n  return this;\n};\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\n\n\nEnum.prototype.remove = function remove(name) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  var val = this.values[name];\n  if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n  delete this.valuesById[val];\n  delete this.values[name];\n  delete this.comments[name];\n  if (this.valuesOptions) delete this.valuesOptions[name];\n  return this;\n};\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\n\n\nEnum.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\n\n\nEnum.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};","map":{"version":3,"names":["module","exports","Enum","ReflectionObject","require","prototype","Object","create","constructor","className","Namespace","util","name","values","options","comment","comments","valuesOptions","call","TypeError","valuesById","reserved","undefined","keys","i","length","fromJSON","json","enm","toJSON","toJSONOptions","keepComments","Boolean","toObject","add","id","isString","isInteger","Error","isReservedId","isReservedName","allow_alias","remove","val"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/protobufjs/src/enum.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(\"./namespace\"),\n    util = require(\"./util\");\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\n */\nfunction Enum(name, values, options, comment, comments, valuesOptions) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Values options, if any\n     * @type {Object<string, Object<string, *>>|undefined}\n     */\n    this.valuesOptions = valuesOptions;\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"       , this.options,\n        \"valuesOptions\" , this.valuesOptions,\n        \"values\"        , this.values,\n        \"reserved\"      , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"       , keepComments ? this.comment : undefined,\n        \"comments\"      , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @param {Object.<string, *>|undefined} [options] Options, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment, options) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    if (options) {\n        if (this.valuesOptions === undefined)\n            this.valuesOptions = {};\n        this.valuesOptions[name] = options || null;\n    }\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n    if (this.valuesOptions)\n        delete this.valuesOptions[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}