{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongrunningApiCaller = void 0;\n\nconst call_1 = require(\"../call\");\n\nconst gax_1 = require(\"../gax\");\n\nconst longrunning_1 = require(\"./longrunning\");\n\nclass LongrunningApiCaller {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  constructor(longrunningDescriptor) {\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n\n  init(callback) {\n    if (callback) {\n      return new call_1.OngoingCall(callback);\n    }\n\n    return new call_1.OngoingCallPromise();\n  }\n\n  wrap(func) {\n    return func;\n  }\n\n  call(apiCall, argument, settings, canceller) {\n    canceller.call((argument, callback) => {\n      return this._wrapOperation(apiCall, settings, argument, callback);\n    }, argument);\n  }\n\n  _wrapOperation(apiCall, settings, argument, callback) {\n    let backoffSettings = settings.longrunning;\n\n    if (!backoffSettings) {\n      backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n    }\n\n    const longrunningDescriptor = this.longrunningDescriptor;\n    return apiCall(argument, (err, rawResponse) => {\n      if (err) {\n        callback(err, null, null, rawResponse);\n        return;\n      }\n\n      const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n      callback(null, operation, rawResponse);\n    });\n  }\n\n  fail(canceller, err) {\n    canceller.callback(err);\n  }\n\n  result(canceller) {\n    return canceller.promise;\n  }\n\n}\n\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":{"version":3,"names":["Object","defineProperty","exports","value","LongrunningApiCaller","call_1","require","gax_1","longrunning_1","constructor","longrunningDescriptor","init","callback","OngoingCall","OngoingCallPromise","wrap","func","call","apiCall","argument","settings","canceller","_wrapOperation","backoffSettings","longrunning","createDefaultBackoffSettings","err","rawResponse","operation","Operation","fail","result","promise"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LongrunningApiCaller = void 0;\nconst call_1 = require(\"../call\");\nconst gax_1 = require(\"../gax\");\nconst longrunning_1 = require(\"./longrunning\");\nclass LongrunningApiCaller {\n    /**\n     * Creates an API caller that performs polling on a long running operation.\n     *\n     * @private\n     * @constructor\n     * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n     * decoders used for unpacking responses and the operationsClient\n     * used for polling the operation.\n     */\n    constructor(longrunningDescriptor) {\n        this.longrunningDescriptor = longrunningDescriptor;\n    }\n    init(callback) {\n        if (callback) {\n            return new call_1.OngoingCall(callback);\n        }\n        return new call_1.OngoingCallPromise();\n    }\n    wrap(func) {\n        return func;\n    }\n    call(apiCall, argument, settings, canceller) {\n        canceller.call((argument, callback) => {\n            return this._wrapOperation(apiCall, settings, argument, callback);\n        }, argument);\n    }\n    _wrapOperation(apiCall, settings, argument, callback) {\n        let backoffSettings = settings.longrunning;\n        if (!backoffSettings) {\n            backoffSettings = (0, gax_1.createDefaultBackoffSettings)();\n        }\n        const longrunningDescriptor = this.longrunningDescriptor;\n        return apiCall(argument, (err, rawResponse) => {\n            if (err) {\n                callback(err, null, null, rawResponse);\n                return;\n            }\n            const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n            callback(null, operation, rawResponse);\n        });\n    }\n    fail(canceller, err) {\n        canceller.callback(err);\n    }\n    result(canceller) {\n        return canceller.promise;\n    }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+B,KAAK,CAApC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAArB;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAMF,oBAAN,CAA2B;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAW,CAACC,qBAAD,EAAwB;IAC/B,KAAKA,qBAAL,GAA6BA,qBAA7B;EACH;;EACDC,IAAI,CAACC,QAAD,EAAW;IACX,IAAIA,QAAJ,EAAc;MACV,OAAO,IAAIP,MAAM,CAACQ,WAAX,CAAuBD,QAAvB,CAAP;IACH;;IACD,OAAO,IAAIP,MAAM,CAACS,kBAAX,EAAP;EACH;;EACDC,IAAI,CAACC,IAAD,EAAO;IACP,OAAOA,IAAP;EACH;;EACDC,IAAI,CAACC,OAAD,EAAUC,QAAV,EAAoBC,QAApB,EAA8BC,SAA9B,EAAyC;IACzCA,SAAS,CAACJ,IAAV,CAAe,CAACE,QAAD,EAAWP,QAAX,KAAwB;MACnC,OAAO,KAAKU,cAAL,CAAoBJ,OAApB,EAA6BE,QAA7B,EAAuCD,QAAvC,EAAiDP,QAAjD,CAAP;IACH,CAFD,EAEGO,QAFH;EAGH;;EACDG,cAAc,CAACJ,OAAD,EAAUE,QAAV,EAAoBD,QAApB,EAA8BP,QAA9B,EAAwC;IAClD,IAAIW,eAAe,GAAGH,QAAQ,CAACI,WAA/B;;IACA,IAAI,CAACD,eAAL,EAAsB;MAClBA,eAAe,GAAG,CAAC,GAAGhB,KAAK,CAACkB,4BAAV,GAAlB;IACH;;IACD,MAAMf,qBAAqB,GAAG,KAAKA,qBAAnC;IACA,OAAOQ,OAAO,CAACC,QAAD,EAAW,CAACO,GAAD,EAAMC,WAAN,KAAsB;MAC3C,IAAID,GAAJ,EAAS;QACLd,QAAQ,CAACc,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkBC,WAAlB,CAAR;QACA;MACH;;MACD,MAAMC,SAAS,GAAG,IAAIpB,aAAa,CAACqB,SAAlB,CAA4BF,WAA5B,EAAyCjB,qBAAzC,EAAgEa,eAAhE,EAAiFH,QAAjF,CAAlB;MACAR,QAAQ,CAAC,IAAD,EAAOgB,SAAP,EAAkBD,WAAlB,CAAR;IACH,CAPa,CAAd;EAQH;;EACDG,IAAI,CAACT,SAAD,EAAYK,GAAZ,EAAiB;IACjBL,SAAS,CAACT,QAAV,CAAmBc,GAAnB;EACH;;EACDK,MAAM,CAACV,SAAD,EAAY;IACd,OAAOA,SAAS,CAACW,OAAjB;EACH;;AA/CsB;;AAiD3B9B,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}