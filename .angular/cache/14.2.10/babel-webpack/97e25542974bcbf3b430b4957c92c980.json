{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultErrorRedactor = exports.GaxiosError = void 0;\n\nconst url_1 = require(\"url\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nclass GaxiosError extends Error {\n  constructor(message, config, response, error) {\n    super(message);\n    this.config = config;\n    this.response = response;\n    this.error = error;\n\n    if (this.response) {\n      try {\n        this.response.data = translateData(config.responseType, response === null || response === void 0 ? void 0 : response.data);\n      } catch (_a) {// best effort - don't throw an error within an error\n        // we could set `this.response.config.responseType = 'unknown'`, but\n        // that would mutate future calls with this config object.\n      }\n\n      this.status = this.response.status;\n    }\n\n    if (error && 'code' in error && error.code) {\n      this.code = error.code;\n    }\n\n    if (config.errorRedactor) {\n      const errorRedactor = config.errorRedactor; // shallow-copy config for redaction as we do not want\n      // future requests to have redacted information\n\n      this.config = { ...config\n      };\n\n      if (this.response) {\n        // copy response's config, as it may be recursively redacted\n        this.response = { ...this.response,\n          config: { ...this.response.config\n          }\n        };\n      }\n\n      const results = errorRedactor({\n        config,\n        response\n      });\n      this.config = { ...config,\n        ...results.config\n      };\n\n      if (this.response) {\n        this.response = { ...this.response,\n          ...results.response,\n          config\n        };\n      }\n    }\n  }\n\n}\n\nexports.GaxiosError = GaxiosError;\n\nfunction translateData(responseType, data) {\n  switch (responseType) {\n    case 'stream':\n      return data;\n\n    case 'json':\n      return JSON.parse(JSON.stringify(data));\n\n    case 'arraybuffer':\n      return JSON.parse(Buffer.from(data).toString('utf8'));\n\n    case 'blob':\n      return JSON.parse(data.text());\n\n    default:\n      return data;\n  }\n}\n/**\n * An experimental error redactor.\n *\n * @param config Config to potentially redact properties of\n * @param response Config to potentially redact properties of\n *\n * @experimental\n */\n\n\nfunction defaultErrorRedactor(data) {\n  const REDACT = '<<REDACTED> - See `errorRedactor` option in `gaxios` for configuration>.';\n\n  function redactHeaders(headers) {\n    if (!headers) return;\n\n    for (const key of Object.keys(headers)) {\n      // any casing of `Authentication`\n      if (/^authentication$/.test(key)) {\n        headers[key] = REDACT;\n      }\n    }\n  }\n\n  function redactString(obj, key) {\n    if (typeof obj === 'object' && obj !== null && typeof obj[key] === 'string') {\n      const text = obj[key];\n\n      if (/grant_type=/.test(text) || /assertion=/.test(text)) {\n        obj[key] = REDACT;\n      }\n    }\n  }\n\n  function redactObject(obj) {\n    if (typeof obj === 'object' && obj !== null) {\n      if ('grant_type' in obj) {\n        obj['grant_type'] = REDACT;\n      }\n\n      if ('assertion' in obj) {\n        obj['assertion'] = REDACT;\n      }\n    }\n  }\n\n  if (data.config) {\n    redactHeaders(data.config.headers);\n    redactString(data.config, 'data');\n    redactObject(data.config.data);\n    redactString(data.config, 'body');\n    redactObject(data.config.body);\n\n    try {\n      const url = new url_1.URL(data.config.url || '');\n\n      if (url.searchParams.has('token')) {\n        url.searchParams.set('token', REDACT);\n      }\n\n      data.config.url = url.toString();\n    } catch (_a) {// ignore error - no need to parse an invalid URL\n    }\n  }\n\n  if (data.response) {\n    defaultErrorRedactor({\n      config: data.response.config\n    });\n    redactHeaders(data.response.headers);\n    redactString(data.response, 'data');\n    redactObject(data.response.data);\n  }\n\n  return data;\n}\n\nexports.defaultErrorRedactor = defaultErrorRedactor;","map":{"version":3,"names":["Object","defineProperty","exports","value","defaultErrorRedactor","GaxiosError","url_1","require","Error","constructor","message","config","response","error","data","translateData","responseType","_a","status","code","errorRedactor","results","JSON","parse","stringify","Buffer","from","toString","text","REDACT","redactHeaders","headers","key","keys","test","redactString","obj","redactObject","body","url","URL","searchParams","has","set"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/gaxios/build/src/common.js"],"sourcesContent":["\"use strict\";\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultErrorRedactor = exports.GaxiosError = void 0;\nconst url_1 = require(\"url\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nclass GaxiosError extends Error {\n    constructor(message, config, response, error) {\n        super(message);\n        this.config = config;\n        this.response = response;\n        this.error = error;\n        if (this.response) {\n            try {\n                this.response.data = translateData(config.responseType, response === null || response === void 0 ? void 0 : response.data);\n            }\n            catch (_a) {\n                // best effort - don't throw an error within an error\n                // we could set `this.response.config.responseType = 'unknown'`, but\n                // that would mutate future calls with this config object.\n            }\n            this.status = this.response.status;\n        }\n        if (error && 'code' in error && error.code) {\n            this.code = error.code;\n        }\n        if (config.errorRedactor) {\n            const errorRedactor = (config.errorRedactor);\n            // shallow-copy config for redaction as we do not want\n            // future requests to have redacted information\n            this.config = { ...config };\n            if (this.response) {\n                // copy response's config, as it may be recursively redacted\n                this.response = { ...this.response, config: { ...this.response.config } };\n            }\n            const results = errorRedactor({ config, response });\n            this.config = { ...config, ...results.config };\n            if (this.response) {\n                this.response = { ...this.response, ...results.response, config };\n            }\n        }\n    }\n}\nexports.GaxiosError = GaxiosError;\nfunction translateData(responseType, data) {\n    switch (responseType) {\n        case 'stream':\n            return data;\n        case 'json':\n            return JSON.parse(JSON.stringify(data));\n        case 'arraybuffer':\n            return JSON.parse(Buffer.from(data).toString('utf8'));\n        case 'blob':\n            return JSON.parse(data.text());\n        default:\n            return data;\n    }\n}\n/**\n * An experimental error redactor.\n *\n * @param config Config to potentially redact properties of\n * @param response Config to potentially redact properties of\n *\n * @experimental\n */\nfunction defaultErrorRedactor(data) {\n    const REDACT = '<<REDACTED> - See `errorRedactor` option in `gaxios` for configuration>.';\n    function redactHeaders(headers) {\n        if (!headers)\n            return;\n        for (const key of Object.keys(headers)) {\n            // any casing of `Authentication`\n            if (/^authentication$/.test(key)) {\n                headers[key] = REDACT;\n            }\n        }\n    }\n    function redactString(obj, key) {\n        if (typeof obj === 'object' &&\n            obj !== null &&\n            typeof obj[key] === 'string') {\n            const text = obj[key];\n            if (/grant_type=/.test(text) || /assertion=/.test(text)) {\n                obj[key] = REDACT;\n            }\n        }\n    }\n    function redactObject(obj) {\n        if (typeof obj === 'object' && obj !== null) {\n            if ('grant_type' in obj) {\n                obj['grant_type'] = REDACT;\n            }\n            if ('assertion' in obj) {\n                obj['assertion'] = REDACT;\n            }\n        }\n    }\n    if (data.config) {\n        redactHeaders(data.config.headers);\n        redactString(data.config, 'data');\n        redactObject(data.config.data);\n        redactString(data.config, 'body');\n        redactObject(data.config.body);\n        try {\n            const url = new url_1.URL(data.config.url || '');\n            if (url.searchParams.has('token')) {\n                url.searchParams.set('token', REDACT);\n            }\n            data.config.url = url.toString();\n        }\n        catch (_a) {\n            // ignore error - no need to parse an invalid URL\n        }\n    }\n    if (data.response) {\n        defaultErrorRedactor({ config: data.response.config });\n        redactHeaders(data.response.headers);\n        redactString(data.response, 'data');\n        redactObject(data.response.data);\n    }\n    return data;\n}\nexports.defaultErrorRedactor = defaultErrorRedactor;\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,oBAAR,GAA+BF,OAAO,CAACG,WAAR,GAAsB,KAAK,CAA1D;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,KAAD,CAArB;AACA;;;AACA,MAAMF,WAAN,SAA0BG,KAA1B,CAAgC;EAC5BC,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,KAA5B,EAAmC;IAC1C,MAAMH,OAAN;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,KAAL,GAAaA,KAAb;;IACA,IAAI,KAAKD,QAAT,EAAmB;MACf,IAAI;QACA,KAAKA,QAAL,CAAcE,IAAd,GAAqBC,aAAa,CAACJ,MAAM,CAACK,YAAR,EAAsBJ,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACE,IAAnF,CAAlC;MACH,CAFD,CAGA,OAAOG,EAAP,EAAW,CACP;QACA;QACA;MACH;;MACD,KAAKC,MAAL,GAAc,KAAKN,QAAL,CAAcM,MAA5B;IACH;;IACD,IAAIL,KAAK,IAAI,UAAUA,KAAnB,IAA4BA,KAAK,CAACM,IAAtC,EAA4C;MACxC,KAAKA,IAAL,GAAYN,KAAK,CAACM,IAAlB;IACH;;IACD,IAAIR,MAAM,CAACS,aAAX,EAA0B;MACtB,MAAMA,aAAa,GAAIT,MAAM,CAACS,aAA9B,CADsB,CAEtB;MACA;;MACA,KAAKT,MAAL,GAAc,EAAE,GAAGA;MAAL,CAAd;;MACA,IAAI,KAAKC,QAAT,EAAmB;QACf;QACA,KAAKA,QAAL,GAAgB,EAAE,GAAG,KAAKA,QAAV;UAAoBD,MAAM,EAAE,EAAE,GAAG,KAAKC,QAAL,CAAcD;UAAnB;QAA5B,CAAhB;MACH;;MACD,MAAMU,OAAO,GAAGD,aAAa,CAAC;QAAET,MAAF;QAAUC;MAAV,CAAD,CAA7B;MACA,KAAKD,MAAL,GAAc,EAAE,GAAGA,MAAL;QAAa,GAAGU,OAAO,CAACV;MAAxB,CAAd;;MACA,IAAI,KAAKC,QAAT,EAAmB;QACf,KAAKA,QAAL,GAAgB,EAAE,GAAG,KAAKA,QAAV;UAAoB,GAAGS,OAAO,CAACT,QAA/B;UAAyCD;QAAzC,CAAhB;MACH;IACJ;EACJ;;AAnC2B;;AAqChCT,OAAO,CAACG,WAAR,GAAsBA,WAAtB;;AACA,SAASU,aAAT,CAAuBC,YAAvB,EAAqCF,IAArC,EAA2C;EACvC,QAAQE,YAAR;IACI,KAAK,QAAL;MACI,OAAOF,IAAP;;IACJ,KAAK,MAAL;MACI,OAAOQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,IAAf,CAAX,CAAP;;IACJ,KAAK,aAAL;MACI,OAAOQ,IAAI,CAACC,KAAL,CAAWE,MAAM,CAACC,IAAP,CAAYZ,IAAZ,EAAkBa,QAAlB,CAA2B,MAA3B,CAAX,CAAP;;IACJ,KAAK,MAAL;MACI,OAAOL,IAAI,CAACC,KAAL,CAAWT,IAAI,CAACc,IAAL,EAAX,CAAP;;IACJ;MACI,OAAOd,IAAP;EAVR;AAYH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASV,oBAAT,CAA8BU,IAA9B,EAAoC;EAChC,MAAMe,MAAM,GAAG,0EAAf;;EACA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;IAC5B,IAAI,CAACA,OAAL,EACI;;IACJ,KAAK,MAAMC,GAAX,IAAkBhC,MAAM,CAACiC,IAAP,CAAYF,OAAZ,CAAlB,EAAwC;MACpC;MACA,IAAI,mBAAmBG,IAAnB,CAAwBF,GAAxB,CAAJ,EAAkC;QAC9BD,OAAO,CAACC,GAAD,CAAP,GAAeH,MAAf;MACH;IACJ;EACJ;;EACD,SAASM,YAAT,CAAsBC,GAAtB,EAA2BJ,GAA3B,EAAgC;IAC5B,IAAI,OAAOI,GAAP,KAAe,QAAf,IACAA,GAAG,KAAK,IADR,IAEA,OAAOA,GAAG,CAACJ,GAAD,CAAV,KAAoB,QAFxB,EAEkC;MAC9B,MAAMJ,IAAI,GAAGQ,GAAG,CAACJ,GAAD,CAAhB;;MACA,IAAI,cAAcE,IAAd,CAAmBN,IAAnB,KAA4B,aAAaM,IAAb,CAAkBN,IAAlB,CAAhC,EAAyD;QACrDQ,GAAG,CAACJ,GAAD,CAAH,GAAWH,MAAX;MACH;IACJ;EACJ;;EACD,SAASQ,YAAT,CAAsBD,GAAtB,EAA2B;IACvB,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;MACzC,IAAI,gBAAgBA,GAApB,EAAyB;QACrBA,GAAG,CAAC,YAAD,CAAH,GAAoBP,MAApB;MACH;;MACD,IAAI,eAAeO,GAAnB,EAAwB;QACpBA,GAAG,CAAC,WAAD,CAAH,GAAmBP,MAAnB;MACH;IACJ;EACJ;;EACD,IAAIf,IAAI,CAACH,MAAT,EAAiB;IACbmB,aAAa,CAAChB,IAAI,CAACH,MAAL,CAAYoB,OAAb,CAAb;IACAI,YAAY,CAACrB,IAAI,CAACH,MAAN,EAAc,MAAd,CAAZ;IACA0B,YAAY,CAACvB,IAAI,CAACH,MAAL,CAAYG,IAAb,CAAZ;IACAqB,YAAY,CAACrB,IAAI,CAACH,MAAN,EAAc,MAAd,CAAZ;IACA0B,YAAY,CAACvB,IAAI,CAACH,MAAL,CAAY2B,IAAb,CAAZ;;IACA,IAAI;MACA,MAAMC,GAAG,GAAG,IAAIjC,KAAK,CAACkC,GAAV,CAAc1B,IAAI,CAACH,MAAL,CAAY4B,GAAZ,IAAmB,EAAjC,CAAZ;;MACA,IAAIA,GAAG,CAACE,YAAJ,CAAiBC,GAAjB,CAAqB,OAArB,CAAJ,EAAmC;QAC/BH,GAAG,CAACE,YAAJ,CAAiBE,GAAjB,CAAqB,OAArB,EAA8Bd,MAA9B;MACH;;MACDf,IAAI,CAACH,MAAL,CAAY4B,GAAZ,GAAkBA,GAAG,CAACZ,QAAJ,EAAlB;IACH,CAND,CAOA,OAAOV,EAAP,EAAW,CACP;IACH;EACJ;;EACD,IAAIH,IAAI,CAACF,QAAT,EAAmB;IACfR,oBAAoB,CAAC;MAAEO,MAAM,EAAEG,IAAI,CAACF,QAAL,CAAcD;IAAxB,CAAD,CAApB;IACAmB,aAAa,CAAChB,IAAI,CAACF,QAAL,CAAcmB,OAAf,CAAb;IACAI,YAAY,CAACrB,IAAI,CAACF,QAAN,EAAgB,MAAhB,CAAZ;IACAyB,YAAY,CAACvB,IAAI,CAACF,QAAL,CAAcE,IAAf,CAAZ;EACH;;EACD,OAAOA,IAAP;AACH;;AACDZ,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B"},"metadata":{},"sourceType":"script"}