{"ast":null,"code":"\"use strict\";\n/* eslint-disable prefer-rest-params */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callbackifyAll = exports.callbackify = exports.promisifyAll = exports.promisify = void 0;\n/**\n * Wraps a callback style function to conditionally return a promise.\n *\n * @param {function} originalMethod - The method to promisify.\n * @param {object=} options - Promise options.\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\n * @return {function} wrapped\n */\n\nfunction promisify(originalMethod, options) {\n  if (originalMethod.promisified_) {\n    return originalMethod;\n  }\n\n  options = options || {};\n  const slice = Array.prototype.slice; // tslint:disable-next-line:no-any\n\n  const wrapper = function () {\n    let last;\n\n    for (last = arguments.length - 1; last >= 0; last--) {\n      const arg = arguments[last];\n\n      if (typeof arg === 'undefined') {\n        continue; // skip trailing undefined.\n      }\n\n      if (typeof arg !== 'function') {\n        break; // non-callback last argument found.\n      }\n\n      return originalMethod.apply(this, arguments);\n    } // peel trailing undefined.\n\n\n    const args = slice.call(arguments, 0, last + 1); // tslint:disable-next-line:variable-name\n\n    let PromiseCtor = Promise; // Because dedupe will likely create a single install of\n    // @google-cloud/common to be shared amongst all modules, we need to\n    // localize it at the Service level.\n\n    if (this && this.Promise) {\n      PromiseCtor = this.Promise;\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      // tslint:disable-next-line:no-any\n      args.push((...args) => {\n        const callbackArgs = slice.call(args);\n        const err = callbackArgs.shift();\n\n        if (err) {\n          return reject(err);\n        }\n\n        if (options.singular && callbackArgs.length === 1) {\n          resolve(callbackArgs[0]);\n        } else {\n          resolve(callbackArgs);\n        }\n      });\n      originalMethod.apply(this, args);\n    });\n  };\n\n  wrapper.promisified_ = true;\n  return wrapper;\n}\n\nexports.promisify = promisify;\n/**\n * Promisifies certain Class methods. This will not promisify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n// tslint:disable-next-line:variable-name\n\nfunction promisifyAll(Class, options) {\n  const exclude = options && options.exclude || [];\n  const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n  const methods = ownPropertyNames.filter(methodName => {\n    // clang-format off\n    return !exclude.includes(methodName) && typeof Class.prototype[methodName] === 'function' && // is it a function?\n    !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) // is it promisable?\n    ; // clang-format on\n  });\n  methods.forEach(methodName => {\n    const originalMethod = Class.prototype[methodName];\n\n    if (!originalMethod.promisified_) {\n      Class.prototype[methodName] = exports.promisify(originalMethod, options);\n    }\n  });\n}\n\nexports.promisifyAll = promisifyAll;\n/**\n * Wraps a promisy type function to conditionally call a callback function.\n *\n * @param {function} originalMethod - The method to callbackify.\n * @param {object=} options - Callback options.\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\n * @return {function} wrapped\n */\n\nfunction callbackify(originalMethod) {\n  if (originalMethod.callbackified_) {\n    return originalMethod;\n  } // tslint:disable-next-line:no-any\n\n\n  const wrapper = function () {\n    if (typeof arguments[arguments.length - 1] !== 'function') {\n      return originalMethod.apply(this, arguments);\n    }\n\n    const cb = Array.prototype.pop.call(arguments);\n    originalMethod.apply(this, arguments).then( // tslint:disable-next-line:no-any\n    res => {\n      res = Array.isArray(res) ? res : [res];\n      cb(null, ...res);\n    }, err => cb(err));\n  };\n\n  wrapper.callbackified_ = true;\n  return wrapper;\n}\n\nexports.callbackify = callbackify;\n/**\n * Callbackifies certain Class methods. This will not callbackify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n\nfunction callbackifyAll( // tslint:disable-next-line:variable-name\nClass, options) {\n  const exclude = options && options.exclude || [];\n  const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n  const methods = ownPropertyNames.filter(methodName => {\n    // clang-format off\n    return !exclude.includes(methodName) && typeof Class.prototype[methodName] === 'function' && // is it a function?\n    !/^_|(Stream|_)|^constructor$/.test(methodName) // is it callbackifyable?\n    ; // clang-format on\n  });\n  methods.forEach(methodName => {\n    const originalMethod = Class.prototype[methodName];\n\n    if (!originalMethod.callbackified_) {\n      Class.prototype[methodName] = exports.callbackify(originalMethod);\n    }\n  });\n}\n\nexports.callbackifyAll = callbackifyAll;","map":{"version":3,"names":["Object","defineProperty","exports","value","callbackifyAll","callbackify","promisifyAll","promisify","originalMethod","options","promisified_","slice","Array","prototype","wrapper","last","arguments","length","arg","apply","args","call","PromiseCtor","Promise","resolve","reject","push","callbackArgs","err","shift","singular","Class","exclude","ownPropertyNames","getOwnPropertyNames","methods","filter","methodName","includes","test","forEach","callbackified_","cb","pop","then","res","isArray"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/@google-cloud/promisify/build/src/index.js"],"sourcesContent":["\"use strict\";\n/* eslint-disable prefer-rest-params */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.callbackifyAll = exports.callbackify = exports.promisifyAll = exports.promisify = void 0;\n/**\n * Wraps a callback style function to conditionally return a promise.\n *\n * @param {function} originalMethod - The method to promisify.\n * @param {object=} options - Promise options.\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\n * @return {function} wrapped\n */\nfunction promisify(originalMethod, options) {\n    if (originalMethod.promisified_) {\n        return originalMethod;\n    }\n    options = options || {};\n    const slice = Array.prototype.slice;\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        let last;\n        for (last = arguments.length - 1; last >= 0; last--) {\n            const arg = arguments[last];\n            if (typeof arg === 'undefined') {\n                continue; // skip trailing undefined.\n            }\n            if (typeof arg !== 'function') {\n                break; // non-callback last argument found.\n            }\n            return originalMethod.apply(this, arguments);\n        }\n        // peel trailing undefined.\n        const args = slice.call(arguments, 0, last + 1);\n        // tslint:disable-next-line:variable-name\n        let PromiseCtor = Promise;\n        // Because dedupe will likely create a single install of\n        // @google-cloud/common to be shared amongst all modules, we need to\n        // localize it at the Service level.\n        if (this && this.Promise) {\n            PromiseCtor = this.Promise;\n        }\n        return new PromiseCtor((resolve, reject) => {\n            // tslint:disable-next-line:no-any\n            args.push((...args) => {\n                const callbackArgs = slice.call(args);\n                const err = callbackArgs.shift();\n                if (err) {\n                    return reject(err);\n                }\n                if (options.singular && callbackArgs.length === 1) {\n                    resolve(callbackArgs[0]);\n                }\n                else {\n                    resolve(callbackArgs);\n                }\n            });\n            originalMethod.apply(this, args);\n        });\n    };\n    wrapper.promisified_ = true;\n    return wrapper;\n}\nexports.promisify = promisify;\n/**\n * Promisifies certain Class methods. This will not promisify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n// tslint:disable-next-line:variable-name\nfunction promisifyAll(Class, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) // is it promisable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.promisified_) {\n            Class.prototype[methodName] = exports.promisify(originalMethod, options);\n        }\n    });\n}\nexports.promisifyAll = promisifyAll;\n/**\n * Wraps a promisy type function to conditionally call a callback function.\n *\n * @param {function} originalMethod - The method to callbackify.\n * @param {object=} options - Callback options.\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\n * @return {function} wrapped\n */\nfunction callbackify(originalMethod) {\n    if (originalMethod.callbackified_) {\n        return originalMethod;\n    }\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        if (typeof arguments[arguments.length - 1] !== 'function') {\n            return originalMethod.apply(this, arguments);\n        }\n        const cb = Array.prototype.pop.call(arguments);\n        originalMethod.apply(this, arguments).then(\n        // tslint:disable-next-line:no-any\n        (res) => {\n            res = Array.isArray(res) ? res : [res];\n            cb(null, ...res);\n        }, (err) => cb(err));\n    };\n    wrapper.callbackified_ = true;\n    return wrapper;\n}\nexports.callbackify = callbackify;\n/**\n * Callbackifies certain Class methods. This will not callbackify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\nfunction callbackifyAll(\n// tslint:disable-next-line:variable-name\nClass, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/^_|(Stream|_)|^constructor$/.test(methodName) // is it callbackifyable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.callbackified_) {\n            Class.prototype[methodName] = exports.callbackify(originalMethod);\n        }\n    });\n}\nexports.callbackifyAll = callbackifyAll;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}