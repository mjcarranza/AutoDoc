{"ast":null,"code":"\"use strict\"; // Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImageAnnotatorClient = void 0;\n\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p1beta1/image_annotator_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./image_annotator_client_config.json\");\n\nconst version = require('../../../package.json').version;\n/**\n *  Service that performs Google Cloud Vision API detection tasks over client\n *  images, such as face, landmark, logo, label, and text detection. The\n *  ImageAnnotator service returns detected entities from the images.\n * @class\n * @memberof v1p1beta1\n */\n\n\nclass ImageAnnotatorClient {\n  /**\n   * Construct an instance of ImageAnnotatorClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n   *     For more information, please check the\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n   *     need to avoid loading the default gRPC version and want to use the fallback\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\n   *     ```\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n   *     const client = new ImageAnnotatorClient({fallback: true}, gax);\n   *     ```\n   */\n  constructor(opts, gaxInstance) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // Request numeric enum values if REST transport is used.\n\n    opts.numericEnums = true; // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Load google-gax module synchronously if needed\n\n\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set useJWTAccessWithScope on the auth object.\n\n    this.auth.useJWTAccessWithScope = true; // Set defaultServicePath on the auth object.\n\n    this.auth.defaultServicePath = staticMembers.servicePath; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p1beta1.ImageAnnotator', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {}; // Add a warn function to the client constructor so it can be easily tested.\n\n    this.warn = this._gaxModule.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.imageAnnotatorStub) {\n      return this.imageAnnotatorStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.vision.v1p1beta1.ImageAnnotator.\n\n\n    this.imageAnnotatorStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.vision.v1p1beta1.ImageAnnotator') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.vision.v1p1beta1.ImageAnnotator, this._opts, this._providedCustomServicePath); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const imageAnnotatorStubMethods = ['batchAnnotateImages'];\n\n    for (const methodName of imageAnnotatorStubMethods) {\n      const callPromise = this.imageAnnotatorStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = undefined;\n\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.imageAnnotatorStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'vision.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-vision'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n\n  batchAnnotateImages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    this.initialize();\n    return this.innerApiCalls.batchAnnotateImages(request, options, callback);\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    if (this.imageAnnotatorStub && !this._terminated) {\n      return this.imageAnnotatorStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.ImageAnnotatorClient = ImageAnnotatorClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","ImageAnnotatorClient","jsonProtos","require","gapicConfig","version","constructor","opts","gaxInstance","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","numericEnums","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","_defaults","constructSettings","join","innerApiCalls","warn","initialize","imageAnnotatorStub","createStub","lookupService","google","cloud","vision","v1p1beta1","ImageAnnotator","imageAnnotatorStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","undefined","apiCall","createApiCall","getProjectId","callback","batchAnnotateImages","request","optionsOrCallback","options","otherArgs","headers","close","resolve"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/@google-cloud/vision/build/src/v1p1beta1/image_annotator_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImageAnnotatorClient = void 0;\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1p1beta1/image_annotator_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./image_annotator_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  Service that performs Google Cloud Vision API detection tasks over client\n *  images, such as face, landmark, logo, label, and text detection. The\n *  ImageAnnotator service returns detected entities from the images.\n * @class\n * @memberof v1p1beta1\n */\nclass ImageAnnotatorClient {\n    /**\n     * Construct an instance of ImageAnnotatorClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new ImageAnnotatorClient({fallback: true}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = staticMembers.servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.vision.v1p1beta1.ImageAnnotator', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.imageAnnotatorStub) {\n            return this.imageAnnotatorStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.vision.v1p1beta1.ImageAnnotator.\n        this.imageAnnotatorStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.vision.v1p1beta1.ImageAnnotator')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.vision.v1p1beta1.ImageAnnotator, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const imageAnnotatorStubMethods = ['batchAnnotateImages'];\n        for (const methodName of imageAnnotatorStubMethods) {\n            const callPromise = this.imageAnnotatorStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.imageAnnotatorStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'vision.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloud-vision',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    batchAnnotateImages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        this.initialize();\n        return this.innerApiCalls.batchAnnotateImages(request, options, callback);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.imageAnnotatorStub && !this._terminated) {\n            return this.imageAnnotatorStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.ImageAnnotatorClient = ImageAnnotatorClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}