{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from 'src/environments/environment';\nimport { gptModels } from '../models/constants';\nimport * as i0 from \"@angular/core\";\nexport class PersonalizationComponent {\n  constructor() {\n    this.chatConversation = [];\n    this.gptModels = gptModels;\n    this.promptText = '';\n    this.showSpinner = false;\n    this.selectedImage = '';\n  }\n\n  ngOnInit() {}\n\n  checkResponse() {\n    this.pushChatContent(this.promptText, 'You', 'person');\n    this.invokeGPT();\n  }\n\n  pushChatContent(content, person, cssClass) {\n    const chatToPush = {\n      person: person,\n      response: content,\n      cssClass: cssClass\n    };\n    this.chatConversation.push(chatToPush);\n  }\n\n  getText(data) {\n    return data.split('\\n').filter(f => f.length > 0);\n  }\n\n  invokeGPT() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.promptText.length < 2) return;\n\n      try {\n        _this.response = undefined;\n        let configuration = new Configuration({\n          apiKey: environment.apiKey\n        });\n        let openai = new OpenAIApi(configuration);\n        let requestData = {\n          model: 'text-davinci-003',\n          prompt: _this.promptText,\n          temperature: 0.95,\n          max_tokens: 150,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0\n        };\n        _this.showSpinner = true;\n        let apiResponse = yield openai.createCompletion(requestData);\n        _this.response = apiResponse.data;\n\n        _this.pushChatContent(_this.response.choices[0].text.trim(), 'Mr Bot', 'bot');\n\n        debugger;\n        _this.showSpinner = false;\n      } catch (error) {\n        _this.showSpinner = false; // Consider adjusting the error handling logic for your use case\n\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n        }\n      }\n    })();\n  }\n\n  onFileSelected(event) {\n    const file = event.target.files[0];\n\n    if (file) {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.onload = evt => {\n        this.selectedImage = evt.target.result;\n      };\n    }\n  }\n\n}\n\nPersonalizationComponent.ɵfac = function PersonalizationComponent_Factory(t) {\n  return new (t || PersonalizationComponent)();\n};\n\nPersonalizationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PersonalizationComponent,\n  selectors: [[\"app-personalization\"]],\n  decls: 0,\n  vars: 0,\n  template: function PersonalizationComponent_Template(rf, ctx) {},\n  styles: [\".push-right[_ngcontent-%COMP%] {\\r\\n    margin-left: 90%;\\r\\n}\\r\\n\\r\\n.person[_ngcontent-%COMP%] {\\r\\n    font-style: italic;\\r\\n    font-weight: bold;\\r\\n    color: purple;\\r\\n}\\r\\n\\r\\n.bot[_ngcontent-%COMP%] {    \\r\\n    font-weight: bold; \\r\\n    color: darkgreen;\\r\\n}\\r\\n\\r\\n.frame-box[_ngcontent-%COMP%]{\\r\\n    border: dotted 2px orange; padding: 20px;\\r\\n    min-height: 400px;\\r\\n    max-height: 400px;\\r\\n    overflow-y: scroll\\r\\n}\\r\\n\\r\\n.padding[_ngcontent-%COMP%]{\\r\\n    padding: 5px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBlcnNvbmFsaXphdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLHlCQUF5QixFQUFFLGFBQWE7SUFDeEMsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQjtBQUNKOztBQUdBO0lBQ0ksWUFBWTtBQUNoQiIsImZpbGUiOiJwZXJzb25hbGl6YXRpb24uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wdXNoLXJpZ2h0IHtcclxuICAgIG1hcmdpbi1sZWZ0OiA5MCU7XHJcbn1cclxuXHJcbi5wZXJzb24ge1xyXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogcHVycGxlO1xyXG59XHJcblxyXG4uYm90IHsgICAgXHJcbiAgICBmb250LXdlaWdodDogYm9sZDsgXHJcbiAgICBjb2xvcjogZGFya2dyZWVuO1xyXG59XHJcblxyXG4uZnJhbWUtYm94e1xyXG4gICAgYm9yZGVyOiBkb3R0ZWQgMnB4IG9yYW5nZTsgcGFkZGluZzogMjBweDtcclxuICAgIG1pbi1oZWlnaHQ6IDQwMHB4O1xyXG4gICAgbWF4LWhlaWdodDogNDAwcHg7XHJcbiAgICBvdmVyZmxvdy15OiBzY3JvbGxcclxufVxyXG5cclxuXHJcbi5wYWRkaW5ne1xyXG4gICAgcGFkZGluZzogNXB4O1xyXG59Il19 */\"]\n});","map":{"version":3,"mappings":"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","names":["Configuration","OpenAIApi","environment","gptModels","PersonalizationComponent","constructor","ngOnInit","checkResponse","pushChatContent","promptText","invokeGPT","content","person","cssClass","chatToPush","response","chatConversation","push","getText","data","split","filter","f","length","undefined","configuration","apiKey","openai","requestData","model","prompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","showSpinner","apiResponse","createCompletion","choices","text","trim","error","console","status","message","onFileSelected","event","file","target","files","reader","FileReader","readAsDataURL","onload","evt","selectedImage","result","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\Users\\mario\\Desktop\\AutoDocIA\\src\\app\\personalization\\personalization.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Configuration, OpenAIApi } from 'openai';\nimport { environment } from 'src/environments/environment';\nimport { gptModels } from '../models/constants';\nimport { ChatWithBot, ResponseModel } from '../models/gpt-response';\n\n@Component({\n  selector: 'app-personalization',\n  templateUrl: './personalization.component.html',\n  styleUrls: ['./personalization.component.css']\n})\nexport class PersonalizationComponent implements OnInit {\n  chatConversation: ChatWithBot[]=[];\n  response!: ResponseModel | undefined;\n      gptModels = gptModels\n      promptText = '';\n      showSpinner = false;\n  \n    constructor() { }\n  \n    ngOnInit(): void {\n    }\n  \n    checkResponse() {\n      this.pushChatContent(this.promptText,'You','person');\n      this.invokeGPT();\n    }\n  \n  \n    pushChatContent(content:string, person:string, cssClass:string) {\n      const chatToPush: ChatWithBot = { person:person, response:content, cssClass:cssClass};\n      this.chatConversation.push(chatToPush);\n    }\n  \n  \n    getText(data:string) {\n      return data.split('\\n').filter(f=>f.length>0);\n    }\n  \n    async invokeGPT() {\n     \n  \n      if(this.promptText.length<2)\n      return;\n  \n      \n  \n      try{\n        this.response = undefined;\n        let configuration = new Configuration({apiKey: environment.apiKey});\n        let openai = new OpenAIApi(configuration);\n  \n        let requestData={\n          model: 'text-davinci-003',//'text-davinci-003',//\"text-curie-001\",\n          prompt: this.promptText,//this.generatePrompt(animal),\n          temperature: 0.95,\n          max_tokens: 150,\n          top_p: 1.0,\n          frequency_penalty: 0.0,\n          presence_penalty: 0.0,\n        };\n        this.showSpinner = true;\n        let apiResponse =  await openai.createCompletion(requestData);\n  \n        this.response = apiResponse.data as ResponseModel;\n        this.pushChatContent(this.response.choices[0].text.trim(),'Mr Bot','bot');\n  debugger;\n        this.showSpinner = false;\n      }catch(error:any) {\n        this.showSpinner = false;\n        // Consider adjusting the error handling logic for your use case\n        if (error.response) {\n          console.error(error.response.status, error.response.data);\n          \n        } else {\n          console.error(`Error with OpenAI API request: ${error.message}`);\n          \n        }\n      }\n    }\n  \n    selectedImage: string = '';\n\n    onFileSelected(event: any) {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = (evt:any) =>{\n          this.selectedImage = evt.target.result as string;\n        }\n      }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}