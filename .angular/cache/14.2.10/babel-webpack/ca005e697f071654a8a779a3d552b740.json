{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Type; // extends Namespace\n\nvar Namespace = require(\"./namespace\");\n\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum = require(\"./enum\"),\n    OneOf = require(\"./oneof\"),\n    Field = require(\"./field\"),\n    MapField = require(\"./mapfield\"),\n    Service = require(\"./service\"),\n    Message = require(\"./message\"),\n    Reader = require(\"./reader\"),\n    Writer = require(\"./writer\"),\n    util = require(\"./util\"),\n    encoder = require(\"./encoder\"),\n    decoder = require(\"./decoder\"),\n    verifier = require(\"./verifier\"),\n    converter = require(\"./converter\"),\n    wrappers = require(\"./wrappers\");\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n\nfunction Type(name, options) {\n  Namespace.call(this, name, options);\n  /**\n   * Message fields.\n   * @type {Object.<string,Field>}\n   */\n\n  this.fields = {}; // toJSON, marker\n\n  /**\n   * Oneofs declared within this namespace, if any.\n   * @type {Object.<string,OneOf>}\n   */\n\n  this.oneofs = undefined; // toJSON\n\n  /**\n   * Extension ranges, if any.\n   * @type {number[][]}\n   */\n\n  this.extensions = undefined; // toJSON\n\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n\n  this.reserved = undefined; // toJSON\n\n  /*?\n   * Whether this type is a legacy group.\n   * @type {boolean|undefined}\n   */\n\n  this.group = undefined; // toJSON\n\n  /**\n   * Cached fields by id.\n   * @type {Object.<number,Field>|null}\n   * @private\n   */\n\n  this._fieldsById = null;\n  /**\n   * Cached fields as an array.\n   * @type {Field[]|null}\n   * @private\n   */\n\n  this._fieldsArray = null;\n  /**\n   * Cached oneofs as an array.\n   * @type {OneOf[]|null}\n   * @private\n   */\n\n  this._oneofsArray = null;\n  /**\n   * Cached constructor.\n   * @type {Constructor<{}>}\n   * @private\n   */\n\n  this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n  /**\n   * Message fields by id.\n   * @name Type#fieldsById\n   * @type {Object.<number,Field>}\n   * @readonly\n   */\n  fieldsById: {\n    get: function () {\n      /* istanbul ignore if */\n      if (this._fieldsById) return this._fieldsById;\n      this._fieldsById = {};\n\n      for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n        var field = this.fields[names[i]],\n            id = field.id;\n        /* istanbul ignore if */\n\n        if (this._fieldsById[id]) throw Error(\"duplicate id \" + id + \" in \" + this);\n        this._fieldsById[id] = field;\n      }\n\n      return this._fieldsById;\n    }\n  },\n\n  /**\n   * Fields of this message as an array for iteration.\n   * @name Type#fieldsArray\n   * @type {Field[]}\n   * @readonly\n   */\n  fieldsArray: {\n    get: function () {\n      return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n    }\n  },\n\n  /**\n   * Oneofs of this message as an array for iteration.\n   * @name Type#oneofsArray\n   * @type {OneOf[]}\n   * @readonly\n   */\n  oneofsArray: {\n    get: function () {\n      return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n    }\n  },\n\n  /**\n   * The registered constructor, if any registered, otherwise a generic constructor.\n   * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n   * @name Type#ctor\n   * @type {Constructor<{}>}\n   */\n  ctor: {\n    get: function () {\n      return this._ctor || (this.ctor = Type.generateConstructor(this)());\n    },\n    set: function (ctor) {\n      // Ensure proper prototype\n      var prototype = ctor.prototype;\n\n      if (!(prototype instanceof Message)) {\n        (ctor.prototype = new Message()).constructor = ctor;\n        util.merge(ctor.prototype, prototype);\n      } // Classes and messages reference their reflected type\n\n\n      ctor.$type = ctor.prototype.$type = this; // Mix in static methods\n\n      util.merge(ctor, Message, true);\n      this._ctor = ctor; // Messages have non-enumerable default values on their prototype\n\n      var i = 0;\n\n      for (; i <\n      /* initializes */\n      this.fieldsArray.length; ++i) this._fieldsArray[i].resolve(); // ensures a proper value\n      // Messages have non-enumerable getters and setters for each virtual oneof field\n\n\n      var ctorProperties = {};\n\n      for (i = 0; i <\n      /* initializes */\n      this.oneofsArray.length; ++i) ctorProperties[this._oneofsArray[i].resolve().name] = {\n        get: util.oneOfGetter(this._oneofsArray[i].oneof),\n        set: util.oneOfSetter(this._oneofsArray[i].oneof)\n      };\n\n      if (i) Object.defineProperties(ctor.prototype, ctorProperties);\n    }\n  }\n});\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\n\nType.generateConstructor = function generateConstructor(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"p\"], mtype.name); // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n\n  for (var i = 0, field; i < mtype.fieldsArray.length; ++i) if ((field = mtype._fieldsArray[i]).map) gen(\"this%s={}\", util.safeProp(field.name));else if (field.repeated) gen(\"this%s=[]\", util.safeProp(field.name));\n\n  return gen(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n  (\"this[ks[i]]=p[ks[i]]\");\n  /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n  type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n  delete type.encode;\n  delete type.decode;\n  delete type.verify;\n  return type;\n}\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\n\n\nType.fromJSON = function fromJSON(name, json) {\n  var type = new Type(name, json.options);\n  type.extensions = json.extensions;\n  type.reserved = json.reserved;\n  var names = Object.keys(json.fields),\n      i = 0;\n\n  for (; i < names.length; ++i) type.add((typeof json.fields[names[i]].keyType !== \"undefined\" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));\n\n  if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n  if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n    var nested = json.nested[names[i]];\n    type.add( // most to least likely\n    (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));\n  }\n  if (json.extensions && json.extensions.length) type.extensions = json.extensions;\n  if (json.reserved && json.reserved.length) type.reserved = json.reserved;\n  if (json.group) type.group = true;\n  if (json.comment) type.comment = json.comment;\n  return type;\n};\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\n\n\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"oneofs\", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), \"fields\", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {\n    return !obj.declaringField;\n  }), toJSONOptions) || {}, \"extensions\", this.extensions && this.extensions.length ? this.extensions : undefined, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"group\", this.group || undefined, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n/**\n * @override\n */\n\n\nType.prototype.resolveAll = function resolveAll() {\n  var fields = this.fieldsArray,\n      i = 0;\n\n  while (i < fields.length) fields[i++].resolve();\n\n  var oneofs = this.oneofsArray;\n  i = 0;\n\n  while (i < oneofs.length) oneofs[i++].resolve();\n\n  return Namespace.prototype.resolveAll.call(this);\n};\n/**\n * @override\n */\n\n\nType.prototype.get = function get(name) {\n  return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;\n};\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\n\n\nType.prototype.add = function add(object) {\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n  if (object instanceof Field && object.extend === undefined) {\n    // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n    // The root object takes care of adding distinct sister-fields to the respective extended\n    // type instead.\n    // avoids calling the getter if not absolutely necessary because it's called quite frequently\n    if (this._fieldsById ?\n    /* istanbul ignore next */\n    this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error(\"duplicate id \" + object.id + \" in \" + this);\n    if (this.isReservedId(object.id)) throw Error(\"id \" + object.id + \" is reserved in \" + this);\n    if (this.isReservedName(object.name)) throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n    if (object.parent) object.parent.remove(object);\n    this.fields[object.name] = object;\n    object.message = this;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n\n  if (object instanceof OneOf) {\n    if (!this.oneofs) this.oneofs = {};\n    this.oneofs[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n\n  return Namespace.prototype.add.call(this, object);\n};\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\n\n\nType.prototype.remove = function remove(object) {\n  if (object instanceof Field && object.extend === undefined) {\n    // See Type#add for the reason why extension fields are excluded here.\n\n    /* istanbul ignore if */\n    if (!this.fields || this.fields[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.fields[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n\n  if (object instanceof OneOf) {\n    /* istanbul ignore if */\n    if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.oneofs[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n\n  return Namespace.prototype.remove.call(this, object);\n};\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\n\n\nType.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\n\n\nType.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\n\n\nType.prototype.create = function create(properties) {\n  return new this.ctor(properties);\n};\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\n\n\nType.prototype.setup = function setup() {\n  // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n  // multiple times (V8, soft-deopt prototype-check).\n  var fullName = this.fullName,\n      types = [];\n\n  for (var i = 0; i <\n  /* initializes */\n  this.fieldsArray.length; ++i) types.push(this._fieldsArray[i].resolve().resolvedType); // Replace setup methods with type-specific generated functions\n\n\n  this.encode = encoder(this)({\n    Writer: Writer,\n    types: types,\n    util: util\n  });\n  this.decode = decoder(this)({\n    Reader: Reader,\n    types: types,\n    util: util\n  });\n  this.verify = verifier(this)({\n    types: types,\n    util: util\n  });\n  this.fromObject = converter.fromObject(this)({\n    types: types,\n    util: util\n  });\n  this.toObject = converter.toObject(this)({\n    types: types,\n    util: util\n  }); // Inject custom wrappers for common types\n\n  var wrapper = wrappers[fullName];\n\n  if (wrapper) {\n    var originalThis = Object.create(this); // if (wrapper.fromObject) {\n\n    originalThis.fromObject = this.fromObject;\n    this.fromObject = wrapper.fromObject.bind(originalThis); // }\n    // if (wrapper.toObject) {\n\n    originalThis.toObject = this.toObject;\n    this.toObject = wrapper.toObject.bind(originalThis); // }\n  }\n\n  return this;\n};\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\n\n\nType.prototype.encode = function encode_setup(message, writer) {\n  return this.setup().encode(message, writer); // overrides this method\n};\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\n\n\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\n\n\nType.prototype.decode = function decode_setup(reader, length) {\n  return this.setup().decode(reader, length); // overrides this method\n};\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\n\n\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n  if (!(reader instanceof Reader)) reader = Reader.create(reader);\n  return this.decode(reader, reader.uint32());\n};\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\n\n\nType.prototype.verify = function verify_setup(message) {\n  return this.setup().verify(message); // overrides this method\n};\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\n\n\nType.prototype.fromObject = function fromObject(object) {\n  return this.setup().fromObject(object);\n};\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\n\n\nType.prototype.toObject = function toObject(message, options) {\n  return this.setup().toObject(message, options);\n};\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\n\n\nType.d = function decorateType(typeName) {\n  return function typeDecorator(target) {\n    util.decorateType(target, typeName);\n  };\n};","map":{"version":3,"names":["module","exports","Type","Namespace","require","prototype","Object","create","constructor","className","Enum","OneOf","Field","MapField","Service","Message","Reader","Writer","util","encoder","decoder","verifier","converter","wrappers","name","options","call","fields","oneofs","undefined","extensions","reserved","group","_fieldsById","_fieldsArray","_oneofsArray","_ctor","defineProperties","fieldsById","get","names","keys","i","length","field","id","Error","fieldsArray","toArray","oneofsArray","ctor","generateConstructor","set","merge","$type","resolve","ctorProperties","oneOfGetter","oneof","oneOfSetter","mtype","gen","codegen","map","safeProp","repeated","clearCache","type","encode","decode","verify","fromJSON","json","add","keyType","nested","values","methods","comment","toJSON","toJSONOptions","inherited","keepComments","Boolean","toObject","arrayToJSON","filter","obj","declaringField","resolveAll","object","extend","isReservedId","isReservedName","parent","remove","message","onAdd","onRemove","properties","setup","fullName","types","push","resolvedType","fromObject","wrapper","originalThis","bind","encode_setup","writer","encodeDelimited","len","fork","ldelim","decode_setup","reader","decodeDelimited","uint32","verify_setup","d","decorateType","typeName","typeDecorator","target"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/protobufjs/src/type.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(\"./enum\"),\n    OneOf     = require(\"./oneof\"),\n    Field     = require(\"./field\"),\n    MapField  = require(\"./mapfield\"),\n    Service   = require(\"./service\"),\n    Message   = require(\"./message\"),\n    Reader    = require(\"./reader\"),\n    Writer    = require(\"./writer\"),\n    util      = require(\"./util\"),\n    encoder   = require(\"./encoder\"),\n    decoder   = require(\"./decoder\"),\n    verifier  = require(\"./verifier\"),\n    converter = require(\"./converter\"),\n    wrappers  = require(\"./wrappers\");\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}