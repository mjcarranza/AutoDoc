{"ast":null,"code":"\"use strict\";\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\n\nvar path = exports;\n\nvar isAbsolute =\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\npath.isAbsolute = function isAbsolute(path) {\n  return /^(?:\\/|\\w+:)/.test(path);\n};\n\nvar normalize =\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\npath.normalize = function normalize(path) {\n  path = path.replace(/\\\\/g, \"/\").replace(/\\/{2,}/g, \"/\");\n  var parts = path.split(\"/\"),\n      absolute = isAbsolute(path),\n      prefix = \"\";\n  if (absolute) prefix = parts.shift() + \"/\";\n\n  for (var i = 0; i < parts.length;) {\n    if (parts[i] === \"..\") {\n      if (i > 0 && parts[i - 1] !== \"..\") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;\n    } else if (parts[i] === \".\") parts.splice(i, 1);else ++i;\n  }\n\n  return prefix + parts.join(\"/\");\n};\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\n\n\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\n  if (!alreadyNormalized) includePath = normalize(includePath);\n  if (isAbsolute(includePath)) return includePath;\n  if (!alreadyNormalized) originPath = normalize(originPath);\n  return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\n};","map":{"version":3,"names":["path","exports","isAbsolute","test","normalize","replace","parts","split","absolute","prefix","shift","i","length","splice","join","resolve","originPath","includePath","alreadyNormalized"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/@protobufjs/path/index.js"],"sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAIA,IAAI,GAAGC,OAAX;;AAEA,IAAIC,UAAU;AACd;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACE,UAAL,GAAkB,SAASA,UAAT,CAAoBF,IAApB,EAA0B;EACxC,OAAO,eAAeG,IAAf,CAAoBH,IAApB,CAAP;AACH,CARD;;AAUA,IAAII,SAAS;AACb;AACA;AACA;AACA;AACA;AACAJ,IAAI,CAACI,SAAL,GAAiB,SAASA,SAAT,CAAmBJ,IAAnB,EAAyB;EACtCA,IAAI,GAAGA,IAAI,CAACK,OAAL,CAAa,KAAb,EAAoB,GAApB,EACKA,OADL,CACa,SADb,EACwB,GADxB,CAAP;EAEA,IAAIC,KAAK,GAAMN,IAAI,CAACO,KAAL,CAAW,GAAX,CAAf;EAAA,IACIC,QAAQ,GAAGN,UAAU,CAACF,IAAD,CADzB;EAAA,IAEIS,MAAM,GAAK,EAFf;EAGA,IAAID,QAAJ,EACIC,MAAM,GAAGH,KAAK,CAACI,KAAN,KAAgB,GAAzB;;EACJ,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,GAAmC;IAC/B,IAAIN,KAAK,CAACK,CAAD,CAAL,KAAa,IAAjB,EAAuB;MACnB,IAAIA,CAAC,GAAG,CAAJ,IAASL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,KAAiB,IAA9B,EACIL,KAAK,CAACO,MAAN,CAAa,EAAEF,CAAf,EAAkB,CAAlB,EADJ,KAEK,IAAIH,QAAJ,EACDF,KAAK,CAACO,MAAN,CAAaF,CAAb,EAAgB,CAAhB,EADC,KAGD,EAAEA,CAAF;IACP,CAPD,MAOO,IAAIL,KAAK,CAACK,CAAD,CAAL,KAAa,GAAjB,EACHL,KAAK,CAACO,MAAN,CAAaF,CAAb,EAAgB,CAAhB,EADG,KAGH,EAAEA,CAAF;EACP;;EACD,OAAOF,MAAM,GAAGH,KAAK,CAACQ,IAAN,CAAW,GAAX,CAAhB;AACH,CA5BD;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAd,IAAI,CAACe,OAAL,GAAe,SAASA,OAAT,CAAiBC,UAAjB,EAA6BC,WAA7B,EAA0CC,iBAA1C,EAA6D;EACxE,IAAI,CAACA,iBAAL,EACID,WAAW,GAAGb,SAAS,CAACa,WAAD,CAAvB;EACJ,IAAIf,UAAU,CAACe,WAAD,CAAd,EACI,OAAOA,WAAP;EACJ,IAAI,CAACC,iBAAL,EACIF,UAAU,GAAGZ,SAAS,CAACY,UAAD,CAAtB;EACJ,OAAO,CAACA,UAAU,GAAGA,UAAU,CAACX,OAAX,CAAmB,gBAAnB,EAAqC,EAArC,CAAd,EAAwDO,MAAxD,GAAiER,SAAS,CAACY,UAAU,GAAG,GAAb,GAAmBC,WAApB,CAA1E,GAA6GA,WAApH;AACH,CARD"},"metadata":{},"sourceType":"script"}