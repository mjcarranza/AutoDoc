{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LocationsClient = void 0;\n/* global window */\n\nconst gax = require(\"./gax\");\n\nconst warnings_1 = require(\"./warnings\");\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst routingHeader = require(\"./routingHeader\");\n\nconst pageDescriptor_1 = require(\"./paginationCalls/pageDescriptor\");\n\nconst jsonProtos = require(\"../protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nconst gapicConfig = require(\"./locations_client_config.json\");\n\nconst version = require('../../package.json').version;\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\n\n\nclass LocationsClient {\n  /**\n   * Construct an instance of LocationsClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  opts) {\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    this.gaxGrpc = gaxGrpc;\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Save options to use in initialize() method.\n\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    const clientHeader = [`gax/${version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = gaxGrpc.loadProtoJSON(jsonProtos); // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations')\n    }; // Put together the default options sent with requests.\n\n    this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {}; // Add a warn function to the client constructor so it can be easily tested.\n\n    this.warn = warnings_1.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.locationsStub) {\n      return this.locationsStub;\n    } // Put together the \"service stub\" for\n    // google.cloud.location.Locations.\n\n\n    this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.location.Locations') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const locationsStubMethods = ['listLocations', 'getLocation'];\n\n    for (const methodName of locationsStubMethods) {\n      const callPromise = this.locationsStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || undefined;\n      const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n\n    return this.locationsStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get servicePath() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n\n\n  static get apiEndpoint() {\n    return 'cloud.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform'];\n  }\n\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n\n    return this.auth.getProjectId();\n  }\n  /**\n   * Gets information about a location.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Resource name for the location.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getLocation(request);\n   */\n\n\n  getLocation(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getLocation(request, options, callback);\n  }\n  /**\n   * Lists information about the supported locations for this service.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listLocationsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n\n\n  listLocations(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listLocations(request, options, callback);\n  }\n  /**\n   * Equivalent to `listLocations`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listLocationsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n\n\n  listLocationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      name: request.name || ''\n    });\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    this.initialize();\n    return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.locationsStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.LocationsClient = LocationsClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","LocationsClient","gax","require","warnings_1","createApiCall_1","routingHeader","pageDescriptor_1","jsonProtos","gapicConfig","version","constructor","gaxGrpc","opts","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","scopes","_opts","auth","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","listLocations","PageDescriptor","_defaults","constructSettings","join","innerApiCalls","warn","initialize","locationsStub","createStub","lookupService","google","cloud","location","Locations","locationsStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","undefined","apiCall","createApiCall","getProjectId","callback","getLocation","request","optionsOrCallback","options","otherArgs","headers","fromParams","name","listLocationsAsync","callSettings","CallSettings","asyncIterate","close","resolve"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/locationService.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LocationsClient = void 0;\n/* global window */\nconst gax = require(\"./gax\");\nconst warnings_1 = require(\"./warnings\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst pageDescriptor_1 = require(\"./paginationCalls/pageDescriptor\");\nconst jsonProtos = require(\"../protos/locations.json\");\n/**\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./locations_client_config.json\");\nconst version = require('../../package.json').version;\n/**\n *  Google Cloud Locations Client.\n *  This is manually written for providing methods [listLocations, getLocations] to the generated client.\n */\nclass LocationsClient {\n    /**\n     * Construct an instance of LocationsClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        this.gaxGrpc = gaxGrpc;\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listLocations: new pageDescriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'locations'),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.cloud.location.Locations', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = warnings_1.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.locationsStub) {\n            return this.locationsStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.location.Locations.\n        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.location.Locations')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.location.Locations, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const locationsStubMethods = ['listLocations', 'getLocation'];\n        for (const methodName of locationsStubMethods) {\n            const callPromise = this.locationsStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] || undefined;\n            const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.locationsStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'cloud.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return ['https://www.googleapis.com/auth/cloud-platform'];\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getLocation(request);\n     */\n    getLocation(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listLocationsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listLocations(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listLocations(request, options, callback);\n    }\n    /**\n     * Equivalent to `listLocations`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listLocationsAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                name: request.name || '',\n            });\n        options = options || {};\n        const callSettings = new gax.CallSettings(options);\n        this.initialize();\n        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls['listLocations'], request, callSettings);\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.locationsStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.LocationsClient = LocationsClient;\n"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;AACA;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,iBAAD,CAA/B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,kCAAD,CAAhC;;AACA,MAAMK,UAAU,GAAGL,OAAO,CAAC,0BAAD,CAA1B;AACA;AACA;AACA;;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,gCAAD,CAA3B;;AACA,MAAMO,OAAO,GAAGP,OAAO,CAAC,oBAAD,CAAP,CAA8BO,OAA9C;AACA;AACA;AACA;AACA;;;AACA,MAAMT,eAAN,CAAsB;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,WAAW,CAACC,OAAD,EACX;EACAC,IAFW,EAEL;IACF,IAAIC,EAAJ,EAAQC,EAAR;;IACA,KAAKC,WAAL,GAAmB,KAAnB;IACA,KAAKC,WAAL,GAAmB;MACfC,IAAI,EAAE,EADS;MAEfC,MAAM,EAAE,EAFO;MAGfC,WAAW,EAAE,EAHE;MAIfC,QAAQ,EAAE;IAJK,CAAnB,CAHE,CASF;;IACA,KAAKT,OAAL,GAAeA,OAAf;IACA,MAAMU,aAAa,GAAG,KAAKX,WAA3B;IACA,MAAMY,WAAW,GAAG,CAACV,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACU,WAAlD,MAAmEV,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACW,WAApH,KAAoIF,aAAa,CAACC,WAAtK;IACA,KAAKE,0BAAL,GAAkC,CAAC,EAAE,CAACZ,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACU,WAAlD,MAAmEV,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACW,WAApH,CAAF,CAAnC;IACA,MAAME,IAAI,GAAG,CAACb,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACa,IAAlD,KAA2DJ,aAAa,CAACI,IAAtF;IACA,MAAMC,YAAY,GAAG,CAACb,EAAE,GAAGD,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACc,YAAvD,MAAyE,IAAzE,IAAiFb,EAAE,KAAK,KAAK,CAA7F,GAAiGA,EAAjG,GAAsG,EAA3H;IACA,MAAMc,QAAQ,GAAG,CAACb,EAAE,GAAGF,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACe,QAAvD,MAAqE,IAArE,IAA6Eb,EAAE,KAAK,KAAK,CAAzF,GAA6FA,EAA7F,GAAmG,OAAOc,MAAP,KAAkB,WAAlB,IAAiC,QAAQA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACC,KAA/D,MAA0E,UAA/N;IACAjB,IAAI,GAAGhB,MAAM,CAACkC,MAAP,CAAc;MAAER,WAAF;MAAeG,IAAf;MAAqBC,YAArB;MAAmCC;IAAnC,CAAd,EAA6Df,IAA7D,CAAP,CAjBE,CAkBF;;IACA,IAAIU,WAAW,KAAKD,aAAa,CAACC,WAA9B,IAA6C,EAAE,YAAYV,IAAd,CAAjD,EAAsE;MAClEA,IAAI,CAAC,QAAD,CAAJ,GAAiBS,aAAa,CAACU,MAA/B;IACH,CArBC,CAsBF;;;IACA,KAAKC,KAAL,GAAapB,IAAb,CAvBE,CAwBF;;IACA,KAAKqB,IAAL,GAAYtB,OAAO,CAACsB,IAApB,CAzBE,CA0BF;;IACA,IAAIX,WAAW,KAAKD,aAAa,CAACC,WAAlC,EAA+C;MAC3C,KAAKW,IAAL,CAAUC,aAAV,GAA0Bb,aAAa,CAACU,MAAxC;IACH,CA7BC,CA8BF;;;IACA,MAAMI,YAAY,GAAG,CAAE,OAAM1B,OAAQ,EAAhB,EAAoB,SAAQA,OAAQ,EAApC,CAArB;;IACA,IAAI,OAAO2B,OAAP,KAAmB,WAAnB,IAAkC,cAAcA,OAApD,EAA6D;MACzDD,YAAY,CAACE,IAAb,CAAmB,WAAUD,OAAO,CAACE,QAAR,CAAiBC,IAAK,EAAnD;IACH,CAFD,MAGK;MACDJ,YAAY,CAACE,IAAb,CAAmB,UAAS5B,OAAQ,EAApC;IACH;;IACD,IAAI,CAACG,IAAI,CAACe,QAAV,EAAoB;MAChBQ,YAAY,CAACE,IAAb,CAAmB,QAAO1B,OAAO,CAAC6B,WAAY,EAA9C;IACH,CAFD,MAGK,IAAI5B,IAAI,CAACe,QAAL,KAAkB,MAAtB,EAA8B;MAC/BQ,YAAY,CAACE,IAAb,CAAmB,QAAO1B,OAAO,CAAC6B,WAAY,EAA9C;IACH;;IACD,IAAI5B,IAAI,CAAC6B,OAAL,IAAgB7B,IAAI,CAAC8B,UAAzB,EAAqC;MACjCP,YAAY,CAACE,IAAb,CAAmB,GAAEzB,IAAI,CAAC6B,OAAQ,IAAG7B,IAAI,CAAC8B,UAAW,EAArD;IACH,CA9CC,CA+CF;;;IACA,KAAKC,OAAL,GAAehC,OAAO,CAACiC,aAAR,CAAsBrC,UAAtB,CAAf,CAhDE,CAiDF;IACA;IACA;;IACA,KAAKS,WAAL,CAAiBC,IAAjB,GAAwB;MACpB4B,aAAa,EAAE,IAAIvC,gBAAgB,CAACwC,cAArB,CAAoC,WAApC,EAAiD,eAAjD,EAAkE,WAAlE;IADK,CAAxB,CApDE,CAuDF;;IACA,KAAKC,SAAL,GAAiBpC,OAAO,CAACqC,iBAAR,CAA0B,iCAA1B,EAA6DxC,WAA7D,EAA0EI,IAAI,CAACc,YAAL,IAAqB,EAA/F,EAAmG;MAAE,qBAAqBS,YAAY,CAACc,IAAb,CAAkB,GAAlB;IAAvB,CAAnG,CAAjB,CAxDE,CAyDF;IACA;IACA;;IACA,KAAKC,aAAL,GAAqB,EAArB,CA5DE,CA6DF;;IACA,KAAKC,IAAL,GAAYhD,UAAU,CAACgD,IAAvB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,UAAU,GAAG;IACT;IACA,IAAI,KAAKC,aAAT,EAAwB;MACpB,OAAO,KAAKA,aAAZ;IACH,CAJQ,CAKT;IACA;;;IACA,KAAKA,aAAL,GAAqB,KAAK1C,OAAL,CAAa2C,UAAb,CAAwB,KAAKtB,KAAL,CAAWL,QAAX,GACvC,KAAKgB,OAAL,CAAaY,aAAb,CAA2B,iCAA3B,CADuC,GAEvC;IACE,KAAKZ,OAAL,CAAaa,MAAb,CAAoBC,KAApB,CAA0BC,QAA1B,CAAmCC,SAHtB,EAGiC,KAAK3B,KAHtC,EAG6C,KAAKR,0BAHlD,CAArB,CAPS,CAWT;IACA;;IACA,MAAMoC,oBAAoB,GAAG,CAAC,eAAD,EAAkB,aAAlB,CAA7B;;IACA,KAAK,MAAMC,UAAX,IAAyBD,oBAAzB,EAA+C;MAC3C,MAAME,WAAW,GAAG,KAAKT,aAAL,CAAmBU,IAAnB,CAAwBC,IAAI,IAAI,CAAC,GAAGC,IAAJ,KAAa;QAC7D,IAAI,KAAKlD,WAAT,EAAsB;UAClB,OAAOmD,OAAO,CAACC,MAAR,CAAe,qCAAf,CAAP;QACH;;QACD,MAAMC,IAAI,GAAGJ,IAAI,CAACH,UAAD,CAAjB;QACA,OAAOO,IAAI,CAACC,KAAL,CAAWL,IAAX,EAAiBC,IAAjB,CAAP;MACH,CANmB,EAMhBK,GAAD,IAAS,MAAM;QACd,MAAMA,GAAN;MACH,CARmB,CAApB;MASA,MAAMC,UAAU,GAAG,KAAKvD,WAAL,CAAiBC,IAAjB,CAAsB4C,UAAtB,KAAqCW,SAAxD;MACA,MAAMC,OAAO,GAAG,CAAC,GAAGrE,eAAe,CAACsE,aAApB,EAAmCZ,WAAnC,EAAgD,KAAKf,SAAL,CAAec,UAAf,CAAhD,EAA4EU,UAA5E,CAAhB;MACA,KAAKrB,aAAL,CAAmBW,UAAnB,IAAiCY,OAAjC;IACH;;IACD,OAAO,KAAKpB,aAAZ;EACH;EACD;AACJ;AACA;AACA;;;EAC0B,WAAX/B,WAAW,GAAG;IACrB,OAAO,sBAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EAC0B,WAAXC,WAAW,GAAG;IACrB,OAAO,sBAAP;EACH;EACD;AACJ;AACA;AACA;;;EACmB,WAAJE,IAAI,GAAG;IACd,OAAO,GAAP;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACqB,WAANM,MAAM,GAAG;IAChB,OAAO,CAAC,gDAAD,CAAP;EACH;;EACD4C,YAAY,CAACC,QAAD,EAAW;IACnB,IAAIA,QAAJ,EAAc;MACV,KAAK3C,IAAL,CAAU0C,YAAV,CAAuBC,QAAvB;MACA;IACH;;IACD,OAAO,KAAK3C,IAAL,CAAU0C,YAAV,EAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIE,WAAW,CAACC,OAAD,EAAUC,iBAAV,EAA6BH,QAA7B,EAAuC;IAC9CE,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,IAAIE,OAAJ;;IACA,IAAI,OAAOD,iBAAP,KAA6B,UAA7B,IAA2CH,QAAQ,KAAKJ,SAA5D,EAAuE;MACnEI,QAAQ,GAAGG,iBAAX;MACAC,OAAO,GAAG,EAAV;IACH,CAHD,MAIK;MACDA,OAAO,GAAGD,iBAAV;IACH;;IACDC,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;IACAD,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;IACAF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IACI7E,aAAa,CAAC8E,UAAd,CAAyB;MACrBC,IAAI,EAAEN,OAAO,CAACM,IAAR,IAAgB;IADD,CAAzB,CADJ;IAIA,KAAKhC,UAAL;IACA,OAAO,KAAKF,aAAL,CAAmB2B,WAAnB,CAA+BC,OAA/B,EAAwCE,OAAxC,EAAiDJ,QAAjD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI/B,aAAa,CAACiC,OAAD,EAAUC,iBAAV,EAA6BH,QAA7B,EAAuC;IAChDE,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,IAAIE,OAAJ;;IACA,IAAI,OAAOD,iBAAP,KAA6B,UAA7B,IAA2CH,QAAQ,KAAKJ,SAA5D,EAAuE;MACnEI,QAAQ,GAAGG,iBAAX;MACAC,OAAO,GAAG,EAAV;IACH,CAHD,MAIK;MACDA,OAAO,GAAGD,iBAAV;IACH;;IACDC,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;IACAD,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;IACAF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IACI7E,aAAa,CAAC8E,UAAd,CAAyB;MACrBC,IAAI,EAAEN,OAAO,CAACM,IAAR,IAAgB;IADD,CAAzB,CADJ;IAIA,KAAKhC,UAAL;IACA,OAAO,KAAKF,aAAL,CAAmBL,aAAnB,CAAiCiC,OAAjC,EAA0CE,OAA1C,EAAmDJ,QAAnD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIS,kBAAkB,CAACP,OAAD,EAAUE,OAAV,EAAmB;IACjCF,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAE,OAAO,GAAGA,OAAO,IAAI,EAArB;IACAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqB,EAAzC;IACAD,OAAO,CAACC,SAAR,CAAkBC,OAAlB,GAA4BF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,IAA6B,EAAzD;IACAF,OAAO,CAACC,SAAR,CAAkBC,OAAlB,CAA0B,uBAA1B,IACI7E,aAAa,CAAC8E,UAAd,CAAyB;MACrBC,IAAI,EAAEN,OAAO,CAACM,IAAR,IAAgB;IADD,CAAzB,CADJ;IAIAJ,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,MAAMM,YAAY,GAAG,IAAIrF,GAAG,CAACsF,YAAR,CAAqBP,OAArB,CAArB;IACA,KAAK5B,UAAL;IACA,OAAO,KAAKpC,WAAL,CAAiBC,IAAjB,CAAsB4B,aAAtB,CAAoC2C,YAApC,CAAiD,KAAKtC,aAAL,CAAmB,eAAnB,CAAjD,EAAsF4B,OAAtF,EAA+FQ,YAA/F,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIG,KAAK,GAAG;IACJ,KAAKrC,UAAL;;IACA,IAAI,CAAC,KAAKrC,WAAV,EAAuB;MACnB,OAAO,KAAKsC,aAAL,CAAmBU,IAAnB,CAAwBC,IAAI,IAAI;QACnC,KAAKjD,WAAL,GAAmB,IAAnB;QACAiD,IAAI,CAACyB,KAAL;MACH,CAHM,CAAP;IAIH;;IACD,OAAOvB,OAAO,CAACwB,OAAR,EAAP;EACH;;AAjUiB;;AAmUtB5F,OAAO,CAACE,eAAR,GAA0BA,eAA1B"},"metadata":{},"sourceType":"script"}