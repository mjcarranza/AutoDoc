{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar _asyncToGenerator = require(\"C:/Users/mario/Desktop/AutoDocIA/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.setGCPResidency = exports.getGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jsonBigint = require(\"json-bigint\");\n\nconst gcp_residency_1 = require(\"./gcp-residency\");\n\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */\n\nexports.METADATA_SERVER_DETECTION = Object.freeze({\n  'assume-present': \"don't try to ping the metadata server, but assume it's present\",\n  none: \"don't try to ping the metadata server, but don't try to use it either\",\n  'bios-only': \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n  'ping-only': 'skip the BIOS probe, and go straight to pinging'\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\n\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  } // If no scheme is provided default to HTTP:\n\n\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n\n  return new URL(exports.BASE_PATH, baseUrl).href;\n} // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\n\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\n\nfunction metadataAccessor(_x, _x2) {\n  return _metadataAccessor.apply(this, arguments);\n}\n\nfunction _metadataAccessor() {\n  _metadataAccessor = _asyncToGenerator(function* (type, options, noResponseRetries = 3, fastFail = false) {\n    options = options || {};\n\n    if (typeof options === 'string') {\n      options = {\n        property: options\n      };\n    }\n\n    let property = '';\n\n    if (typeof options === 'object' && options.property) {\n      property = '/' + options.property;\n    }\n\n    validate(options);\n\n    try {\n      const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n      const res = yield requestMethod({\n        url: `${getBaseUrl()}/${type}${property}`,\n        headers: Object.assign({}, exports.HEADERS, options.headers),\n        retryConfig: {\n          noResponseRetries\n        },\n        params: options.params,\n        responseType: 'text',\n        timeout: requestTimeout()\n      }); // NOTE: node.js converts all incoming headers to lower case.\n\n      if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n        throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n      } else if (!res.data) {\n        throw new Error('Invalid response from the metadata service');\n      }\n\n      if (typeof res.data === 'string') {\n        try {\n          return jsonBigint.parse(res.data);\n        } catch (_a) {\n          /* ignore */\n        }\n      }\n\n      return res.data;\n    } catch (e) {\n      const err = e;\n\n      if (err.response && err.response.status !== 200) {\n        err.message = `Unsuccessful response status code. ${err.message}`;\n      }\n\n      throw e;\n    }\n  });\n  return _metadataAccessor.apply(this, arguments);\n}\n\nfunction fastFailMetadataRequest(_x3) {\n  return _fastFailMetadataRequest.apply(this, arguments);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _fastFailMetadataRequest() {\n  _fastFailMetadataRequest = _asyncToGenerator(function* (options) {\n    const secondaryOptions = { ...options,\n      url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n    }; // We race a connection between DNS/IP to metadata server. There are a couple\n    // reasons for this:\n    //\n    // 1. the DNS is slow in some GCP environments; by checking both, we might\n    //    detect the runtime environment signficantly faster.\n    // 2. we can't just check the IP, which is tarpitted and slow to respond\n    //    on a user's local machine.\n    //\n    // Additional logic has been added to make sure that we don't create an\n    // unhandled rejection in scenarios where a failure happens sometime\n    // after a success.\n    //\n    // Note, however, if a failure happens prior to a success, a rejection should\n    // occur, this is for folks running locally.\n    //\n\n    let responded = false;\n    const r1 = (0, gaxios_1.request)(options).then(res => {\n      responded = true;\n      return res;\n    }).catch(err => {\n      if (responded) {\n        return r2;\n      } else {\n        responded = true;\n        throw err;\n      }\n    });\n    const r2 = (0, gaxios_1.request)(secondaryOptions).then(res => {\n      responded = true;\n      return res;\n    }).catch(err => {\n      if (responded) {\n        return r1;\n      } else {\n        responded = true;\n        throw err;\n      }\n    });\n    return Promise.race([r1, r2]);\n  });\n  return _fastFailMetadataRequest.apply(this, arguments);\n}\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\n\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\n\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\n\nfunction isAvailable() {\n  return _isAvailable.apply(this, arguments);\n}\n\nfunction _isAvailable() {\n  _isAvailable = _asyncToGenerator(function* () {\n    if (process.env.METADATA_SERVER_DETECTION) {\n      const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n\n      if (!(value in exports.METADATA_SERVER_DETECTION)) {\n        throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join('`, `')}\\`, or unset`);\n      }\n\n      switch (value) {\n        case 'assume-present':\n          return true;\n\n        case 'none':\n          return false;\n\n        case 'bios-only':\n          return getGCPResidency();\n\n        case 'ping-only': // continue, we want to ping the server\n\n      }\n    }\n\n    try {\n      // If a user is instantiating several GCP libraries at the same time,\n      // this may result in multiple calls to isAvailable(), to detect the\n      // runtime environment. We use the same promise for each of these calls\n      // to reduce the network load.\n      if (cachedIsAvailableResponse === undefined) {\n        cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), // If the default HOST_ADDRESS has been overridden, we should not\n        // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n        // a non-GCP environment):\n        !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n      }\n\n      yield cachedIsAvailableResponse;\n      return true;\n    } catch (e) {\n      const err = e;\n\n      if (process.env.DEBUG_AUTH) {\n        console.info(err);\n      }\n\n      if (err.type === 'request-timeout') {\n        // If running in a GCP environment, metadata endpoint should return\n        // within ms.\n        return false;\n      }\n\n      if (err.response && err.response.status === 404) {\n        return false;\n      } else {\n        if (!(err.response && err.response.status === 404) && ( // A warning is emitted if we see an unexpected err.code, or err.code\n        // is not populated:\n        !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code))) {\n          let code = 'UNKNOWN';\n          if (err.code) code = err.code;\n          process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n        } // Failure to resolve the metadata service means that it is not available.\n\n\n        return false;\n      }\n    }\n  });\n  return _isAvailable.apply(this, arguments);\n}\n\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\n\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\n\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\n\nexports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */\n\nfunction getGCPResidency() {\n  if (exports.gcpResidencyCache === null) {\n    setGCPResidency();\n  }\n\n  return exports.gcpResidencyCache;\n}\n\nexports.getGCPResidency = getGCPResidency;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */\n\nfunction setGCPResidency(value = null) {\n  exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\n\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\n\nfunction requestTimeout() {\n  return getGCPResidency() ? 0 : 3000;\n}\n\nexports.requestTimeout = requestTimeout;\n\n__exportStar(require(\"./gcp-residency\"), exports);","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__exportStar","exports","p","prototype","hasOwnProperty","call","value","requestTimeout","setGCPResidency","getGCPResidency","gcpResidencyCache","resetIsAvailableCache","isAvailable","project","instance","METADATA_SERVER_DETECTION","HEADERS","HEADER_VALUE","HEADER_NAME","SECONDARY_HOST_ADDRESS","HOST_ADDRESS","BASE_PATH","gaxios_1","require","jsonBigint","gcp_residency_1","freeze","none","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","fastFail","property","requestMethod","fastFailMetadataRequest","request","res","url","headers","assign","retryConfig","params","responseType","timeout","toLowerCase","data","parse","_a","e","err","response","status","message","secondaryOptions","replace","responded","r1","then","catch","r2","Promise","race","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","trim","toLocaleLowerCase","RangeError","join","DEBUG_AUTH","console","info","code","includes","emitWarning","detectGCPResidency"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/gcp-metadata/build/src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.requestTimeout = exports.setGCPResidency = exports.getGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require(\"json-bigint\");\nconst gcp_residency_1 = require(\"./gcp-residency\");\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({ [exports.HEADER_NAME]: exports.HEADER_VALUE });\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */\nexports.METADATA_SERVER_DETECTION = Object.freeze({\n    'assume-present': \"don't try to ping the metadata server, but assume it's present\",\n    none: \"don't try to ping the metadata server, but don't try to use it either\",\n    'bios-only': \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n    'ping-only': 'skip the BIOS probe, and go straight to pinging',\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\nfunction getBaseUrl(baseUrl) {\n    if (!baseUrl) {\n        baseUrl =\n            process.env.GCE_METADATA_IP ||\n                process.env.GCE_METADATA_HOST ||\n                exports.HOST_ADDRESS;\n    }\n    // If no scheme is provided default to HTTP:\n    if (!/^https?:\\/\\//.test(baseUrl)) {\n        baseUrl = `http://${baseUrl}`;\n    }\n    return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n    Object.keys(options).forEach(key => {\n        switch (key) {\n            case 'params':\n            case 'property':\n            case 'headers':\n                break;\n            case 'qs':\n                throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n            default:\n                throw new Error(`'${key}' is not a valid configuration option.`);\n        }\n    });\n}\nasync function metadataAccessor(type, options, noResponseRetries = 3, fastFail = false) {\n    options = options || {};\n    if (typeof options === 'string') {\n        options = { property: options };\n    }\n    let property = '';\n    if (typeof options === 'object' && options.property) {\n        property = '/' + options.property;\n    }\n    validate(options);\n    try {\n        const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n        const res = await requestMethod({\n            url: `${getBaseUrl()}/${type}${property}`,\n            headers: Object.assign({}, exports.HEADERS, options.headers),\n            retryConfig: { noResponseRetries },\n            params: options.params,\n            responseType: 'text',\n            timeout: requestTimeout(),\n        });\n        // NOTE: node.js converts all incoming headers to lower case.\n        if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n            throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n        }\n        else if (!res.data) {\n            throw new Error('Invalid response from the metadata service');\n        }\n        if (typeof res.data === 'string') {\n            try {\n                return jsonBigint.parse(res.data);\n            }\n            catch (_a) {\n                /* ignore */\n            }\n        }\n        return res.data;\n    }\n    catch (e) {\n        const err = e;\n        if (err.response && err.response.status !== 200) {\n            err.message = `Unsuccessful response status code. ${err.message}`;\n        }\n        throw e;\n    }\n}\nasync function fastFailMetadataRequest(options) {\n    const secondaryOptions = {\n        ...options,\n        url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS)),\n    };\n    // We race a connection between DNS/IP to metadata server. There are a couple\n    // reasons for this:\n    //\n    // 1. the DNS is slow in some GCP environments; by checking both, we might\n    //    detect the runtime environment signficantly faster.\n    // 2. we can't just check the IP, which is tarpitted and slow to respond\n    //    on a user's local machine.\n    //\n    // Additional logic has been added to make sure that we don't create an\n    // unhandled rejection in scenarios where a failure happens sometime\n    // after a success.\n    //\n    // Note, however, if a failure happens prior to a success, a rejection should\n    // occur, this is for folks running locally.\n    //\n    let responded = false;\n    const r1 = (0, gaxios_1.request)(options)\n        .then(res => {\n        responded = true;\n        return res;\n    })\n        .catch(err => {\n        if (responded) {\n            return r2;\n        }\n        else {\n            responded = true;\n            throw err;\n        }\n    });\n    const r2 = (0, gaxios_1.request)(secondaryOptions)\n        .then(res => {\n        responded = true;\n        return res;\n    })\n        .catch(err => {\n        if (responded) {\n            return r1;\n        }\n        else {\n            responded = true;\n            throw err;\n        }\n    });\n    return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instance(options) {\n    return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n    return metadataAccessor('project', options);\n}\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\nfunction detectGCPAvailableRetries() {\n    return process.env.DETECT_GCP_RETRIES\n        ? Number(process.env.DETECT_GCP_RETRIES)\n        : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\nasync function isAvailable() {\n    if (process.env.METADATA_SERVER_DETECTION) {\n        const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n        if (!(value in exports.METADATA_SERVER_DETECTION)) {\n            throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join('`, `')}\\`, or unset`);\n        }\n        switch (value) {\n            case 'assume-present':\n                return true;\n            case 'none':\n                return false;\n            case 'bios-only':\n                return getGCPResidency();\n            case 'ping-only':\n            // continue, we want to ping the server\n        }\n    }\n    try {\n        // If a user is instantiating several GCP libraries at the same time,\n        // this may result in multiple calls to isAvailable(), to detect the\n        // runtime environment. We use the same promise for each of these calls\n        // to reduce the network load.\n        if (cachedIsAvailableResponse === undefined) {\n            cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), \n            // If the default HOST_ADDRESS has been overridden, we should not\n            // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n            // a non-GCP environment):\n            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n        }\n        await cachedIsAvailableResponse;\n        return true;\n    }\n    catch (e) {\n        const err = e;\n        if (process.env.DEBUG_AUTH) {\n            console.info(err);\n        }\n        if (err.type === 'request-timeout') {\n            // If running in a GCP environment, metadata endpoint should return\n            // within ms.\n            return false;\n        }\n        if (err.response && err.response.status === 404) {\n            return false;\n        }\n        else {\n            if (!(err.response && err.response.status === 404) &&\n                // A warning is emitted if we see an unexpected err.code, or err.code\n                // is not populated:\n                (!err.code ||\n                    ![\n                        'EHOSTDOWN',\n                        'EHOSTUNREACH',\n                        'ENETUNREACH',\n                        'ENOENT',\n                        'ENOTFOUND',\n                        'ECONNREFUSED',\n                    ].includes(err.code))) {\n                let code = 'UNKNOWN';\n                if (err.code)\n                    code = err.code;\n                process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n            }\n            // Failure to resolve the metadata service means that it is not available.\n            return false;\n        }\n    }\n}\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\nfunction resetIsAvailableCache() {\n    cachedIsAvailableResponse = undefined;\n}\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\nexports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */\nfunction getGCPResidency() {\n    if (exports.gcpResidencyCache === null) {\n        setGCPResidency();\n    }\n    return exports.gcpResidencyCache;\n}\nexports.getGCPResidency = getGCPResidency;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */\nfunction setGCPResidency(value = null) {\n    exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\nfunction requestTimeout() {\n    return getGCPResidency() ? 0 : 3000;\n}\nexports.requestTimeout = requestTimeout;\n__exportStar(require(\"./gcp-residency\"), exports);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}