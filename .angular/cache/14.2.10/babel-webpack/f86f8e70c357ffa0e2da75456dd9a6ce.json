{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Task = exports.deepCopyForResponse = void 0;\n\nconst status_1 = require(\"../status\");\n\nconst googleError_1 = require(\"../googleError\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\n\n\nfunction deepCopyForResponse( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let result;\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (obj === undefined) {\n    return undefined;\n  }\n\n  if (Array.isArray(obj)) {\n    result = [];\n    obj.forEach(element => {\n      result.push(deepCopyForResponse(element, null));\n    });\n    return result;\n  } // Some objects (such as ByteBuffer) have copy method.\n\n\n  if (obj.copy !== undefined) {\n    return obj.copy();\n  } // ArrayBuffer should be copied through slice().\n\n\n  if (obj instanceof ArrayBuffer) {\n    return obj.slice(0);\n  }\n\n  if (typeof obj === 'object') {\n    result = {};\n    Object.keys(obj).forEach(key => {\n      if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {\n        // Note that subresponses are not deep-copied. This is safe because\n        // those subresponses are not shared among callbacks.\n        result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n      } else {\n        result[key] = deepCopyForResponse(obj[key], null);\n      }\n    });\n    return result;\n  }\n\n  return obj;\n}\n\nexports.deepCopyForResponse = deepCopyForResponse;\n\nclass Task {\n  /**\n   * A task coordinates the execution of a single bundle.\n   *\n   * @param {function} apiCall - The function to conduct calling API.\n   * @param {Object} bundlingRequest - The base request object to be used\n   *   for the actual API call.\n   * @param {string} bundledField - The name of the field in bundlingRequest\n   *   to be bundled.\n   * @param {string=} subresponseField - The name of the field in the response\n   *   to be passed to the callback.\n   * @constructor\n   * @private\n   */\n  constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n    this._apiCall = apiCall;\n    this._request = bundlingRequest;\n    this._bundledField = bundledField;\n    this._subresponseField = subresponseField;\n    this._data = [];\n  }\n  /**\n   * Returns the number of elements in a task.\n   * @return {number} The number of elements.\n   */\n\n\n  getElementCount() {\n    let count = 0;\n\n    for (let i = 0; i < this._data.length; ++i) {\n      count += this._data[i].elements.length;\n    }\n\n    return count;\n  }\n  /**\n   * Returns the total byte size of the elements in a task.\n   * @return {number} The byte size.\n   */\n\n\n  getRequestByteSize() {\n    let size = 0;\n\n    for (let i = 0; i < this._data.length; ++i) {\n      size += this._data[i].bytes;\n    }\n\n    return size;\n  }\n  /**\n   * Invokes the actual API call with current elements.\n   * @return {string[]} - the list of ids for invocations to be run.\n   */\n\n\n  run() {\n    if (this._data.length === 0) {\n      return [];\n    }\n\n    const request = this._request;\n    const elements = [];\n    const ids = [];\n\n    for (let i = 0; i < this._data.length; ++i) {\n      elements.push(...this._data[i].elements);\n      ids.push(this._data[i].callback.id);\n    }\n\n    request[this._bundledField] = elements; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    const self = this;\n    this.callCanceller = this._apiCall(request, (err, response) => {\n      const responses = [];\n\n      if (err) {\n        self._data.forEach(() => {\n          responses.push(undefined);\n        });\n      } else {\n        let subresponseInfo = null;\n\n        if (self._subresponseField) {\n          subresponseInfo = {\n            field: self._subresponseField,\n            start: 0\n          };\n        }\n\n        self._data.forEach(data => {\n          if (subresponseInfo) {\n            subresponseInfo.end = subresponseInfo.start + data.elements.length;\n          }\n\n          responses.push(deepCopyForResponse(response, subresponseInfo));\n\n          if (subresponseInfo) {\n            subresponseInfo.start = subresponseInfo.end;\n          }\n        });\n      }\n\n      for (let i = 0; i < self._data.length; ++i) {\n        if (self._data[i].cancelled) {\n          const error = new googleError_1.GoogleError('cancelled');\n          error.code = status_1.Status.CANCELLED;\n\n          self._data[i].callback(error);\n        } else {\n          self._data[i].callback(err, responses[i]);\n        }\n      }\n    });\n    return ids;\n  }\n  /**\n   * Appends the list of elements into the task.\n   * @param {Object[]} elements - the new list of elements.\n   * @param {number} bytes - the byte size required to encode elements in the API.\n   * @param {APICallback} callback - the callback of the method call.\n   */\n\n\n  extend(elements, bytes, callback) {\n    this._data.push({\n      elements,\n      bytes,\n      callback\n    });\n  }\n  /**\n   * Cancels a part of elements.\n   * @param {string} id - The identifier of the part of elements.\n   * @return {boolean} Whether the entire task will be canceled or not.\n   */\n\n\n  cancel(id) {\n    if (this.callCanceller) {\n      let allCancelled = true;\n\n      this._data.forEach(d => {\n        if (d.callback.id === id) {\n          d.cancelled = true;\n        }\n\n        if (!d.cancelled) {\n          allCancelled = false;\n        }\n      });\n\n      if (allCancelled) {\n        this.callCanceller.cancel();\n      }\n\n      return allCancelled;\n    }\n\n    for (let i = 0; i < this._data.length; ++i) {\n      if (this._data[i].callback.id === id) {\n        const error = new googleError_1.GoogleError('cancelled');\n        error.code = status_1.Status.CANCELLED;\n\n        this._data[i].callback(error);\n\n        this._data.splice(i, 1);\n\n        break;\n      }\n    }\n\n    return this._data.length === 0;\n  }\n\n}\n\nexports.Task = Task;","map":{"version":3,"names":["Object","defineProperty","exports","value","Task","deepCopyForResponse","status_1","require","googleError_1","obj","subresponseInfo","result","undefined","Array","isArray","forEach","element","push","copy","ArrayBuffer","slice","keys","key","field","start","end","constructor","apiCall","bundlingRequest","bundledField","subresponseField","_apiCall","_request","_bundledField","_subresponseField","_data","getElementCount","count","i","length","elements","getRequestByteSize","size","bytes","run","request","ids","callback","id","self","callCanceller","err","response","responses","data","cancelled","error","GoogleError","code","Status","CANCELLED","extend","cancel","allCancelled","d","splice"],"sources":["C:/Users/mario/Desktop/AutoDocIA/node_modules/google-gax/build/src/bundlingCalls/task.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Task = exports.deepCopyForResponse = void 0;\nconst status_1 = require(\"../status\");\nconst googleError_1 = require(\"../googleError\");\n/**\n * Creates a deep copy of the object with the consideration of subresponse\n * fields for bundling.\n *\n * @param {Object} obj - The source object.\n * @param {Object?} subresponseInfo - The information to copy the subset of\n *   the field for the response. Do nothing if it's null.\n * @param {String} subresponseInfo.field - The field name.\n * @param {number} subresponseInfo.start - The offset where the copying\n *   element should starts with.\n * @param {number} subresponseInfo.end - The ending index where the copying\n *   region of the elements ends.\n * @return {Object} The copied object.\n * @private\n */\nfunction deepCopyForResponse(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobj, subresponseInfo) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let result;\n    if (obj === null) {\n        return null;\n    }\n    if (obj === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(obj)) {\n        result = [];\n        obj.forEach(element => {\n            result.push(deepCopyForResponse(element, null));\n        });\n        return result;\n    }\n    // Some objects (such as ByteBuffer) have copy method.\n    if (obj.copy !== undefined) {\n        return obj.copy();\n    }\n    // ArrayBuffer should be copied through slice().\n    if (obj instanceof ArrayBuffer) {\n        return obj.slice(0);\n    }\n    if (typeof obj === 'object') {\n        result = {};\n        Object.keys(obj).forEach(key => {\n            if (subresponseInfo &&\n                key === subresponseInfo.field &&\n                Array.isArray(obj[key])) {\n                // Note that subresponses are not deep-copied. This is safe because\n                // those subresponses are not shared among callbacks.\n                result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);\n            }\n            else {\n                result[key] = deepCopyForResponse(obj[key], null);\n            }\n        });\n        return result;\n    }\n    return obj;\n}\nexports.deepCopyForResponse = deepCopyForResponse;\nclass Task {\n    /**\n     * A task coordinates the execution of a single bundle.\n     *\n     * @param {function} apiCall - The function to conduct calling API.\n     * @param {Object} bundlingRequest - The base request object to be used\n     *   for the actual API call.\n     * @param {string} bundledField - The name of the field in bundlingRequest\n     *   to be bundled.\n     * @param {string=} subresponseField - The name of the field in the response\n     *   to be passed to the callback.\n     * @constructor\n     * @private\n     */\n    constructor(apiCall, bundlingRequest, bundledField, subresponseField) {\n        this._apiCall = apiCall;\n        this._request = bundlingRequest;\n        this._bundledField = bundledField;\n        this._subresponseField = subresponseField;\n        this._data = [];\n    }\n    /**\n     * Returns the number of elements in a task.\n     * @return {number} The number of elements.\n     */\n    getElementCount() {\n        let count = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            count += this._data[i].elements.length;\n        }\n        return count;\n    }\n    /**\n     * Returns the total byte size of the elements in a task.\n     * @return {number} The byte size.\n     */\n    getRequestByteSize() {\n        let size = 0;\n        for (let i = 0; i < this._data.length; ++i) {\n            size += this._data[i].bytes;\n        }\n        return size;\n    }\n    /**\n     * Invokes the actual API call with current elements.\n     * @return {string[]} - the list of ids for invocations to be run.\n     */\n    run() {\n        if (this._data.length === 0) {\n            return [];\n        }\n        const request = this._request;\n        const elements = [];\n        const ids = [];\n        for (let i = 0; i < this._data.length; ++i) {\n            elements.push(...this._data[i].elements);\n            ids.push(this._data[i].callback.id);\n        }\n        request[this._bundledField] = elements;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.callCanceller = this._apiCall(request, (err, response) => {\n            const responses = [];\n            if (err) {\n                self._data.forEach(() => {\n                    responses.push(undefined);\n                });\n            }\n            else {\n                let subresponseInfo = null;\n                if (self._subresponseField) {\n                    subresponseInfo = {\n                        field: self._subresponseField,\n                        start: 0,\n                    };\n                }\n                self._data.forEach(data => {\n                    if (subresponseInfo) {\n                        subresponseInfo.end =\n                            subresponseInfo.start + data.elements.length;\n                    }\n                    responses.push(deepCopyForResponse(response, subresponseInfo));\n                    if (subresponseInfo) {\n                        subresponseInfo.start = subresponseInfo.end;\n                    }\n                });\n            }\n            for (let i = 0; i < self._data.length; ++i) {\n                if (self._data[i].cancelled) {\n                    const error = new googleError_1.GoogleError('cancelled');\n                    error.code = status_1.Status.CANCELLED;\n                    self._data[i].callback(error);\n                }\n                else {\n                    self._data[i].callback(err, responses[i]);\n                }\n            }\n        });\n        return ids;\n    }\n    /**\n     * Appends the list of elements into the task.\n     * @param {Object[]} elements - the new list of elements.\n     * @param {number} bytes - the byte size required to encode elements in the API.\n     * @param {APICallback} callback - the callback of the method call.\n     */\n    extend(elements, bytes, callback) {\n        this._data.push({\n            elements,\n            bytes,\n            callback,\n        });\n    }\n    /**\n     * Cancels a part of elements.\n     * @param {string} id - The identifier of the part of elements.\n     * @return {boolean} Whether the entire task will be canceled or not.\n     */\n    cancel(id) {\n        if (this.callCanceller) {\n            let allCancelled = true;\n            this._data.forEach(d => {\n                if (d.callback.id === id) {\n                    d.cancelled = true;\n                }\n                if (!d.cancelled) {\n                    allCancelled = false;\n                }\n            });\n            if (allCancelled) {\n                this.callCanceller.cancel();\n            }\n            return allCancelled;\n        }\n        for (let i = 0; i < this._data.length; ++i) {\n            if (this._data[i].callback.id === id) {\n                const error = new googleError_1.GoogleError('cancelled');\n                error.code = status_1.Status.CANCELLED;\n                this._data[i].callback(error);\n                this._data.splice(i, 1);\n                break;\n            }\n        }\n        return this._data.length === 0;\n    }\n}\nexports.Task = Task;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}